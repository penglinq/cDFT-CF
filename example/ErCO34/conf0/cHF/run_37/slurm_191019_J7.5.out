Currently Loaded Modulefiles:
 1) gmp/6.2.1-gcc-13.2.0-lcnhyse <aL>             
 2) mpfr/4.2.0-gcc-13.2.0-yy2fkq5 <aL>            
 3) mpc/1.3.1-gcc-13.2.0-5kgoftq <aL>             
 4) zlib-ng/2.1.3-gcc-13.2.0-jetnfwa <aL>         
 5) zstd/1.5.5-gcc-13.2.0-t2lua3l <aL>            
 6) gcc/13.2.0-gcc-13.2.0-w55nxkl                 
 7) cmake/3.20.2-gcc-13.2.0-rp74vpv               
 8) libfabric/1.18.1-gcc-13.2.0-bijxar4 <aL>      
 9) numactl/2.0.14-gcc-13.2.0-etkf74e <aL>        
10) openssh/8.7p1-gcc-13.2.0-g55xmkx <aL>         
11) slurm/22.05.6-gcc-13.2.0-tchsn6y <aL>         
12) openmpi/4.1.5-gcc-13.2.0-24q3ap2              
13) libpciaccess/0.17-gcc-13.2.0-r2cijnn <aL>     
14) libiconv/1.17-gcc-13.2.0-ntov4te <aL>         
15) xz/5.4.1-gcc-13.2.0-4xkm5xo <aL>              
16) libxml2/2.10.3-gcc-13.2.0-fr6jcjz <aL>        
17) ncurses/6.4-gcc-13.2.0-4o2yj6n <aL>           
18) hwloc/2.9.1-gcc-13.2.0-gzvfolk <aL>           
19) intel-tbb/2021.9.0-gcc-13.2.0-6nwk3ml <aL>    
20) intel-oneapi-mkl/2023.2.0-gcc-13.2.0-ohvyk7g  

Key:
<module-tag>  <aL>=auto-loaded  
/central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF
Wed Apr 16 00:04:01 PDT 2025
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
hpc-91-13.cm.cluster
--------------------------------------------------------------------------
WARNING: There was an error initializing an OpenFabrics device.

  Local host:   hpc-91-13
  Local device: mlx5_0
--------------------------------------------------------------------------
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:04:05 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     #INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     #INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     '''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     [CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              [INPUT] num. electrons = 193
[INPUT] charge = -5
      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
               [INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     [INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************
     else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0



Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              [INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0


[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
N_elec (98, 95), N_ao 264
number of NR pGTOs = 525
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
ecp = {}
CPU time:         0.96
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
N_elec (98, 95), N_ao 264
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

N_elec (98, 95), N_ao 264
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.96
N_elec (98, 95), N_ao 264
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.96
      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


CPU time:         0.95
N_elec (98, 95), N_ao 264
ecp = {}
CPU time:         0.95
N_elec (98, 95), N_ao 264
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
N_elec (98, 95), N_ao 264
System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
numpy 1.26.0  scipy 1.11.3
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
Date: Wed Apr 16 00:04:05 2025
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-N_elec (98, 95), N_ao 264
CPU time:         0.96
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


N_elec (98, 95), N_ao 264
System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
N_elec (98, 95), N_ao 264
[CONFIG] conf_file None
[INPUT] verbose = 4
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
[INPUT] num. atoms = 17
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] num. electrons = 193
[INPUT] charge = -5
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
number of NR pGTOs = 525
number of NR cGTOs = 264
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
N_elec (98, 95), N_ao 264
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf
number of NR pGTOs = 525
number of NR cGTOs = 264

basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
[CONFIG] conf_file None
[INPUT] verbose = 4
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
N_elec (98, 95), N_ao 264
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-[INPUT] num. atoms = 17
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT] num. atoms = 17
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_37/get_JM.py ****
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


nuclear repulsion = 2660.00686642269
number of shells = 122
System: uname_result(system='Linux', node='hpc-91-13.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.96
Date: Wed Apr 16 00:04:05 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

number of NR pGTOs = 525
number of NR cGTOs = 264
N_elec (98, 95), N_ao 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
N_elec (98, 95), N_ao 264
number of NR cGTOs = 264
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
N_elec (98, 95), N_ao 264
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
N_elec (98, 95), N_ao 264
**** MO energy ****
MO #1   energy= -2122.67965819957  occ= 1
MO #2   energy= -2122.67957966197  occ= 1
MO #3   energy= -361.386594248018  occ= 1
MO #4   energy= -361.385955981482  occ= 1
MO #5   energy= -343.309913004796  occ= 1
MO #6   energy= -343.309880859864  occ= 1
MO #7   energy= -309.24566726811   occ= 1
MO #8   energy= -309.244807835429  occ= 1
MO #9   energy= -309.24171915522   occ= 1
MO #10  energy= -309.24141931108   occ= 1
MO #11  energy= -83.0813829321003  occ= 1
MO #12  energy= -83.0018259568331  occ= 1
MO #13  energy= -75.1980915147609  occ= 1
MO #14  energy= -75.1785444697191  occ= 1
MO #15  energy= -67.8559340711045  occ= 1
MO #16  energy= -67.8141794745759  occ= 1
MO #17  energy= -67.7664232208953  occ= 1
MO #18  energy= -67.7167581180904  occ= 1
MO #19  energy= -54.8566370677759  occ= 1
MO #20  energy= -54.8467457039288  occ= 1
MO #21  energy= -54.834968532555   occ= 1
MO #22  energy= -54.8305602363399  occ= 1
MO #23  energy= -53.0400667359516  occ= 1
MO #24  energy= -53.0195865710137  occ= 1
MO #25  energy= -52.997089019044   occ= 1
MO #26  energy= -52.9581639541064  occ= 1
MO #27  energy= -52.8849769169653  occ= 1
MO #28  energy= -52.8592915540702  occ= 1
MO #29  energy= -20.2086172150747  occ= 1
MO #30  energy= -20.2084812956331  occ= 1
MO #31  energy= -20.2048935115651  occ= 1
MO #32  energy= -20.2048851283158  occ= 1
MO #33  energy= -20.2016123791462  occ= 1
MO #34  energy= -20.2014619562457  occ= 1
MO #35  energy= -20.1970313390226  occ= 1
MO #36  energy= -20.197022516649   occ= 1
MO #37  energy= -20.1952386006617  occ= 1
MO #38  energy= -20.1950895677002  occ= 1
MO #39  energy= -20.1903305559261  occ= 1
MO #40  energy= -20.190147740305   occ= 1
MO #41  energy= -20.1548405188367  occ= 1
MO #42  energy= -20.154644742799   occ= 1
MO #43  energy= -20.1527928466661  occ= 1
MO #44  energy= -20.1525988799011  occ= 1
MO #45  energy= -20.1478947628008  occ= 1
MO #46  energy= -20.1477294658517  occ= 1
MO #47  energy= -20.1449061916252  occ= 1
MO #48  energy= -20.1447146559832  occ= 1
MO #49  energy= -20.1389949085905  occ= 1
MO #50  energy= -20.1389838623747  occ= 1
MO #51  energy= -20.1319795548194  occ= 1
MO #52  energy= -20.1319664083457  occ= 1
MO #53  energy= -17.4001538209577  occ= 1
MO #54  energy= -17.1981126737346  occ= 1
MO #55  energy= -14.1616626147143  occ= 1
MO #56  energy= -14.1007946179101  occ= 1
MO #57  energy= -12.5229777828659  occ= 1
MO #58  energy= -12.440976063214   occ= 1
MO #59  energy= -12.3238724564806  occ= 1
MO #60  energy= -12.1975627320896  occ= 1
MO #61  energy= -11.0734261906122  occ= 1
MO #62  energy= -11.0734092241882  occ= 1
MO #63  energy= -11.0672964749795  occ= 1
MO #64  energy= -11.0672725599255  occ= 1
MO #65  energy= -11.0159048910809  occ= 1
MO #66  energy= -11.015882742952   occ= 1
MO #67  energy= -11.0117083867518  occ= 1
MO #68  energy= -11.0116834144795  occ= 1
MO #69  energy= -7.2858699816767   occ= 1
MO #70  energy= -7.23649810990781  occ= 1
MO #71  energy= -7.22309128209051  occ= 1
MO #72  energy= -7.20201653440104  occ= 1
MO #73  energy= -6.94604863112444  occ= 1
MO #74  energy= -6.89974622156806  occ= 1
MO #75  energy= -6.83911976138827  occ= 1
MO #76  energy= -6.70660027845167  occ= 1
MO #77  energy= -6.47010448583526  occ= 1
MO #78  energy= -6.40451035014878  occ= 1
MO #79  energy= -2.10108939486594  occ= 1
MO #80  energy= -2.02998937992114  occ= 1
MO #81  energy= -1.13354077810889  occ= 1
MO #82  energy= -1.12391664299088  occ= 1
MO #83  energy= -1.11147999728191  occ= 1
MO #84  energy= -1.11074026927584  occ= 1
MO #85  energy= -1.09118180697317  occ= 1
MO #86  energy= -1.08378129503277  occ= 1
MO #87  energy= -1.0567920526354   occ= 1
MO #88  energy= -1.05576164157626  occ= 1
MO #89  energy= -1.04362111003517  occ= 1
MO #90  energy= -1.04037496778069  occ= 1
MO #91  energy= -0.971554135248486 occ= 1
MO #92  energy= -0.969020061036669 occ= 1
MO #93  energy= -0.963736355256123 occ= 1
MO #94  energy= -0.961905289430013 occ= 1
MO #95  energy= -0.949090126408498 occ= 1
MO #96  energy= -0.947534469840101 occ= 1
MO #97  energy= -0.944468120565776 occ= 1
MO #98  energy= -0.944298168315408 occ= 1
MO #99  energy= -0.916651342596311 occ= 1
MO #100 energy= -0.912311427996508 occ= 1
MO #101 energy= -0.908860595134315 occ= 1
MO #102 energy= -0.905087992206463 occ= 1
MO #103 energy= -0.896472023268958 occ= 1
MO #104 energy= -0.895632201257916 occ= 1
MO #105 energy= -0.891731098283483 occ= 1
MO #106 energy= -0.891284204108206 occ= 1
MO #107 energy= -0.852710423711663 occ= 1
MO #108 energy= -0.831853136805567 occ= 1
MO #109 energy= -0.808943854033692 occ= 1
MO #110 energy= -0.796232653800942 occ= 1
MO #111 energy= -0.465089008542337 occ= 1
MO #112 energy= -0.440467002278993 occ= 1
MO #113 energy= -0.417250381194733 occ= 1
MO #114 energy= -0.414581658969476 occ= 1
MO #115 energy= -0.405341800083504 occ= 1
MO #116 energy= -0.404579222677995 occ= 1
MO #117 energy= -0.393123857979891 occ= 1
MO #118 energy= -0.390691624377504 occ= 1
MO #119 energy= -0.388016061096676 occ= 1
MO #120 energy= -0.382615276583112 occ= 1
MO #121 energy= -0.379962703550895 occ= 1
MO #122 energy= -0.3684877214235   occ= 1
MO #123 energy= -0.339064964049523 occ= 1
MO #124 energy= -0.332728381092264 occ= 1
MO #125 energy= -0.332678103851006 occ= 1
MO #126 energy= -0.327819008470204 occ= 1
MO #127 energy= -0.326939154979457 occ= 1
MO #128 energy= -0.308376024271694 occ= 1
MO #129 energy= -0.307637761039347 occ= 1
MO #130 energy= -0.305940723161991 occ= 1
MO #131 energy= -0.305574403635845 occ= 1
MO #132 energy= -0.303993862881759 occ= 1
MO #133 energy= -0.302619043368648 occ= 1
MO #134 energy= -0.3001349501089   occ= 1
MO #135 energy= -0.299170159435102 occ= 1
MO #136 energy= -0.287959765781867 occ= 1
MO #137 energy= -0.287925269706533 occ= 1
MO #138 energy= -0.279089734618136 occ= 1
MO #139 energy= -0.279041171044969 occ= 1
MO #140 energy= -0.261919305418571 occ= 1
MO #141 energy= -0.254573356655877 occ= 1
MO #142 energy= -0.251485737899279 occ= 1
MO #143 energy= -0.250576239832494 occ= 1
MO #144 energy= -0.247640000277225 occ= 1
MO #145 energy= -0.245264429928199 occ= 1
MO #146 energy= -0.242883415948154 occ= 1
MO #147 energy= -0.240716090047654 occ= 1
MO #148 energy= -0.239506039637764 occ= 1
MO #149 energy= -0.238231527224092 occ= 1
MO #150 energy= -0.228489945391387 occ= 1
MO #151 energy= -0.228368009258375 occ= 1
MO #152 energy= -0.220774027390159 occ= 1
MO #153 energy= -0.220728715699022 occ= 1
MO #154 energy= -0.149079017643601 occ= 1
MO #155 energy= -0.148491897664853 occ= 1
MO #156 energy= -0.134097268998413 occ= 1
MO #157 energy= -0.133492668716519 occ= 1
MO #158 energy= -0.119031140128763 occ= 1
MO #159 energy= -0.118854830029192 occ= 1
MO #160 energy= -0.112920925258297 occ= 1
MO #161 energy= -0.112745383671178 occ= 1
MO #162 energy= -0.101214507576363 occ= 1
MO #163 energy= -0.101133780226682 occ= 1
MO #164 energy= -0.0971183839697555 occ= 1
MO #165 energy= -0.0970320198828046 occ= 1
MO #166 energy= -0.0896916403192098 occ= 1
MO #167 energy= -0.0893830728012348 occ= 1
MO #168 energy= -0.0840895107795558 occ= 1
MO #169 energy= -0.0839555532370697 occ= 1
MO #170 energy= -0.0832034456117982 occ= 1
MO #171 energy= -0.0830218421891893 occ= 1
MO #172 energy= -0.0791768666919563 occ= 1
MO #173 energy= -0.0788180437755183 occ= 1
MO #174 energy= -0.0743161479080966 occ= 1
MO #175 energy= -0.0737656945931749 occ= 1
MO #176 energy= -0.0722340877175216 occ= 1
MO #177 energy= -0.0719852516884495 occ= 1
MO #178 energy= -0.0585065548524029 occ= 1
MO #179 energy= -0.0581560808393007 occ= 1
MO #180 energy= -0.0542839711569168 occ= 1
MO #181 energy= -0.0541501974877428 occ= 1
MO #182 energy= -0.0438208368929207 occ= 1
MO #183 energy= -0.0434108046763078 occ= 1
MO #184 energy= -0.0420109158572791 occ= 1
MO #185 energy= -0.0415990318073363 occ= 1
MO #186 energy= -0.0298612509529756 occ= 1
MO #187 energy= -0.0297705635545768 occ= 1
MO #188 energy= -0.0215117382221976 occ= 1
MO #189 energy= -0.0213803165187865 occ= 1
MO #190 energy= -0.0185874988925176 occ= 1
MO #191 energy= -0.0181548921304563 occ= 1
MO #192 energy= -0.0146695921235096 occ= 1
MO #193 energy= -0.0142792710616986 occ= 1
MO #194 energy= 0.259550340314891  occ= 0
MO #195 energy= 0.259552660780444  occ= 0
MO #196 energy= 0.272773779793841  occ= 0
MO #197 energy= 0.272774943276955  occ= 0
MO #198 energy= 0.290405604655073  occ= 0
MO #199 energy= 0.290414160541776  occ= 0
MO #200 energy= 0.294507394088241  occ= 0
MO #201 energy= 0.294509478508658  occ= 0
MO #202 energy= 0.306658743017902  occ= 0
MO #203 energy= 0.306667622913555  occ= 0
MO #204 energy= 0.309722023976729  occ= 0
MO #205 energy= 0.309727744377004  occ= 0
MO #206 energy= 0.32937802580569   occ= 0
MO #207 energy= 0.329382586937682  occ= 0
MO #208 energy= 0.371795457308167  occ= 0
MO #209 energy= 0.3718035341899    occ= 0
MO #210 energy= 0.381506759161547  occ= 0
MO #211 energy= 0.381519960444639  occ= 0
MO #212 energy= 0.552607974151771  occ= 0
MO #213 energy= 0.553015217930824  occ= 0
MO #214 energy= 0.556890126921746  occ= 0
MO #215 energy= 0.557040721305614  occ= 0
MO #216 energy= 0.574532376646013  occ= 0
MO #217 energy= 0.574683501698706  occ= 0
MO #218 energy= 0.581397372119431  occ= 0
MO #219 energy= 0.582162829381967  occ= 0
MO #220 energy= 0.585543955722175  occ= 0
MO #221 energy= 0.586109927826516  occ= 0
MO #222 energy= 0.591803167133871  occ= 0
MO #223 energy= 0.592306624272808  occ= 0
MO #224 energy= 0.606636819494577  occ= 0
MO #225 energy= 0.606726977007395  occ= 0
MO #226 energy= 0.616348661707582  occ= 0
MO #227 energy= 0.621250745417216  occ= 0
MO #228 energy= 0.634803688356959  occ= 0
MO #229 energy= 0.635884303034019  occ= 0
MO #230 energy= 0.640907065194234  occ= 0
MO #231 energy= 0.642097542026214  occ= 0
MO #232 energy= 0.651581655437062  occ= 0
MO #233 energy= 0.65180205844198   occ= 0
MO #234 energy= 0.655709587807183  occ= 0
MO #235 energy= 0.656172249391843  occ= 0
MO #236 energy= 0.659807813739479  occ= 0
MO #237 energy= 0.663511479225666  occ= 0
MO #238 energy= 0.665277301657815  occ= 0
MO #239 energy= 0.667527062583282  occ= 0
MO #240 energy= 0.692519800633157  occ= 0
MO #241 energy= 0.698581999715652  occ= 0
MO #242 energy= 0.703098464864497  occ= 0
MO #243 energy= 0.716495103761077  occ= 0
MO #244 energy= 0.720752872638985  occ= 0
MO #245 energy= 0.72965046866483   occ= 0
MO #246 energy= 0.75663144401696   occ= 0
MO #247 energy= 0.777601042430864  occ= 0
MO #248 energy= 0.860391514513453  occ= 0
MO #249 energy= 0.860920609200494  occ= 0
MO #250 energy= 0.865748367720947  occ= 0
MO #251 energy= 0.867022119040367  occ= 0
MO #252 energy= 0.876121832191728  occ= 0
MO #253 energy= 0.876613211365884  occ= 0
MO #254 energy= 0.897037421231401  occ= 0
MO #255 energy= 0.908775163795724  occ= 0
MO #256 energy= 0.911840647981195  occ= 0
MO #257 energy= 0.915614341452731  occ= 0
MO #258 energy= 0.92234895521151   occ= 0
MO #259 energy= 0.926884669048442  occ= 0
MO #260 energy= 0.929488920395073  occ= 0
MO #261 energy= 0.937376363042826  occ= 0
MO #262 energy= 0.944172731952331  occ= 0
MO #263 energy= 0.949364628965115  occ= 0
MO #264 energy= 0.953036622926177  occ= 0
MO #265 energy= 0.954345046463277  occ= 0
MO #266 energy= 0.970310443428462  occ= 0
MO #267 energy= 0.972737487438109  occ= 0
MO #268 energy= 0.983024056607115  occ= 0
MO #269 energy= 0.987478396172641  occ= 0
MO #270 energy= 0.993066234060422  occ= 0
MO #271 energy= 0.994015755993018  occ= 0
MO #272 energy= 0.998514330427946  occ= 0
MO #273 energy= 1.00433002002746   occ= 0
MO #274 energy= 1.00885340929831   occ= 0
MO #275 energy= 1.0315960864378    occ= 0
MO #276 energy= 1.03438386046621   occ= 0
MO #277 energy= 1.04283544898774   occ= 0
MO #278 energy= 1.0452007666757    occ= 0
MO #279 energy= 1.04789487374291   occ= 0
MO #280 energy= 1.04884191501423   occ= 0
MO #281 energy= 1.07939028006557   occ= 0
MO #282 energy= 1.0813605320781    occ= 0
MO #283 energy= 1.08540004040455   occ= 0
MO #284 energy= 1.09057472975352   occ= 0
MO #285 energy= 1.09088288734934   occ= 0
MO #286 energy= 1.09437949339512   occ= 0
MO #287 energy= 1.09930595585349   occ= 0
MO #288 energy= 1.10624197082033   occ= 0
MO #289 energy= 1.11585701516111   occ= 0
MO #290 energy= 1.12651287076547   occ= 0
MO #291 energy= 1.15801067813373   occ= 0
MO #292 energy= 1.16400516544819   occ= 0
MO #293 energy= 1.17162487391788   occ= 0
MO #294 energy= 1.17585209492505   occ= 0
MO #295 energy= 1.19588285521801   occ= 0
MO #296 energy= 1.19820080922435   occ= 0
MO #297 energy= 1.2105545675351    occ= 0
MO #298 energy= 1.21308634412195   occ= 0
MO #299 energy= 1.22001326600989   occ= 0
MO #300 energy= 1.22282559369137   occ= 0
MO #301 energy= 1.23004902983778   occ= 0
MO #302 energy= 1.23557131656844   occ= 0
MO #303 energy= 1.24912999828218   occ= 0
MO #304 energy= 1.25972020576842   occ= 0
MO #305 energy= 1.26383241266283   occ= 0
MO #306 energy= 1.26574676003082   occ= 0
MO #307 energy= 1.27532881085959   occ= 0
MO #308 energy= 1.27679227554007   occ= 0
MO #309 energy= 1.28814322466431   occ= 0
MO #310 energy= 1.29350025737968   occ= 0
MO #311 energy= 1.297648990877     occ= 0
MO #312 energy= 1.30040422617293   occ= 0
MO #313 energy= 1.30810802124274   occ= 0
MO #314 energy= 1.31136135855678   occ= 0
MO #315 energy= 1.32971080342304   occ= 0
MO #316 energy= 1.33196914236255   occ= 0
MO #317 energy= 1.34577494591009   occ= 0
MO #318 energy= 1.34615457868164   occ= 0
MO #319 energy= 1.37511436931195   occ= 0
MO #320 energy= 1.38583151049471   occ= 0
MO #321 energy= 1.39631359048298   occ= 0
MO #322 energy= 1.40695168988016   occ= 0
MO #323 energy= 1.45474990525867   occ= 0
MO #324 energy= 1.46216355837242   occ= 0
MO #325 energy= 1.47428043205888   occ= 0
MO #326 energy= 1.48222074528233   occ= 0
MO #327 energy= 1.49275573842323   occ= 0
MO #328 energy= 1.50069282374493   occ= 0
MO #329 energy= 1.52462418412064   occ= 0
MO #330 energy= 1.52641627747174   occ= 0
MO #331 energy= 1.56080337054625   occ= 0
MO #332 energy= 1.5617605349076    occ= 0
MO #333 energy= 1.57781412429243   occ= 0
MO #334 energy= 1.57893450417882   occ= 0
MO #335 energy= 1.58220707968407   occ= 0
MO #336 energy= 1.58385018778145   occ= 0
MO #337 energy= 1.59883043213347   occ= 0
MO #338 energy= 1.60000937495313   occ= 0
MO #339 energy= 1.62451109431298   occ= 0
MO #340 energy= 1.62549388381233   occ= 0
MO #341 energy= 1.62797011318818   occ= 0
MO #342 energy= 1.63498487283297   occ= 0
MO #343 energy= 1.64510826625003   occ= 0
MO #344 energy= 1.64707318659292   occ= 0
MO #345 energy= 1.66274151066716   occ= 0
MO #346 energy= 1.66514413539231   occ= 0
MO #347 energy= 1.66902864012843   occ= 0
MO #348 energy= 1.66958958687857   occ= 0
MO #349 energy= 1.67484094637125   occ= 0
MO #350 energy= 1.67582477056436   occ= 0
MO #351 energy= 1.68222048062058   occ= 0
MO #352 energy= 1.68286415086797   occ= 0
MO #353 energy= 1.6919396584735    occ= 0
MO #354 energy= 1.692545094581     occ= 0
MO #355 energy= 1.69483142161387   occ= 0
MO #356 energy= 1.69750152318873   occ= 0
MO #357 energy= 1.70098396140398   occ= 0
MO #358 energy= 1.7027121030406    occ= 0
MO #359 energy= 1.7071229919446    occ= 0
MO #360 energy= 1.70919554105946   occ= 0
MO #361 energy= 1.71132474878494   occ= 0
MO #362 energy= 1.71350825162986   occ= 0
MO #363 energy= 1.72551058102746   occ= 0
MO #364 energy= 1.72674149547538   occ= 0
MO #365 energy= 1.73932366895303   occ= 0
MO #366 energy= 1.74131858761601   occ= 0
MO #367 energy= 1.75760263271227   occ= 0
MO #368 energy= 1.75991055575357   occ= 0
MO #369 energy= 1.76474939708192   occ= 0
MO #370 energy= 1.76662433605881   occ= 0
MO #371 energy= 1.77456171167887   occ= 0
MO #372 energy= 1.77641228609961   occ= 0
MO #373 energy= 1.78129413022111   occ= 0
MO #374 energy= 1.781554592043     occ= 0
MO #375 energy= 1.79073579178928   occ= 0
MO #376 energy= 1.79088235730316   occ= 0
MO #377 energy= 1.8047966646914    occ= 0
MO #378 energy= 1.80491180838239   occ= 0
MO #379 energy= 1.83182367722553   occ= 0
MO #380 energy= 1.83467768029265   occ= 0
MO #381 energy= 1.84857680581268   occ= 0
MO #382 energy= 1.85239711518232   occ= 0
MO #383 energy= 1.85743920030828   occ= 0
MO #384 energy= 1.86412667473298   occ= 0
MO #385 energy= 1.86900518373419   occ= 0
MO #386 energy= 1.87079500639693   occ= 0
MO #387 energy= 1.87623470035943   occ= 0
MO #388 energy= 1.87706635351482   occ= 0
MO #389 energy= 1.8866097930561    occ= 0
MO #390 energy= 1.88989454336556   occ= 0
MO #391 energy= 1.92978834970766   occ= 0
MO #392 energy= 1.93049676168268   occ= 0
MO #393 energy= 1.9328218675296    occ= 0
MO #394 energy= 1.94068188252621   occ= 0
MO #395 energy= 1.98834872143721   occ= 0
MO #396 energy= 1.98988650205779   occ= 0
MO #397 energy= 2.01458493282747   occ= 0
MO #398 energy= 2.01640938834164   occ= 0
MO #399 energy= 2.03934982502533   occ= 0
MO #400 energy= 2.04519437577871   occ= 0
MO #401 energy= 2.06032052067948   occ= 0
MO #402 energy= 2.06813109400405   occ= 0
MO #403 energy= 2.08701385486143   occ= 0
MO #404 energy= 2.09339529577471   occ= 0
MO #405 energy= 2.09916176977225   occ= 0
MO #406 energy= 2.11773007329963   occ= 0
MO #407 energy= 2.13168868903172   occ= 0
MO #408 energy= 2.13563795180698   occ= 0
MO #409 energy= 2.14013599849208   occ= 0
MO #410 energy= 2.14391865524814   occ= 0
MO #411 energy= 2.1551121925474    occ= 0
MO #412 energy= 2.16565593696277   occ= 0
MO #413 energy= 2.18510172991371   occ= 0
MO #414 energy= 2.20950220754565   occ= 0
MO #415 energy= 2.2182922464187    occ= 0
MO #416 energy= 2.21903559246893   occ= 0
MO #417 energy= 2.2223509477415    occ= 0
MO #418 energy= 2.26440770296456   occ= 0
MO #419 energy= 2.29749465667433   occ= 0
MO #420 energy= 2.30247623748802   occ= 0
MO #421 energy= 2.31197135620629   occ= 0
MO #422 energy= 2.32338851899926   occ= 0
MO #423 energy= 2.33396719362192   occ= 0
MO #424 energy= 2.35768244568338   occ= 0
MO #425 energy= 2.36242472133569   occ= 0
MO #426 energy= 2.37983611273461   occ= 0
MO #427 energy= 2.43215877392452   occ= 0
MO #428 energy= 2.43482865183686   occ= 0
MO #429 energy= 2.45893195770646   occ= 0
MO #430 energy= 2.46548742437294   occ= 0
MO #431 energy= 2.52855556018377   occ= 0
MO #432 energy= 2.55358537900767   occ= 0
MO #433 energy= 2.62833476511925   occ= 0
MO #434 energy= 2.63663808930925   occ= 0
MO #435 energy= 2.66417380419363   occ= 0
MO #436 energy= 2.66799175687218   occ= 0
MO #437 energy= 2.69304846470336   occ= 0
MO #438 energy= 2.69811261163363   occ= 0
MO #439 energy= 2.70607673132344   occ= 0
MO #440 energy= 2.71253499667035   occ= 0
MO #441 energy= 2.729135208836     occ= 0
MO #442 energy= 2.73161021423509   occ= 0
MO #443 energy= 2.75331028778974   occ= 0
MO #444 energy= 2.75693973964373   occ= 0
MO #445 energy= 2.773898406414     occ= 0
MO #446 energy= 2.77671298279372   occ= 0
MO #447 energy= 2.81835876512767   occ= 0
MO #448 energy= 2.81999828626175   occ= 0
MO #449 energy= 2.87238993299002   occ= 0
MO #450 energy= 2.87332594196375   occ= 0
MO #451 energy= 2.94119565925615   occ= 0
MO #452 energy= 2.94648295694655   occ= 0
MO #453 energy= 2.97300486501904   occ= 0
MO #454 energy= 2.97349481555474   occ= 0
MO #455 energy= 3.0194369837466    occ= 0
MO #456 energy= 3.01989050243488   occ= 0
MO #457 energy= 3.32048464692059   occ= 0
MO #458 energy= 3.35898080345107   occ= 0
MO #459 energy= 3.40154126049553   occ= 0
MO #460 energy= 3.41179445511587   occ= 0
MO #461 energy= 3.457147809027     occ= 0
MO #462 energy= 3.48305782987308   occ= 0
MO #463 energy= 3.49539339398968   occ= 0
MO #464 energy= 3.51718495593566   occ= 0
MO #465 energy= 3.79895466927943   occ= 0
MO #466 energy= 3.8397504351034    occ= 0
MO #467 energy= 5.17876886418906   occ= 0
MO #468 energy= 5.21259863042617   occ= 0
MO #469 energy= 6.49672467075387   occ= 0
MO #470 energy= 6.50798541679023   occ= 0
MO #471 energy= 7.06349306587518   occ= 0
MO #472 energy= 7.08250035781199   occ= 0
MO #473 energy= 7.11993481361544   occ= 0
MO #474 energy= 7.18346578680336   occ= 0
MO #475 energy= 12.750140000428    occ= 0
MO #476 energy= 12.7595240718768   occ= 0
MO #477 energy= 12.7742518215036   occ= 0
MO #478 energy= 12.7965433690392   occ= 0
MO #479 energy= 13.101131314204    occ= 0
MO #480 energy= 13.1312723539797   occ= 0
MO #481 energy= 13.1458577625118   occ= 0
MO #482 energy= 13.1662034010896   occ= 0
MO #483 energy= 13.2700930516695   occ= 0
MO #484 energy= 13.3459321231666   occ= 0
MO #485 energy= 18.0960922172824   occ= 0
MO #486 energy= 18.1550298985157   occ= 0
MO #487 energy= 29.6683137607698   occ= 0
MO #488 energy= 29.6920452687031   occ= 0
MO #489 energy= 33.2236037616291   occ= 0
MO #490 energy= 33.2539466619103   occ= 0
MO #491 energy= 33.2605382921056   occ= 0
MO #492 energy= 33.3342287030341   occ= 0
MO #493 energy= 65.3062649807027   occ= 0
MO #494 energy= 65.3166435516763   occ= 0
MO #495 energy= 65.325398884816    occ= 0
MO #496 energy= 65.3417467447726   occ= 0
MO #497 energy= 67.8082450196304   occ= 0
MO #498 energy= 67.818635339483    occ= 0
MO #499 energy= 67.8339287642442   occ= 0
MO #500 energy= 67.8485198013961   occ= 0
MO #501 energy= 67.8934649308397   occ= 0
MO #502 energy= 67.922117634514    occ= 0
MO #503 energy= 75.5546649396277   occ= 0
MO #504 energy= 75.6001009855429   occ= 0
MO #505 energy= 158.596197719345   occ= 0
MO #506 energy= 158.606134531877   occ= 0
MO #507 energy= 174.905704677868   occ= 0
MO #508 energy= 174.916589260134   occ= 0
MO #509 energy= 174.937106942981   occ= 0
MO #510 energy= 174.963330370413   occ= 0
MO #511 energy= 308.448795272141   occ= 0
MO #512 energy= 308.462831827027   occ= 0
MO #513 energy= 725.229789645135   occ= 0
MO #514 energy= 725.231438986826   occ= 0
MO #515 energy= 846.748870911267   occ= 0
MO #516 energy= 846.750292701011   occ= 0
MO #517 energy= 846.779408620169   occ= 0
MO #518 energy= 846.783029889871   occ= 0
MO #519 energy= 1057.13926532634   occ= 0
MO #520 energy= 1057.14208742419   occ= 0
MO #521 energy= 2996.82693332949   occ= 0
MO #522 energy= 2996.82756126625   occ= 0
MO #523 energy= 7255.33917830626   occ= 0
MO #524 energy= 7255.33936197933   occ= 0
MO #525 energy= 15388.0041843873   occ= 0
MO #526 energy= 15388.0042470937   occ= 0
MO #527 energy= 35974.1098394853   occ= 0
MO #528 energy= 35974.1098582804   occ= 0
 ** Mulliken pop alpha/beta on meta-lowdin orthogonal AOs **
 ** Mulliken pop       alpha | beta **
pop of  0 Er 1s        0.99999 | 0.99999   
pop of  0 Er 2s        1.00000 | 1.00000   
pop of  0 Er 3s        1.00000 | 1.00000   
pop of  0 Er 4s        0.99999 | 0.99999   
pop of  0 Er 5s        0.99882 | 0.99853   
pop of  0 Er 6s        0.16376 | 0.16467   
pop of  0 Er 7s        0.00872 | 0.00902   
pop of  0 Er 8s        0.00151 | 0.00156   
pop of  0 Er 9s        0.00066 | 0.00066   
pop of  0 Er 10s        0.00018 | 0.00019   
pop of  0 Er 11s        0.00037 | 0.00037   
pop of  0 Er 12s        0.00009 | 0.00009   
pop of  0 Er 13s        0.00001 | 0.00001   
pop of  0 Er 14s        0.00000 | 0.00000   
pop of  0 Er 15s        0.00000 | 0.00000   
pop of  0 Er 16s        0.00000 | 0.00000   
pop of  0 Er 17s        0.00000 | 0.00000   
pop of  0 Er 18s        0.00000 | 0.00000   
pop of  0 Er 2px       0.99884 | 0.99884   
pop of  0 Er 2py       0.99884 | 0.99884   
pop of  0 Er 2pz       0.99884 | 0.99884   
pop of  0 Er 3px       0.99858 | 0.99858   
pop of  0 Er 3py       0.99858 | 0.99858   
pop of  0 Er 3pz       0.99858 | 0.99858   
pop of  0 Er 4px       0.99814 | 0.99814   
pop of  0 Er 4py       0.99815 | 0.99815   
pop of  0 Er 4pz       0.99815 | 0.99815   
pop of  0 Er 5px       0.99587 | 0.99549   
pop of  0 Er 5py       0.99574 | 0.99536   
pop of  0 Er 5pz       0.99578 | 0.99547   
pop of  0 Er 6px       0.00893 | 0.00916   
pop of  0 Er 6py       0.00782 | 0.00807   
pop of  0 Er 6pz       0.00796 | 0.00814   
pop of  0 Er 7px       0.00728 | 0.00753   
pop of  0 Er 7py       0.00469 | 0.00493   
pop of  0 Er 7pz       0.00676 | 0.00699   
pop of  0 Er 8px       0.00558 | 0.00558   
pop of  0 Er 8py       0.00406 | 0.00406   
pop of  0 Er 8pz       0.00682 | 0.00681   
pop of  0 Er 9px       0.00128 | 0.00129   
pop of  0 Er 9py       0.00143 | 0.00144   
pop of  0 Er 9pz       0.00176 | 0.00176   
pop of  0 Er 10px       0.00051 | 0.00052   
pop of  0 Er 10py       0.00059 | 0.00059   
pop of  0 Er 10pz       0.00068 | 0.00069   
pop of  0 Er 11px       0.00085 | 0.00086   
pop of  0 Er 11py       0.00082 | 0.00082   
pop of  0 Er 11pz       0.00088 | 0.00089   
pop of  0 Er 12px       0.00073 | 0.00073   
pop of  0 Er 12py       0.00067 | 0.00067   
pop of  0 Er 12pz       0.00071 | 0.00071   
pop of  0 Er 13px       0.00171 | 0.00171   
pop of  0 Er 13py       0.00171 | 0.00171   
pop of  0 Er 13pz       0.00171 | 0.00171   
pop of  0 Er 3dxy      0.99990 | 0.99990   
pop of  0 Er 3dyz      0.99990 | 0.99990   
pop of  0 Er 3dz^2     0.99990 | 0.99990   
pop of  0 Er 3dxz      0.99990 | 0.99990   
pop of  0 Er 3dx2-y2    0.99990 | 0.99990   
pop of  0 Er 4dxy      0.99971 | 0.99970   
pop of  0 Er 4dyz      0.99970 | 0.99971   
pop of  0 Er 4dz^2     0.99971 | 0.99971   
pop of  0 Er 4dxz      0.99971 | 0.99971   
pop of  0 Er 4dx2-y2    0.99971 | 0.99970   
pop of  0 Er 5dxy      0.01630 | 0.01687   
pop of  0 Er 5dyz      0.01816 | 0.01872   
pop of  0 Er 5dz^2     0.01472 | 0.01505   
pop of  0 Er 5dxz      0.01331 | 0.01364   
pop of  0 Er 5dx2-y2    0.01390 | 0.01438   
pop of  0 Er 6dxy      0.00304 | 0.00310   
pop of  0 Er 6dyz      0.00321 | 0.00331   
pop of  0 Er 6dz^2     0.00250 | 0.00251   
pop of  0 Er 6dxz      0.00256 | 0.00260   
pop of  0 Er 6dx2-y2    0.00225 | 0.00228   
pop of  0 Er 7dxy      0.00247 | 0.00248   
pop of  0 Er 7dyz      0.00268 | 0.00269   
pop of  0 Er 7dz^2     0.00173 | 0.00174   
pop of  0 Er 7dxz      0.00190 | 0.00191   
pop of  0 Er 7dx2-y2    0.00162 | 0.00163   
pop of  0 Er 8dxy      0.00304 | 0.00305   
pop of  0 Er 8dyz      0.00290 | 0.00290   
pop of  0 Er 8dz^2     0.00280 | 0.00281   
pop of  0 Er 8dxz      0.00275 | 0.00275   
pop of  0 Er 8dx2-y2    0.00194 | 0.00195   
pop of  0 Er 9dxy      0.00302 | 0.00302   
pop of  0 Er 9dyz      0.00364 | 0.00363   
pop of  0 Er 9dz^2     0.00353 | 0.00353   
pop of  0 Er 9dxz      0.00369 | 0.00369   
pop of  0 Er 9dx2-y2    0.00224 | 0.00224   
pop of  0 Er 10dxy      0.00021 | 0.00021   
pop of  0 Er 10dyz      0.00026 | 0.00027   
pop of  0 Er 10dz^2     0.00024 | 0.00024   
pop of  0 Er 10dxz      0.00024 | 0.00024   
pop of  0 Er 10dx2-y2    0.00020 | 0.00021   
pop of  0 Er 11dxy      0.00112 | 0.00113   
pop of  0 Er 11dyz      0.00189 | 0.00189   
pop of  0 Er 11dz^2     0.00146 | 0.00146   
pop of  0 Er 11dxz      0.00153 | 0.00153   
pop of  0 Er 11dx2-y2    0.00100 | 0.00100   
pop of  0 Er 4f-3      0.71294 | 0.91160   
pop of  0 Er 4f-2      0.69641 | 0.84306   
pop of  0 Er 4f-1      0.68245 | 0.81145   
pop of  0 Er 4f+0      0.73665 | 0.85139   
pop of  0 Er 4f+1      0.69669 | 0.82344   
pop of  0 Er 4f+2      0.75514 | 0.88634   
pop of  0 Er 4f+3      0.68661 | 0.89806   
pop of  0 Er 5f-3      0.00091 | 0.00121   
pop of  0 Er 5f-2      0.00117 | 0.00147   
pop of  0 Er 5f-1      0.00107 | 0.00137   
pop of  0 Er 5f+0      0.00084 | 0.00114   
pop of  0 Er 5f+1      0.00096 | 0.00129   
pop of  0 Er 5f+2      0.00089 | 0.00119   
pop of  0 Er 5f+3      0.00082 | 0.00113   
pop of  0 Er 6f-3      0.00137 | 0.00144   
pop of  0 Er 6f-2      0.00156 | 0.00161   
pop of  0 Er 6f-1      0.00186 | 0.00191   
pop of  0 Er 6f+0      0.00192 | 0.00199   
pop of  0 Er 6f+1      0.00158 | 0.00165   
pop of  0 Er 6f+2      0.00165 | 0.00171   
pop of  0 Er 6f+3      0.00165 | 0.00173   
pop of  1 O 1s        0.99999 | 0.99999   
pop of  1 O 2s        0.86238 | 0.86234   
pop of  1 O 3s        0.00507 | 0.00509   
pop of  1 O 2px       0.78717 | 0.78715   
pop of  1 O 2py       0.89073 | 0.89065   
pop of  1 O 2pz       0.86877 | 0.86864   
pop of  1 O 3px       0.00273 | 0.00275   
pop of  1 O 3py       0.00419 | 0.00423   
pop of  1 O 3pz       0.00428 | 0.00432   
pop of  2 O 1s        0.99999 | 0.99999   
pop of  2 O 2s        0.86099 | 0.86099   
pop of  2 O 3s        0.00610 | 0.00610   
pop of  2 O 2px       0.95211 | 0.95209   
pop of  2 O 2py       0.82763 | 0.82763   
pop of  2 O 2pz       0.75527 | 0.75526   
pop of  2 O 3px       0.00541 | 0.00541   
pop of  2 O 3py       0.00310 | 0.00310   
pop of  2 O 3pz       0.00185 | 0.00186   
pop of  3 O 1s        0.99999 | 0.99999   
pop of  3 O 2s        0.86852 | 0.86849   
pop of  3 O 3s        0.00481 | 0.00483   
pop of  3 O 2px       0.78756 | 0.78752   
pop of  3 O 2py       0.85464 | 0.85452   
pop of  3 O 2pz       0.88475 | 0.88457   
pop of  3 O 3px       0.00253 | 0.00254   
pop of  3 O 3py       0.00377 | 0.00380   
pop of  3 O 3pz       0.00402 | 0.00405   
pop of  4 O 1s        0.99999 | 0.99999   
pop of  4 O 2s        0.86524 | 0.86521   
pop of  4 O 3s        0.00502 | 0.00505   
pop of  4 O 2px       0.77937 | 0.77935   
pop of  4 O 2py       0.90958 | 0.90948   
pop of  4 O 2pz       0.86758 | 0.86742   
pop of  4 O 3px       0.00271 | 0.00272   
pop of  4 O 3py       0.00464 | 0.00468   
pop of  4 O 3pz       0.00438 | 0.00442   
pop of  5 O 1s        0.99999 | 0.99999   
pop of  5 O 2s        0.85928 | 0.85927   
pop of  5 O 3s        0.00624 | 0.00624   
pop of  5 O 2px       0.94814 | 0.94811   
pop of  5 O 2py       0.81778 | 0.81777   
pop of  5 O 2pz       0.77325 | 0.77325   
pop of  5 O 3px       0.00534 | 0.00534   
pop of  5 O 3py       0.00278 | 0.00278   
pop of  5 O 3pz       0.00235 | 0.00235   
pop of  6 O 1s        0.99999 | 0.99999   
pop of  6 O 2s        0.85938 | 0.85933   
pop of  6 O 3s        0.00510 | 0.00512   
pop of  6 O 2px       0.80964 | 0.80958   
pop of  6 O 2py       0.82949 | 0.82934   
pop of  6 O 2pz       0.88139 | 0.88116   
pop of  6 O 3px       0.00268 | 0.00270   
pop of  6 O 3py       0.00316 | 0.00318   
pop of  6 O 3pz       0.00400 | 0.00405   
pop of  7 O 1s        0.99999 | 0.99999   
pop of  7 O 2s        0.86125 | 0.86121   
pop of  7 O 3s        0.00519 | 0.00522   
pop of  7 O 2px       0.93758 | 0.93731   
pop of  7 O 2py       0.83278 | 0.83270   
pop of  7 O 2pz       0.77266 | 0.77261   
pop of  7 O 3px       0.00534 | 0.00541   
pop of  7 O 3py       0.00345 | 0.00348   
pop of  7 O 3pz       0.00191 | 0.00192   
pop of  8 O 1s        0.99999 | 0.99999   
pop of  8 O 2s        0.86487 | 0.86482   
pop of  8 O 3s        0.00507 | 0.00510   
pop of  8 O 2px       0.72502 | 0.72490   
pop of  8 O 2py       0.91109 | 0.91093   
pop of  8 O 2pz       0.91796 | 0.91783   
pop of  8 O 3px       0.00126 | 0.00127   
pop of  8 O 3py       0.00489 | 0.00493   
pop of  8 O 3pz       0.00558 | 0.00563   
pop of  9 O 1s        0.99999 | 0.99999   
pop of  9 O 2s        0.86967 | 0.86963   
pop of  9 O 3s        0.00496 | 0.00499   
pop of  9 O 2px       0.71940 | 0.71930   
pop of  9 O 2py       0.91388 | 0.91368   
pop of  9 O 2pz       0.92332 | 0.92319   
pop of  9 O 3px       0.00120 | 0.00121   
pop of  9 O 3py       0.00500 | 0.00506   
pop of  9 O 3pz       0.00591 | 0.00595   
pop of  10 O 1s        0.99999 | 0.99999   
pop of  10 O 2s        0.85878 | 0.85878   
pop of  10 O 3s        0.00605 | 0.00605   
pop of  10 O 2px       0.85077 | 0.85075   
pop of  10 O 2py       0.80742 | 0.80741   
pop of  10 O 2pz       0.84981 | 0.84978   
pop of  10 O 3px       0.00277 | 0.00277   
pop of  10 O 3py       0.00258 | 0.00258   
pop of  10 O 3pz       0.00354 | 0.00354   
pop of  11 O 1s        0.99999 | 0.99999   
pop of  11 O 2s        0.86127 | 0.86122   
pop of  11 O 3s        0.00518 | 0.00521   
pop of  11 O 2px       0.93610 | 0.93589   
pop of  11 O 2py       0.83406 | 0.83397   
pop of  11 O 2pz       0.76525 | 0.76519   
pop of  11 O 3px       0.00511 | 0.00517   
pop of  11 O 3py       0.00343 | 0.00345   
pop of  11 O 3pz       0.00184 | 0.00185   
pop of  12 C 1s        0.99999 | 0.99999   
pop of  12 C 2s        0.41723 | 0.41727   
pop of  12 C 3s        0.00983 | 0.00983   
pop of  12 C 2px       0.41423 | 0.41425   
pop of  12 C 2py       0.37711 | 0.37717   
pop of  12 C 2pz       0.41060 | 0.41066   
pop of  12 C 3px       0.01874 | 0.01875   
pop of  12 C 3py       0.00444 | 0.00445   
pop of  12 C 3pz       0.01307 | 0.01310   
pop of  13 C 1s        0.99999 | 0.99999   
pop of  13 C 2s        0.41300 | 0.41305   
pop of  13 C 3s        0.01007 | 0.01008   
pop of  13 C 2px       0.41177 | 0.41180   
pop of  13 C 2py       0.38616 | 0.38623   
pop of  13 C 2pz       0.40565 | 0.40571   
pop of  13 C 3px       0.01819 | 0.01819   
pop of  13 C 3py       0.00705 | 0.00707   
pop of  13 C 3pz       0.01118 | 0.01121   
pop of  14 C 1s        0.99999 | 0.99999   
pop of  14 C 2s        0.41351 | 0.41356   
pop of  14 C 3s        0.01007 | 0.01008   
pop of  14 C 2px       0.41403 | 0.41408   
pop of  14 C 2py       0.38833 | 0.38840   
pop of  14 C 2pz       0.40150 | 0.40154   
pop of  14 C 3px       0.01701 | 0.01704   
pop of  14 C 3py       0.00663 | 0.00665   
pop of  14 C 3pz       0.01273 | 0.01275   
pop of  15 C 1s        0.99999 | 0.99999   
pop of  15 C 2s        0.41550 | 0.41555   
pop of  15 C 3s        0.01005 | 0.01006   
pop of  15 C 2px       0.41235 | 0.41240   
pop of  15 C 2py       0.38725 | 0.38732   
pop of  15 C 2pz       0.40140 | 0.40145   
pop of  15 C 3px       0.01657 | 0.01659   
pop of  15 C 3py       0.00662 | 0.00664   
pop of  15 C 3pz       0.01277 | 0.01279   
pop of  16 O 1s        0.99999 | 0.99999   
pop of  16 O 2s        0.85985 | 0.85985   
pop of  16 O 3s        0.00602 | 0.00602   
pop of  16 O 2px       0.84264 | 0.84261   
pop of  16 O 2py       0.81140 | 0.81138   
pop of  16 O 2pz       0.84951 | 0.84948   
pop of  16 O 3px       0.00264 | 0.00264   
pop of  16 O 3py       0.00266 | 0.00266   
pop of  16 O 3pz       0.00353 | 0.00353   
In total            95.96825 | 97.03175  
 ** Mulliken atomic charges   ( Nelec_alpha | Nelec_beta ) **
charge of  0Er =      2.24434  (    32.34538     33.41028 )
charge of  1O =     -0.85048  (     4.42531      4.42517 )
charge of  2O =     -0.82491  (     4.41247      4.41244 )
charge of  3O =     -0.82089  (     4.41059      4.41030 )
charge of  4O =     -0.87683  (     4.43851      4.43832 )
charge of  5O =     -0.83026  (     4.41514      4.41511 )
charge of  6O =     -0.78931  (     4.39485      4.39446 )
charge of  7O =     -0.84001  (     4.42015      4.41986 )
charge of  8O =     -0.87113  (     4.43573      4.43540 )
charge of  9O =     -0.88633  (     4.44333      4.44299 )
charge of  10O =     -0.76335  (     4.38170      4.38165 )
charge of  11O =     -0.82417  (     4.41223      4.41195 )
charge of  12C =      0.66928  (     2.66525      2.66546 )
charge of  13C =      0.67363  (     2.66305      2.66332 )
charge of  14C =      0.67212  (     2.66380      2.66408 )
charge of  15C =      0.67470  (     2.66251      2.66279 )
charge of  16O =     -0.75641  (     4.37824      4.37817 )
(3, 264, 264) 264
S vector [ 1.2966-0.j  0.3737-0.j -0.5318-0.j]
(3, 264, 264) 264
L vector [ 5.3939-0.j  1.533 -0.j -2.2221-0.j]
(3, 264, 264) 264
J vector [ 6.6905-0.j  1.9067+0.j -2.7538+0.j]
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
ao_index [ 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383]
ao_labels ['0 Er 4f-3  ' '0 Er 4f-2  ' '0 Er 4f-1  ' '0 Er 4f+0  ' '0 Er 4f+1  ' '0 Er 4f+2  ' '0 Er 4f+3  ' '0 Er 5f-3  ' '0 Er 5f-2  ' '0 Er 5f-1  ' '0 Er 5f+0  ' '0 Er 5f+1  ' '0 Er 5f+2  ' '0 Er 5f+3  ' '0 Er 6f-3  ' '0 Er 6f-2  ' '0 Er 6f-1  ' '0 Er 6f+0  ' '0 Er 6f+1  ' '0 Er 6f+2  ' '0 Er 6f+3  ']
  J     M     c^2  
rank = 0, idx_lst = [ 0 16]
rank = 8, idx_lst = [ 8 24]
rank = 6, idx_lst = [ 6 22]
rank = 15, idx_lst = [15]
rank = 14, idx_lst = [14]
rank = 12, idx_lst = [12 28]
rank = 10, idx_lst = [10 26]
rank = 1, idx_lst = [ 1 17]
rank = 3, idx_lst = [ 3 19]
rank = 9, idx_lst = [ 9 25]
rank = 11, idx_lst = [11 27]
rank = 4, idx_lst = [ 4 20]
rank = 5, idx_lst = [ 5 21]
rank = 2, idx_lst = [ 2 18]
rank = 13, idx_lst = [13]
rank = 7, idx_lst = [ 7 23]
[hpc-91-13.cm.cluster:3306478] 15 more processes have sent help message help-mpi-btl-openib.txt / error in device init
[hpc-91-13.cm.cluster:3306478] Set MCA parameter "orte_base_help_aggregate" to 0 to see all help / error messages
 7.5    7.5    2.5   -0.00001    0.00001
 7.5    7.5    1.5   -0.00003    0.00001
 7.5    7.5    0.5   -0.00005   -0.00000
 7.5    7.5   -0.5   -0.00007   -0.00002
 7.5    7.5   -1.5   -0.00009   -0.00005
 7.5    7.5   -2.5   -0.00007   -0.00009
 7.5    7.5   -3.5   -0.00005   -0.00010
 7.5    7.5   -4.5   -0.00002   -0.00009
 7.5    7.5   -5.5    0.00000   -0.00007
 7.5    7.5   -6.5    0.00001   -0.00003
 7.5    7.5   -7.5    0.00001   -0.00001
 7.5    6.5    3.5    0.00000    0.00003
 7.5    6.5    2.5   -0.00002    0.00006
 7.5    6.5    1.5   -0.00009    0.00010
 7.5    6.5    0.5   -0.00020    0.00011
 7.5    6.5   -0.5   -0.00033    0.00005
 7.5    6.5   -1.5   -0.00044   -0.00005
 7.5    6.5   -2.5   -0.00046   -0.00020
 7.5    6.5   -3.5   -0.00039   -0.00031
 7.5    6.5   -4.5   -0.00025   -0.00034
 7.5    6.5   -5.5   -0.00011   -0.00027
 7.5    6.5   -6.5   -0.00002   -0.00016
 7.5    6.5   -7.5    0.00001   -0.00006
 7.5    5.5    5.5    0.00002   -0.00000
 7.5    5.5    4.5    0.00004    0.00002
 7.5    5.5    3.5    0.00005    0.00008
 7.5    5.5    2.5    0.00003    0.00023
 7.5    5.5    1.5   -0.00010    0.00043
 7.5    5.5    0.5   -0.00041    0.00063
 7.5    5.5   -0.5   -0.00087    0.00071
 7.5    5.5   -1.5   -0.00135    0.00056
 7.5    5.5   -2.5   -0.00166    0.00019
 7.5    5.5   -3.5   -0.00163   -0.00026
 7.5    5.5   -4.5   -0.00127   -0.00056
 7.5    5.5   -5.5   -0.00077   -0.00061
 7.5    5.5   -6.5   -0.00032   -0.00043
 7.5    5.5   -7.5   -0.00008   -0.00019
 7.5    4.5    4.5    0.00011   -0.00000
 7.5    4.5    3.5    0.00026    0.00013
 7.5    4.5    2.5    0.00040    0.00050
 7.5    4.5    1.5    0.00036    0.00122
 7.5    4.5    0.5   -0.00011    0.00216
 7.5    4.5   -0.5   -0.00115    0.00302
 7.5    4.5   -1.5   -0.00257    0.00335
 7.5    4.5   -2.5   -0.00387    0.00286
 7.5    4.5   -3.5   -0.00443    0.00171
 7.5    4.5   -4.5   -0.00399    0.00043
 7.5    4.5   -5.5   -0.00278   -0.00041
 7.5    4.5   -6.5   -0.00142   -0.00060
 7.5    4.5   -7.5   -0.00046   -0.00035
 7.5    3.5    3.5    0.00073   -0.00000
 7.5    3.5    2.5    0.00151    0.00068
 7.5    3.5    1.5    0.00227    0.00232
 7.5    3.5    0.5    0.00234    0.00506
 7.5    3.5   -0.5    0.00102    0.00826
 7.5    3.5   -1.5   -0.00184    0.01070
 7.5    3.5   -2.5   -0.00537    0.01116
 7.5    3.5   -3.5   -0.00804    0.00922
 7.5    3.5   -4.5   -0.00857    0.00577
 7.5    3.5   -5.5   -0.00683    0.00239
 7.5    3.5   -6.5   -0.00397    0.00033
 7.5    3.5   -7.5   -0.00147   -0.00025
 7.5    2.5    2.5    0.00373   -0.00001
 7.5    2.5    1.5    0.00686    0.00269
 7.5    2.5    0.5    0.00958    0.00825
 7.5    2.5   -0.5    0.00984    0.01614
 7.5    2.5   -1.5    0.00626    0.02388
 7.5    2.5   -2.5   -0.00063    0.02812
 7.5    2.5   -3.5   -0.00797    0.02662
 7.5    2.5   -4.5   -0.01230    0.01996
 7.5    2.5   -5.5   -0.01188    0.01134
 7.5    2.5   -6.5   -0.00789    0.00440
 7.5    2.5   -7.5   -0.00327    0.00085
 7.5    1.5    1.5    0.01456   -0.00001
 7.5    1.5    0.5    0.02359    0.00827
 7.5    1.5   -0.5    0.02984    0.02256
 7.5    1.5   -1.5    0.02881    0.03944
 7.5    1.5   -2.5    0.01922    0.05223
 7.5    1.5   -3.5    0.00460    0.05477
 7.5    1.5   -4.5   -0.00820    0.04564
 7.5    1.5   -5.5   -0.01367    0.02947
 7.5    1.5   -6.5   -0.01134    0.01380
 7.5    1.5   -7.5   -0.00539    0.00393
 7.5    0.5    0.5    0.04297   -0.00000
 7.5    0.5   -0.5    0.06121    0.01965
 7.5    0.5   -1.5    0.06923    0.04759
 7.5    0.5   -2.5    0.06089    0.07382
 7.5    0.5   -3.5    0.03861    0.08624
 7.5    0.5   -4.5    0.01264    0.07871
 7.5    0.5   -5.5   -0.00543    0.05558
 7.5    0.5   -6.5   -0.01055    0.02882
 7.5    0.5   -7.5   -0.00651    0.00944
 7.5   -0.5   -0.5    0.09628   -0.00002
 7.5   -0.5   -1.5    0.12045    0.03619
 7.5   -0.5   -2.5    0.12062    0.07735
 7.5   -0.5   -3.5    0.09451    0.10529
 7.5   -0.5   -4.5    0.05404    0.10641
 7.5   -0.5   -5.5    0.01769    0.08171
 7.5   -0.5   -6.5   -0.00186    0.04590
 7.5   -0.5   -7.5   -0.00496    0.01643
 7.5   -1.5   -1.5    0.16434   -0.00002
 7.5   -1.5   -2.5    0.18002    0.05147
 7.5   -1.5   -3.5    0.15792    0.09621
 7.5   -1.5   -4.5    0.10765    0.11286
 7.5   -1.5   -5.5    0.05288    0.09561
 7.5   -1.5   -6.5    0.01494    0.05816
 7.5   -1.5   -7.5   -0.00003    0.02243
 7.5   -2.5   -2.5    0.21339   -0.00002
 7.5   -2.5   -3.5    0.20313    0.05595
 7.5   -2.5   -4.5    0.15336    0.08993
 7.5   -2.5   -5.5    0.08791    0.08820
 7.5   -2.5   -6.5    0.03463    0.05904
 7.5   -2.5   -7.5    0.00701    0.02460
 7.5   -3.5   -3.5    0.20814   -0.00002
 7.5   -3.5   -4.5    0.16960    0.04542
 7.5   -3.5   -5.5    0.10688    0.06092
 7.5   -3.5   -6.5    0.04848    0.04713
 7.5   -3.5   -7.5    0.01316    0.02158
 7.5   -4.5   -4.5    0.14818   -0.00002
 7.5   -4.5   -5.5    0.10041    0.02632
 7.5   -4.5   -6.5    0.04983    0.02783
 7.5   -4.5   -7.5    0.01545    0.01471
 7.5   -5.5   -5.5    0.07277   -0.00003
 7.5   -5.5   -6.5    0.03873    0.00999
 7.5   -5.5   -7.5    0.01311    0.00723
 7.5   -6.5   -6.5    0.02199   -0.00003
 7.5   -6.5   -7.5    0.00798    0.00202
 7.5   -7.5   -7.5    0.00307    0.00001
triangle [[ 0.    -0.j     -0.    +0.j      0.    -0.j     -0.    +0.j      0.    +0.j     -0.    +0.j     -0.    +0.j     -0.0001-0.j     -0.0001-0.j     -0.0001-0.j     -0.0001-0.0001j -0.0001-0.0001j -0.    -0.0001j  0.    -0.0001j  0.    -0.j      0.    -0.j    ]
 [ 0.    +0.j      0.    -0.j      0.    +0.j      0.    +0.j      0.    +0.j     -0.    +0.0001j -0.0001+0.0001j -0.0002+0.0001j -0.0003+0.0001j -0.0004-0.0001j -0.0005-0.0002j -0.0004-0.0003j -0.0002-0.0003j -0.0001-0.0003j -0.    -0.0002j  0.    -0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    -0.j      0.    +0.j      0.0001+0.0001j  0.    +0.0002j -0.0001+0.0004j -0.0004+0.0006j -0.0009+0.0007j -0.0014+0.0006j -0.0017+0.0002j -0.0016-0.0003j -0.0013-0.0006j -0.0008-0.0006j -0.0003-0.0004j -0.0001-0.0002j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.0001-0.j      0.0003+0.0001j  0.0004+0.0005j  0.0004+0.0012j -0.0001+0.0022j -0.0011+0.003j  -0.0026+0.0033j -0.0039+0.0029j -0.0044+0.0017j -0.004 +0.0004j -0.0028-0.0004j -0.0014-0.0006j -0.0005-0.0004j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0007-0.j      0.0015+0.0007j  0.0023+0.0023j  0.0023+0.0051j  0.001 +0.0083j -0.0018+0.0107j -0.0054+0.0112j -0.008 +0.0092j -0.0086+0.0058j -0.0068+0.0024j -0.004 +0.0003j -0.0015-0.0003j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0037-0.j      0.0069+0.0027j  0.0096+0.0082j  0.0098+0.0161j  0.0063+0.0239j -0.0006+0.0281j -0.008 +0.0266j -0.0123+0.02j   -0.0119+0.0113j -0.0079+0.0044j -0.0033+0.0009j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0146-0.j      0.0236+0.0083j  0.0298+0.0226j  0.0288+0.0394j  0.0192+0.0522j  0.0046+0.0548j -0.0082+0.0456j -0.0137+0.0295j -0.0113+0.0138j -0.0054+0.0039j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.043 -0.j      0.0612+0.0196j  0.0692+0.0476j  0.0609+0.0738j  0.0386+0.0862j  0.0126+0.0787j -0.0054+0.0556j -0.0106+0.0288j -0.0065+0.0094j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0963-0.j      0.1204+0.0362j  0.1206+0.0774j  0.0945+0.1053j  0.054 +0.1064j  0.0177+0.0817j -0.0019+0.0459j -0.005 +0.0164j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.1643-0.j      0.18  +0.0515j  0.1579+0.0962j  0.1077+0.1129j  0.0529+0.0956j  0.0149+0.0582j -0.    +0.0224j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.2134-0.j      0.2031+0.0559j  0.1534+0.0899j  0.0879+0.0882j  0.0346+0.059j   0.007 +0.0246j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.2081-0.j      0.1696+0.0454j  0.1069+0.0609j  0.0485+0.0471j  0.0132+0.0216j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.1482-0.j      0.1004+0.0263j  0.0498+0.0278j  0.0154+0.0147j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0728-0.j      0.0387+0.01j    0.0131+0.0072j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.022 -0.j      0.008 +0.002j ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0031+0.j    ]]
full [[ 0.    +0.j     -0.    +0.j      0.    -0.j     -0.    +0.j      0.    +0.j     -0.    +0.j     -0.    +0.j     -0.0001-0.j     -0.0001-0.j     -0.0001-0.j     -0.0001-0.0001j -0.0001-0.0001j -0.    -0.0001j  0.    -0.0001j  0.    -0.j      0.    -0.j    ]
 [-0.    -0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j     -0.    +0.0001j -0.0001+0.0001j -0.0002+0.0001j -0.0003+0.0001j -0.0004-0.0001j -0.0005-0.0002j -0.0004-0.0003j -0.0002-0.0003j -0.0001-0.0003j -0.    -0.0002j  0.    -0.0001j]
 [ 0.    +0.j      0.    -0.j      0.    +0.j      0.    +0.j      0.0001+0.0001j  0.    +0.0002j -0.0001+0.0004j -0.0004+0.0006j -0.0009+0.0007j -0.0014+0.0006j -0.0017+0.0002j -0.0016-0.0003j -0.0013-0.0006j -0.0008-0.0006j -0.0003-0.0004j -0.0001-0.0002j]
 [-0.    -0.j      0.    -0.j      0.    -0.j      0.0001+0.j      0.0003+0.0001j  0.0004+0.0005j  0.0004+0.0012j -0.0001+0.0022j -0.0011+0.003j  -0.0026+0.0033j -0.0039+0.0029j -0.0044+0.0017j -0.004 +0.0004j -0.0028-0.0004j -0.0014-0.0006j -0.0005-0.0004j]
 [ 0.    -0.j      0.    -0.j      0.0001-0.0001j  0.0003-0.0001j  0.0007+0.j      0.0015+0.0007j  0.0023+0.0023j  0.0023+0.0051j  0.001 +0.0083j -0.0018+0.0107j -0.0054+0.0112j -0.008 +0.0092j -0.0086+0.0058j -0.0068+0.0024j -0.004 +0.0003j -0.0015-0.0003j]
 [-0.    -0.j     -0.    -0.0001j  0.    -0.0002j  0.0004-0.0005j  0.0015-0.0007j  0.0037+0.j      0.0069+0.0027j  0.0096+0.0082j  0.0098+0.0161j  0.0063+0.0239j -0.0006+0.0281j -0.008 +0.0266j -0.0123+0.02j   -0.0119+0.0113j -0.0079+0.0044j -0.0033+0.0009j]
 [-0.    -0.j     -0.0001-0.0001j -0.0001-0.0004j  0.0004-0.0012j  0.0023-0.0023j  0.0069-0.0027j  0.0146+0.j      0.0236+0.0083j  0.0298+0.0226j  0.0288+0.0394j  0.0192+0.0522j  0.0046+0.0548j -0.0082+0.0456j -0.0137+0.0295j -0.0113+0.0138j -0.0054+0.0039j]
 [-0.0001+0.j     -0.0002-0.0001j -0.0004-0.0006j -0.0001-0.0022j  0.0023-0.0051j  0.0096-0.0082j  0.0236-0.0083j  0.043 +0.j      0.0612+0.0196j  0.0692+0.0476j  0.0609+0.0738j  0.0386+0.0862j  0.0126+0.0787j -0.0054+0.0556j -0.0106+0.0288j -0.0065+0.0094j]
 [-0.0001+0.j     -0.0003-0.0001j -0.0009-0.0007j -0.0011-0.003j   0.001 -0.0083j  0.0098-0.0161j  0.0298-0.0226j  0.0612-0.0196j  0.0963+0.j      0.1204+0.0362j  0.1206+0.0774j  0.0945+0.1053j  0.054 +0.1064j  0.0177+0.0817j -0.0019+0.0459j -0.005 +0.0164j]
 [-0.0001+0.j     -0.0004+0.0001j -0.0014-0.0006j -0.0026-0.0033j -0.0018-0.0107j  0.0063-0.0239j  0.0288-0.0394j  0.0692-0.0476j  0.1204-0.0362j  0.1643+0.j      0.18  +0.0515j  0.1579+0.0962j  0.1077+0.1129j  0.0529+0.0956j  0.0149+0.0582j -0.    +0.0224j]
 [-0.0001+0.0001j -0.0005+0.0002j -0.0017-0.0002j -0.0039-0.0029j -0.0054-0.0112j -0.0006-0.0281j  0.0192-0.0522j  0.0609-0.0738j  0.1206-0.0774j  0.18  -0.0515j  0.2134+0.j      0.2031+0.0559j  0.1534+0.0899j  0.0879+0.0882j  0.0346+0.059j   0.007 +0.0246j]
 [-0.0001+0.0001j -0.0004+0.0003j -0.0016+0.0003j -0.0044-0.0017j -0.008 -0.0092j -0.008 -0.0266j  0.0046-0.0548j  0.0386-0.0862j  0.0945-0.1053j  0.1579-0.0962j  0.2031-0.0559j  0.2081+0.j      0.1696+0.0454j  0.1069+0.0609j  0.0485+0.0471j  0.0132+0.0216j]
 [-0.    +0.0001j -0.0002+0.0003j -0.0013+0.0006j -0.004 -0.0004j -0.0086-0.0058j -0.0123-0.02j   -0.0082-0.0456j  0.0126-0.0787j  0.054 -0.1064j  0.1077-0.1129j  0.1534-0.0899j  0.1696-0.0454j  0.1482+0.j      0.1004+0.0263j  0.0498+0.0278j  0.0154+0.0147j]
 [ 0.    +0.0001j -0.0001+0.0003j -0.0008+0.0006j -0.0028+0.0004j -0.0068-0.0024j -0.0119-0.0113j -0.0137-0.0295j -0.0054-0.0556j  0.0177-0.0817j  0.0529-0.0956j  0.0879-0.0882j  0.1069-0.0609j  0.1004-0.0263j  0.0728+0.j      0.0387+0.01j    0.0131+0.0072j]
 [ 0.    +0.j     -0.    +0.0002j -0.0003+0.0004j -0.0014+0.0006j -0.004 -0.0003j -0.0079-0.0044j -0.0113-0.0138j -0.0106-0.0288j -0.0019-0.0459j  0.0149-0.0582j  0.0346-0.059j   0.0485-0.0471j  0.0498-0.0278j  0.0387-0.01j    0.022 +0.j      0.008 +0.002j ]
 [ 0.    +0.j      0.    +0.0001j -0.0001+0.0002j -0.0005+0.0004j -0.0015+0.0003j -0.0033-0.0009j -0.0054-0.0039j -0.0065-0.0094j -0.005 -0.0164j -0.    -0.0224j  0.007 -0.0246j  0.0132-0.0216j  0.0154-0.0147j  0.0131-0.0072j  0.008 -0.002j   0.0031+0.j    ]]
Sum of c^2 0.9902881590359935
Wed Apr 16 00:16:47 PDT 2025
