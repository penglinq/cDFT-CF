Currently Loaded Modulefiles:
 1) gmp/6.2.1-gcc-13.2.0-lcnhyse <aL>             
 2) mpfr/4.2.0-gcc-13.2.0-yy2fkq5 <aL>            
 3) mpc/1.3.1-gcc-13.2.0-5kgoftq <aL>             
 4) zlib-ng/2.1.3-gcc-13.2.0-jetnfwa <aL>         
 5) zstd/1.5.5-gcc-13.2.0-t2lua3l <aL>            
 6) gcc/13.2.0-gcc-13.2.0-w55nxkl                 
 7) cmake/3.20.2-gcc-13.2.0-rp74vpv               
 8) libfabric/1.18.1-gcc-13.2.0-bijxar4 <aL>      
 9) numactl/2.0.14-gcc-13.2.0-etkf74e <aL>        
10) openssh/8.7p1-gcc-13.2.0-g55xmkx <aL>         
11) slurm/22.05.6-gcc-13.2.0-tchsn6y <aL>         
12) openmpi/4.1.5-gcc-13.2.0-24q3ap2              
13) libpciaccess/0.17-gcc-13.2.0-r2cijnn <aL>     
14) libiconv/1.17-gcc-13.2.0-ntov4te <aL>         
15) xz/5.4.1-gcc-13.2.0-4xkm5xo <aL>              
16) libxml2/2.10.3-gcc-13.2.0-fr6jcjz <aL>        
17) ncurses/6.4-gcc-13.2.0-4o2yj6n <aL>           
18) hwloc/2.9.1-gcc-13.2.0-gzvfolk <aL>           
19) intel-tbb/2021.9.0-gcc-13.2.0-6nwk3ml <aL>    
20) intel-oneapi-mkl/2023.2.0-gcc-13.2.0-ohvyk7g  

Key:
<module-tag>  <aL>=auto-loaded  
/central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF
Tue Apr 15 23:57:55 PDT 2025
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
--------------------------------------------------------------------------
WARNING: There was an error initializing an OpenFabrics device.

  Local host:   hpc-92-14
  Local device: mlx5_0
--------------------------------------------------------------------------
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:57:58 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     #INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************
   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************




System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf


#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17

System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0

'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              [INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
N_elec (98, 95), N_ao 264
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              #INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     [INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              [INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
N_elec (98, 95), N_ao 264
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0


number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[CONFIG] conf_file None
[INPUT] verbose = 4
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

N_elec (98, 95), N_ao 264
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.93
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
nuclear repulsion = 2660.00686642269
number of shells = 122
CPU time:         0.94
[INPUT] num. atoms = 17
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
N_elec (98, 95), N_ao 264
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
N_elec (98, 95), N_ao 264
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
N_elec (98, 95), N_ao 264
N_elec (98, 95), N_ao 264
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              '''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

N_elec (98, 95), N_ao 264
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[CONFIG] conf_file None
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
nuclear repulsion = 2660.00686642269
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
number of shells = 122
number of NR pGTOs = 525
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
number of NR pGTOs = 525
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
CPU time:         0.96
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
N_elec (98, 95), N_ao 264
N_elec (98, 95), N_ao 264
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
ecp = {}
CPU time:         0.94
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-N_elec (98, 95), N_ao 264
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
N_elec (98, 95), N_ao 264
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
number of NR pGTOs = 525
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
ecp = {}
CPU time:         0.94
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
N_elec (98, 95), N_ao 264
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[CONFIG] conf_file None
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
[INPUT] verbose = 4
[INPUT] num. atoms = 17
number of NR cGTOs = 264
[INPUT] num. electrons = 193
[INPUT] charge = -5
basis = {'default': '631g', 'Er': 'sarc-dkh'}
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
ecp = {}
CPU time:         0.94
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
N_elec (98, 95), N_ao 264
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
N_elec (98, 95), N_ao 264
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_33/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:57:58 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.97
N_elec (98, 95), N_ao 264
**** MO energy ****
MO #1   energy= -2122.67985807286  occ= 1
MO #2   energy= -2122.67977967688  occ= 1
MO #3   energy= -361.386813818737  occ= 1
MO #4   energy= -361.386175255441  occ= 1
MO #5   energy= -343.3101285357    occ= 1
MO #6   energy= -343.310096894217  occ= 1
MO #7   energy= -309.245863942049  occ= 1
MO #8   energy= -309.2450035239    occ= 1
MO #9   energy= -309.241957394669  occ= 1
MO #10  energy= -309.241658092301  occ= 1
MO #11  energy= -83.0816063951178  occ= 1
MO #12  energy= -83.002081883414   occ= 1
MO #13  energy= -75.1983685750698  occ= 1
MO #14  energy= -75.1787756588925  occ= 1
MO #15  energy= -67.8560752000571  occ= 1
MO #16  energy= -67.8144930313291  occ= 1
MO #17  energy= -67.766702192872   occ= 1
MO #18  energy= -67.7169417845804  occ= 1
MO #19  energy= -54.8568747228159  occ= 1
MO #20  energy= -54.8469224481269  occ= 1
MO #21  energy= -54.8352964032804  occ= 1
MO #22  energy= -54.8308601722158  occ= 1
MO #23  energy= -53.0402138918436  occ= 1
MO #24  energy= -53.0198230459329  occ= 1
MO #25  energy= -52.9973423780766  occ= 1
MO #26  energy= -52.9584105640803  occ= 1
MO #27  energy= -52.8852491648872  occ= 1
MO #28  energy= -52.8594403604675  occ= 1
MO #29  energy= -20.2080960185853  occ= 1
MO #30  energy= -20.2079650602234  occ= 1
MO #31  energy= -20.2046293484562  occ= 1
MO #32  energy= -20.2046217609134  occ= 1
MO #33  energy= -20.2016444545672  occ= 1
MO #34  energy= -20.2014958548065  occ= 1
MO #35  energy= -20.197059582017   occ= 1
MO #36  energy= -20.1970519488931  occ= 1
MO #37  energy= -20.1948786386276  occ= 1
MO #38  energy= -20.1947185532248  occ= 1
MO #39  energy= -20.1904294597767  occ= 1
MO #40  energy= -20.1902458276322  occ= 1
MO #41  energy= -20.1549774631557  occ= 1
MO #42  energy= -20.1547713962701  occ= 1
MO #43  energy= -20.1520658522076  occ= 1
MO #44  energy= -20.1518979938873  occ= 1
MO #45  energy= -20.1488274267216  occ= 1
MO #46  energy= -20.1486387311942  occ= 1
MO #47  energy= -20.1452443304312  occ= 1
MO #48  energy= -20.1450521430043  occ= 1
MO #49  energy= -20.1393544097031  occ= 1
MO #50  energy= -20.1393425559572  occ= 1
MO #51  energy= -20.1318456015809  occ= 1
MO #52  energy= -20.1318320553934  occ= 1
MO #53  energy= -17.4003062882863  occ= 1
MO #54  energy= -17.1983516839657  occ= 1
MO #55  energy= -14.1618950366256  occ= 1
MO #56  energy= -14.1009901221031  occ= 1
MO #57  energy= -12.5227996314291  occ= 1
MO #58  energy= -12.4414511686976  occ= 1
MO #59  energy= -12.3243435668848  occ= 1
MO #60  energy= -12.1974960721674  occ= 1
MO #61  energy= -11.073096458147   occ= 1
MO #62  energy= -11.0730796339271  occ= 1
MO #63  energy= -11.0673778502995  occ= 1
MO #64  energy= -11.0673536199989  occ= 1
MO #65  energy= -11.0163816031709  occ= 1
MO #66  energy= -11.0163556652567  occ= 1
MO #67  energy= -11.0115511803562  occ= 1
MO #68  energy= -11.0115302369855  occ= 1
MO #69  energy= -7.28566575549687  occ= 1
MO #70  energy= -7.237071317952    occ= 1
MO #71  energy= -7.22292062061821  occ= 1
MO #72  energy= -7.20260068203029  occ= 1
MO #73  energy= -6.94571332249611  occ= 1
MO #74  energy= -6.89990471265083  occ= 1
MO #75  energy= -6.83950240722407  occ= 1
MO #76  energy= -6.7071355088244   occ= 1
MO #77  energy= -6.47063526266985  occ= 1
MO #78  energy= -6.40422450290327  occ= 1
MO #79  energy= -2.10110973628526  occ= 1
MO #80  energy= -2.03006091020067  occ= 1
MO #81  energy= -1.13146580242211  occ= 1
MO #82  energy= -1.12407226842884  occ= 1
MO #83  energy= -1.11089437770819  occ= 1
MO #84  energy= -1.1106069307864   occ= 1
MO #85  energy= -1.09304180808047  occ= 1
MO #86  energy= -1.0834725633285   occ= 1
MO #87  energy= -1.05697738585256  occ= 1
MO #88  energy= -1.05588516822038  occ= 1
MO #89  energy= -1.04357496827208  occ= 1
MO #90  energy= -1.04053100419029  occ= 1
MO #91  energy= -0.970069192386876 occ= 1
MO #92  energy= -0.969379201352845 occ= 1
MO #93  energy= -0.965042615341309 occ= 1
MO #94  energy= -0.96189461392912  occ= 1
MO #95  energy= -0.948250623470736 occ= 1
MO #96  energy= -0.947304166509059 occ= 1
MO #97  energy= -0.944356850784179 occ= 1
MO #98  energy= -0.943880036479258 occ= 1
MO #99  energy= -0.917260777745965 occ= 1
MO #100 energy= -0.912639220963646 occ= 1
MO #101 energy= -0.907508407330493 occ= 1
MO #102 energy= -0.905515459008129 occ= 1
MO #103 energy= -0.896696843066633 occ= 1
MO #104 energy= -0.895750311150455 occ= 1
MO #105 energy= -0.891864822809097 occ= 1
MO #106 energy= -0.891375202388373 occ= 1
MO #107 energy= -0.850488483109165 occ= 1
MO #108 energy= -0.834047652362663 occ= 1
MO #109 energy= -0.812082044470702 occ= 1
MO #110 energy= -0.793900657374762 occ= 1
MO #111 energy= -0.464242386976079 occ= 1
MO #112 energy= -0.440707701209223 occ= 1
MO #113 energy= -0.418117840225996 occ= 1
MO #114 energy= -0.414410327951313 occ= 1
MO #115 energy= -0.405123807476335 occ= 1
MO #116 energy= -0.404363855974578 occ= 1
MO #117 energy= -0.391357748858978 occ= 1
MO #118 energy= -0.390493916690203 occ= 1
MO #119 energy= -0.389393800371738 occ= 1
MO #120 energy= -0.382641355216998 occ= 1
MO #121 energy= -0.381356644512917 occ= 1
MO #122 energy= -0.367693911914537 occ= 1
MO #123 energy= -0.339644487296724 occ= 1
MO #124 energy= -0.332983512787916 occ= 1
MO #125 energy= -0.332610976711128 occ= 1
MO #126 energy= -0.327113000788209 occ= 1
MO #127 energy= -0.326884655395054 occ= 1
MO #128 energy= -0.308520273741632 occ= 1
MO #129 energy= -0.307468181359524 occ= 1
MO #130 energy= -0.306703970768666 occ= 1
MO #131 energy= -0.305723229805352 occ= 1
MO #132 energy= -0.303150476929656 occ= 1
MO #133 energy= -0.302197542097387 occ= 1
MO #134 energy= -0.299807123642177 occ= 1
MO #135 energy= -0.299399878003155 occ= 1
MO #136 energy= -0.287772462204613 occ= 1
MO #137 energy= -0.2876854641178   occ= 1
MO #138 energy= -0.279844990427752 occ= 1
MO #139 energy= -0.278845138546214 occ= 1
MO #140 energy= -0.260542252733442 occ= 1
MO #141 energy= -0.257231819715287 occ= 1
MO #142 energy= -0.251978876819953 occ= 1
MO #143 energy= -0.250389237501206 occ= 1
MO #144 energy= -0.247474442915882 occ= 1
MO #145 energy= -0.244812388612418 occ= 1
MO #146 energy= -0.243531800400037 occ= 1
MO #147 energy= -0.242722090228502 occ= 1
MO #148 energy= -0.239470673992536 occ= 1
MO #149 energy= -0.238124122565025 occ= 1
MO #150 energy= -0.22853420459289  occ= 1
MO #151 energy= -0.228035139156687 occ= 1
MO #152 energy= -0.220855759063939 occ= 1
MO #153 energy= -0.220818450268353 occ= 1
MO #154 energy= -0.148863444045104 occ= 1
MO #155 energy= -0.148054383481222 occ= 1
MO #156 energy= -0.133590264071307 occ= 1
MO #157 energy= -0.133153494548139 occ= 1
MO #158 energy= -0.118650396030408 occ= 1
MO #159 energy= -0.118505740871784 occ= 1
MO #160 energy= -0.112999589754105 occ= 1
MO #161 energy= -0.112785748556396 occ= 1
MO #162 energy= -0.10091727728243  occ= 1
MO #163 energy= -0.100801098418872 occ= 1
MO #164 energy= -0.0969763428658511 occ= 1
MO #165 energy= -0.0969043674610503 occ= 1
MO #166 energy= -0.089438124705998 occ= 1
MO #167 energy= -0.0891121719768481 occ= 1
MO #168 energy= -0.0841435736894627 occ= 1
MO #169 energy= -0.0839455389570597 occ= 1
MO #170 energy= -0.0832335757044234 occ= 1
MO #171 energy= -0.0829707229782116 occ= 1
MO #172 energy= -0.0788943324684458 occ= 1
MO #173 energy= -0.0787111578077263 occ= 1
MO #174 energy= -0.0741376944324276 occ= 1
MO #175 energy= -0.0736652769864921 occ= 1
MO #176 energy= -0.0723277210557245 occ= 1
MO #177 energy= -0.0719465557673977 occ= 1
MO #178 energy= -0.0589887729274694 occ= 1
MO #179 energy= -0.0584792913857678 occ= 1
MO #180 energy= -0.0544787059264157 occ= 1
MO #181 energy= -0.054370240209877 occ= 1
MO #182 energy= -0.044086213246812 occ= 1
MO #183 energy= -0.0437202868567011 occ= 1
MO #184 energy= -0.0416897775435372 occ= 1
MO #185 energy= -0.0413815167056839 occ= 1
MO #186 energy= -0.0303084634248271 occ= 1
MO #187 energy= -0.0302032398633091 occ= 1
MO #188 energy= -0.0218357402577988 occ= 1
MO #189 energy= -0.0216659559595701 occ= 1
MO #190 energy= -0.018868379171768 occ= 1
MO #191 energy= -0.0183954992596677 occ= 1
MO #192 energy= -0.0146245894480944 occ= 1
MO #193 energy= -0.0142153260859105 occ= 1
MO #194 energy= 0.259560905070737  occ= 0
MO #195 energy= 0.259563093193485  occ= 0
MO #196 energy= 0.272790650368902  occ= 0
MO #197 energy= 0.272791719348914  occ= 0
MO #198 energy= 0.290428242401554  occ= 0
MO #199 energy= 0.290435407435861  occ= 0
MO #200 energy= 0.294513167763903  occ= 0
MO #201 energy= 0.294516476188496  occ= 0
MO #202 energy= 0.306687424845188  occ= 0
MO #203 energy= 0.306696113752252  occ= 0
MO #204 energy= 0.30972552437025   occ= 0
MO #205 energy= 0.309731580558736  occ= 0
MO #206 energy= 0.329372081670297  occ= 0
MO #207 energy= 0.329377504158916  occ= 0
MO #208 energy= 0.371763156970106  occ= 0
MO #209 energy= 0.371772402688144  occ= 0
MO #210 energy= 0.381464293389891  occ= 0
MO #211 energy= 0.381477996599305  occ= 0
MO #212 energy= 0.552793294591439  occ= 0
MO #213 energy= 0.553156706285526  occ= 0
MO #214 energy= 0.556790404555202  occ= 0
MO #215 energy= 0.556953916286813  occ= 0
MO #216 energy= 0.57470434154856   occ= 0
MO #217 energy= 0.57484028563077   occ= 0
MO #218 energy= 0.581861729189555  occ= 0
MO #219 energy= 0.582432899992986  occ= 0
MO #220 energy= 0.585523727015484  occ= 0
MO #221 energy= 0.586134239370804  occ= 0
MO #222 energy= 0.592034876791809  occ= 0
MO #223 energy= 0.592409005701208  occ= 0
MO #224 energy= 0.606631104277077  occ= 0
MO #225 energy= 0.606723433609141  occ= 0
MO #226 energy= 0.617297683595591  occ= 0
MO #227 energy= 0.621628257759828  occ= 0
MO #228 energy= 0.634800295739844  occ= 0
MO #229 energy= 0.635840987341478  occ= 0
MO #230 energy= 0.64069986626948   occ= 0
MO #231 energy= 0.642139410907767  occ= 0
MO #232 energy= 0.651568090405934  occ= 0
MO #233 energy= 0.651787459751993  occ= 0
MO #234 energy= 0.655576827349602  occ= 0
MO #235 energy= 0.656082644825698  occ= 0
MO #236 energy= 0.661162510290533  occ= 0
MO #237 energy= 0.663786384361086  occ= 0
MO #238 energy= 0.665573685128146  occ= 0
MO #239 energy= 0.668394855920308  occ= 0
MO #240 energy= 0.691200440751071  occ= 0
MO #241 energy= 0.69664981757255   occ= 0
MO #242 energy= 0.702155748820303  occ= 0
MO #243 energy= 0.711021890558779  occ= 0
MO #244 energy= 0.716466058257561  occ= 0
MO #245 energy= 0.73331815097175   occ= 0
MO #246 energy= 0.760272095335487  occ= 0
MO #247 energy= 0.778950339002006  occ= 0
MO #248 energy= 0.860491290948177  occ= 0
MO #249 energy= 0.860796028289133  occ= 0
MO #250 energy= 0.865643093027196  occ= 0
MO #251 energy= 0.867016203535424  occ= 0
MO #252 energy= 0.876386043118034  occ= 0
MO #253 energy= 0.877365658440787  occ= 0
MO #254 energy= 0.892570999496432  occ= 0
MO #255 energy= 0.908232284326554  occ= 0
MO #256 energy= 0.912606408812222  occ= 0
MO #257 energy= 0.916461199854833  occ= 0
MO #258 energy= 0.92689459691226   occ= 0
MO #259 energy= 0.928728713926303  occ= 0
MO #260 energy= 0.93187762915011   occ= 0
MO #261 energy= 0.937194801528445  occ= 0
MO #262 energy= 0.944272158486564  occ= 0
MO #263 energy= 0.948333278994186  occ= 0
MO #264 energy= 0.952997652900914  occ= 0
MO #265 energy= 0.956427451003893  occ= 0
MO #266 energy= 0.967522861290937  occ= 0
MO #267 energy= 0.973555619264401  occ= 0
MO #268 energy= 0.980230114288183  occ= 0
MO #269 energy= 0.987701965694725  occ= 0
MO #270 energy= 0.99185015943691   occ= 0
MO #271 energy= 0.993847613895582  occ= 0
MO #272 energy= 0.998412199042894  occ= 0
MO #273 energy= 1.00396685010984   occ= 0
MO #274 energy= 1.00749192448371   occ= 0
MO #275 energy= 1.03139083608993   occ= 0
MO #276 energy= 1.03401555703492   occ= 0
MO #277 energy= 1.04284436387105   occ= 0
MO #278 energy= 1.04522140433381   occ= 0
MO #279 energy= 1.04782445593699   occ= 0
MO #280 energy= 1.04845809165408   occ= 0
MO #281 energy= 1.07884418130997   occ= 0
MO #282 energy= 1.08155264114767   occ= 0
MO #283 energy= 1.08788980097649   occ= 0
MO #284 energy= 1.09018279537393   occ= 0
MO #285 energy= 1.09111049196917   occ= 0
MO #286 energy= 1.09372665653283   occ= 0
MO #287 energy= 1.09629355156819   occ= 0
MO #288 energy= 1.11042836088111   occ= 0
MO #289 energy= 1.11579027701555   occ= 0
MO #290 energy= 1.12938360624153   occ= 0
MO #291 energy= 1.15773587629266   occ= 0
MO #292 energy= 1.1626382319313    occ= 0
MO #293 energy= 1.17158383771218   occ= 0
MO #294 energy= 1.17553284022391   occ= 0
MO #295 energy= 1.19567728630584   occ= 0
MO #296 energy= 1.19782571278102   occ= 0
MO #297 energy= 1.21030840400229   occ= 0
MO #298 energy= 1.21305634579619   occ= 0
MO #299 energy= 1.22000928363809   occ= 0
MO #300 energy= 1.22289960953959   occ= 0
MO #301 energy= 1.23022453800374   occ= 0
MO #302 energy= 1.2349638423674    occ= 0
MO #303 energy= 1.25173944086671   occ= 0
MO #304 energy= 1.25964725218095   occ= 0
MO #305 energy= 1.26209627065766   occ= 0
MO #306 energy= 1.26780339464145   occ= 0
MO #307 energy= 1.27525376441266   occ= 0
MO #308 energy= 1.27716354729657   occ= 0
MO #309 energy= 1.28779379253426   occ= 0
MO #310 energy= 1.29286329007929   occ= 0
MO #311 energy= 1.29738118369586   occ= 0
MO #312 energy= 1.29988936008934   occ= 0
MO #313 energy= 1.30792024488182   occ= 0
MO #314 energy= 1.31128013763553   occ= 0
MO #315 energy= 1.32981974170085   occ= 0
MO #316 energy= 1.33231809392927   occ= 0
MO #317 energy= 1.34579956462956   occ= 0
MO #318 energy= 1.3461408519331    occ= 0
MO #319 energy= 1.37558734554365   occ= 0
MO #320 energy= 1.38582809203589   occ= 0
MO #321 energy= 1.39704888954963   occ= 0
MO #322 energy= 1.40561411636134   occ= 0
MO #323 energy= 1.45382115457473   occ= 0
MO #324 energy= 1.46126493297019   occ= 0
MO #325 energy= 1.47398650897077   occ= 0
MO #326 energy= 1.48211592949467   occ= 0
MO #327 energy= 1.49157836949429   occ= 0
MO #328 energy= 1.50027077136428   occ= 0
MO #329 energy= 1.52474671588891   occ= 0
MO #330 energy= 1.52737382314355   occ= 0
MO #331 energy= 1.56095649822097   occ= 0
MO #332 energy= 1.56184093026431   occ= 0
MO #333 energy= 1.57809681179374   occ= 0
MO #334 energy= 1.5789329960452    occ= 0
MO #335 energy= 1.5822450844963    occ= 0
MO #336 energy= 1.5836564511127    occ= 0
MO #337 energy= 1.59882193675517   occ= 0
MO #338 energy= 1.60017508938748   occ= 0
MO #339 energy= 1.62446130736504   occ= 0
MO #340 energy= 1.62552815035497   occ= 0
MO #341 energy= 1.62872784325734   occ= 0
MO #342 energy= 1.63513547729035   occ= 0
MO #343 energy= 1.64518687168269   occ= 0
MO #344 energy= 1.6470306282479    occ= 0
MO #345 energy= 1.66293073874996   occ= 0
MO #346 energy= 1.6652345179968    occ= 0
MO #347 energy= 1.66917482733374   occ= 0
MO #348 energy= 1.66969162764595   occ= 0
MO #349 energy= 1.67503102453175   occ= 0
MO #350 energy= 1.675959651347     occ= 0
MO #351 energy= 1.68232450099917   occ= 0
MO #352 energy= 1.6829363122665    occ= 0
MO #353 energy= 1.69203234494045   occ= 0
MO #354 energy= 1.6925962615519    occ= 0
MO #355 energy= 1.69526935642074   occ= 0
MO #356 energy= 1.69723855088706   occ= 0
MO #357 energy= 1.70106999020043   occ= 0
MO #358 energy= 1.7026331013361    occ= 0
MO #359 energy= 1.70731972765462   occ= 0
MO #360 energy= 1.70928680025133   occ= 0
MO #361 energy= 1.71165014150386   occ= 0
MO #362 energy= 1.7138668201291    occ= 0
MO #363 energy= 1.72543416738139   occ= 0
MO #364 energy= 1.72675869912453   occ= 0
MO #365 energy= 1.73932123689779   occ= 0
MO #366 energy= 1.74091291757644   occ= 0
MO #367 energy= 1.75780469860163   occ= 0
MO #368 energy= 1.76007541130848   occ= 0
MO #369 energy= 1.76478673950008   occ= 0
MO #370 energy= 1.76656852346171   occ= 0
MO #371 energy= 1.77446416683076   occ= 0
MO #372 energy= 1.77633086759168   occ= 0
MO #373 energy= 1.78119422760047   occ= 0
MO #374 energy= 1.78144759650459   occ= 0
MO #375 energy= 1.79075331516948   occ= 0
MO #376 energy= 1.79092318619614   occ= 0
MO #377 energy= 1.80477187990176   occ= 0
MO #378 energy= 1.80484434330159   occ= 0
MO #379 energy= 1.8313554687816    occ= 0
MO #380 energy= 1.8357443910213    occ= 0
MO #381 energy= 1.84896466814899   occ= 0
MO #382 energy= 1.85142385534      occ= 0
MO #383 energy= 1.85772398668544   occ= 0
MO #384 energy= 1.86232618356745   occ= 0
MO #385 energy= 1.8681237996143    occ= 0
MO #386 energy= 1.870561909026     occ= 0
MO #387 energy= 1.87602947684952   occ= 0
MO #388 energy= 1.8769084244321    occ= 0
MO #389 energy= 1.88567654872928   occ= 0
MO #390 energy= 1.88927073959932   occ= 0
MO #391 energy= 1.9298562094359    occ= 0
MO #392 energy= 1.93098381602485   occ= 0
MO #393 energy= 1.93290807353754   occ= 0
MO #394 energy= 1.93898647845741   occ= 0
MO #395 energy= 1.98844478313929   occ= 0
MO #396 energy= 1.99008787579215   occ= 0
MO #397 energy= 2.01469051858838   occ= 0
MO #398 energy= 2.01709466091707   occ= 0
MO #399 energy= 2.03947262871615   occ= 0
MO #400 energy= 2.04430488444447   occ= 0
MO #401 energy= 2.05895991173035   occ= 0
MO #402 energy= 2.07181810496233   occ= 0
MO #403 energy= 2.08587751267093   occ= 0
MO #404 energy= 2.09256124067943   occ= 0
MO #405 energy= 2.09989244618108   occ= 0
MO #406 energy= 2.11278014989081   occ= 0
MO #407 energy= 2.12913972305593   occ= 0
MO #408 energy= 2.13834639145478   occ= 0
MO #409 energy= 2.14106010092278   occ= 0
MO #410 energy= 2.14356956044221   occ= 0
MO #411 energy= 2.15627889875648   occ= 0
MO #412 energy= 2.16290818386482   occ= 0
MO #413 energy= 2.18900674020046   occ= 0
MO #414 energy= 2.20827969107678   occ= 0
MO #415 energy= 2.21645025338419   occ= 0
MO #416 energy= 2.2192928141195    occ= 0
MO #417 energy= 2.22843067514841   occ= 0
MO #418 energy= 2.2571119635078    occ= 0
MO #419 energy= 2.29625779115353   occ= 0
MO #420 energy= 2.30780523383595   occ= 0
MO #421 energy= 2.31112797016288   occ= 0
MO #422 energy= 2.33021217290965   occ= 0
MO #423 energy= 2.33383061766529   occ= 0
MO #424 energy= 2.354642945206     occ= 0
MO #425 energy= 2.36160978123756   occ= 0
MO #426 energy= 2.38737516761191   occ= 0
MO #427 energy= 2.43328103653457   occ= 0
MO #428 energy= 2.43673653172448   occ= 0
MO #429 energy= 2.44636277328597   occ= 0
MO #430 energy= 2.46859557578185   occ= 0
MO #431 energy= 2.53045127297653   occ= 0
MO #432 energy= 2.55258456991507   occ= 0
MO #433 energy= 2.62818731264262   occ= 0
MO #434 energy= 2.63635377260548   occ= 0
MO #435 energy= 2.66473814668126   occ= 0
MO #436 energy= 2.66825911341259   occ= 0
MO #437 energy= 2.69325595039513   occ= 0
MO #438 energy= 2.69840165433672   occ= 0
MO #439 energy= 2.70636486776111   occ= 0
MO #440 energy= 2.71244215993462   occ= 0
MO #441 energy= 2.72944820873351   occ= 0
MO #442 energy= 2.73190603325736   occ= 0
MO #443 energy= 2.7534569939665    occ= 0
MO #444 energy= 2.75687041869819   occ= 0
MO #445 energy= 2.77386234642032   occ= 0
MO #446 energy= 2.77649826783666   occ= 0
MO #447 energy= 2.81830034272822   occ= 0
MO #448 energy= 2.81987935221943   occ= 0
MO #449 energy= 2.87245473904026   occ= 0
MO #450 energy= 2.87341804449235   occ= 0
MO #451 energy= 2.94072962448553   occ= 0
MO #452 energy= 2.94524145315603   occ= 0
MO #453 energy= 2.97300610695615   occ= 0
MO #454 energy= 2.97356534876742   occ= 0
MO #455 energy= 3.01948265464253   occ= 0
MO #456 energy= 3.01997867146667   occ= 0
MO #457 energy= 3.32617019167984   occ= 0
MO #458 energy= 3.36108690998064   occ= 0
MO #459 energy= 3.39647272700059   occ= 0
MO #460 energy= 3.40815034712885   occ= 0
MO #461 energy= 3.45601299021211   occ= 0
MO #462 energy= 3.47284040296512   occ= 0
MO #463 energy= 3.49645773055979   occ= 0
MO #464 energy= 3.51871960018177   occ= 0
MO #465 energy= 3.80547637574238   occ= 0
MO #466 energy= 3.84272240735903   occ= 0
MO #467 energy= 5.17880729378481   occ= 0
MO #468 energy= 5.21256103415754   occ= 0
MO #469 energy= 6.48952391210538   occ= 0
MO #470 energy= 6.50971690523183   occ= 0
MO #471 energy= 7.04971622065083   occ= 0
MO #472 energy= 7.08529806165477   occ= 0
MO #473 energy= 7.1416343158151    occ= 0
MO #474 energy= 7.17743630210894   occ= 0
MO #475 energy= 12.7307625919236   occ= 0
MO #476 energy= 12.7582219958399   occ= 0
MO #477 energy= 12.7791593105076   occ= 0
MO #478 energy= 12.8082772453966   occ= 0
MO #479 energy= 13.0804917187666   occ= 0
MO #480 energy= 13.1148332039523   occ= 0
MO #481 energy= 13.1606611915736   occ= 0
MO #482 energy= 13.1810127651526   occ= 0
MO #483 energy= 13.2774340333698   occ= 0
MO #484 energy= 13.3484107926927   occ= 0
MO #485 energy= 18.0960097192743   occ= 0
MO #486 energy= 18.1549068951266   occ= 0
MO #487 energy= 29.6668469594485   occ= 0
MO #488 energy= 29.6920177025885   occ= 0
MO #489 energy= 33.2003124486966   occ= 0
MO #490 energy= 33.2504655967646   occ= 0
MO #491 energy= 33.2922288880877   occ= 0
MO #492 energy= 33.3296686843524   occ= 0
MO #493 energy= 65.2899425035479   occ= 0
MO #494 energy= 65.3067480504579   occ= 0
MO #495 energy= 65.3406171135871   occ= 0
MO #496 energy= 65.351362666392    occ= 0
MO #497 energy= 67.7919385013929   occ= 0
MO #498 energy= 67.81621869003     occ= 0
MO #499 energy= 67.8432812222244   occ= 0
MO #500 energy= 67.8525207193864   occ= 0
MO #501 energy= 67.895610620282    occ= 0
MO #502 energy= 67.9244932751202   occ= 0
MO #503 energy= 75.5544818318826   occ= 0
MO #504 energy= 75.5998958394384   occ= 0
MO #505 energy= 158.595867328965   occ= 0
MO #506 energy= 158.605899358042   occ= 0
MO #507 energy= 174.893326603197   occ= 0
MO #508 energy= 174.912085142418   occ= 0
MO #509 energy= 174.951526759544   occ= 0
MO #510 energy= 174.964994229134   occ= 0
MO #511 energy= 308.448570346221   occ= 0
MO #512 energy= 308.462601299161   occ= 0
MO #513 energy= 725.229570191872   occ= 0
MO #514 energy= 725.231222629603   occ= 0
MO #515 energy= 846.745630875258   occ= 0
MO #516 energy= 846.748013529538   occ= 0
MO #517 energy= 846.78254152494    occ= 0
MO #518 energy= 846.784563278184   occ= 0
MO #519 energy= 1057.13904845768   occ= 0
MO #520 energy= 1057.14186953628   occ= 0
MO #521 energy= 2996.82672561098   occ= 0
MO #522 energy= 2996.82735336882   occ= 0
MO #523 energy= 7255.33897662741   occ= 0
MO #524 energy= 7255.33916026924   occ= 0
MO #525 energy= 15388.0039864831   occ= 0
MO #526 energy= 15388.0040491933   occ= 0
MO #527 energy= 35974.109644751    occ= 0
MO #528 energy= 35974.1096635624   occ= 0
 ** Mulliken pop alpha/beta on meta-lowdin orthogonal AOs **
 ** Mulliken pop       alpha | beta **
pop of  0 Er 1s        0.99999 | 0.99999   
pop of  0 Er 2s        1.00000 | 1.00000   
pop of  0 Er 3s        1.00000 | 1.00000   
pop of  0 Er 4s        0.99999 | 0.99999   
pop of  0 Er 5s        0.99904 | 0.99834   
pop of  0 Er 6s        0.16317 | 0.16536   
pop of  0 Er 7s        0.00853 | 0.00924   
pop of  0 Er 8s        0.00147 | 0.00160   
pop of  0 Er 9s        0.00066 | 0.00066   
pop of  0 Er 10s        0.00018 | 0.00019   
pop of  0 Er 11s        0.00037 | 0.00037   
pop of  0 Er 12s        0.00009 | 0.00009   
pop of  0 Er 13s        0.00001 | 0.00001   
pop of  0 Er 14s        0.00000 | 0.00000   
pop of  0 Er 15s        0.00000 | 0.00000   
pop of  0 Er 16s        0.00000 | 0.00000   
pop of  0 Er 17s        0.00000 | 0.00000   
pop of  0 Er 18s        0.00000 | 0.00000   
pop of  0 Er 2px       0.99884 | 0.99884   
pop of  0 Er 2py       0.99884 | 0.99884   
pop of  0 Er 2pz       0.99884 | 0.99884   
pop of  0 Er 3px       0.99858 | 0.99858   
pop of  0 Er 3py       0.99858 | 0.99858   
pop of  0 Er 3pz       0.99858 | 0.99858   
pop of  0 Er 4px       0.99814 | 0.99816   
pop of  0 Er 4py       0.99814 | 0.99816   
pop of  0 Er 4pz       0.99813 | 0.99815   
pop of  0 Er 5px       0.99584 | 0.99485   
pop of  0 Er 5py       0.99607 | 0.99515   
pop of  0 Er 5pz       0.99628 | 0.99554   
pop of  0 Er 6px       0.00895 | 0.00956   
pop of  0 Er 6py       0.00762 | 0.00822   
pop of  0 Er 6pz       0.00769 | 0.00812   
pop of  0 Er 7px       0.00731 | 0.00795   
pop of  0 Er 7py       0.00450 | 0.00506   
pop of  0 Er 7pz       0.00642 | 0.00695   
pop of  0 Er 8px       0.00559 | 0.00559   
pop of  0 Er 8py       0.00407 | 0.00406   
pop of  0 Er 8pz       0.00682 | 0.00681   
pop of  0 Er 9px       0.00128 | 0.00130   
pop of  0 Er 9py       0.00143 | 0.00144   
pop of  0 Er 9pz       0.00176 | 0.00177   
pop of  0 Er 10px       0.00051 | 0.00052   
pop of  0 Er 10py       0.00059 | 0.00060   
pop of  0 Er 10pz       0.00068 | 0.00069   
pop of  0 Er 11px       0.00085 | 0.00086   
pop of  0 Er 11py       0.00082 | 0.00083   
pop of  0 Er 11pz       0.00088 | 0.00089   
pop of  0 Er 12px       0.00073 | 0.00073   
pop of  0 Er 12py       0.00067 | 0.00067   
pop of  0 Er 12pz       0.00070 | 0.00071   
pop of  0 Er 13px       0.00171 | 0.00171   
pop of  0 Er 13py       0.00171 | 0.00171   
pop of  0 Er 13pz       0.00171 | 0.00171   
pop of  0 Er 3dxy      0.99990 | 0.99990   
pop of  0 Er 3dyz      0.99990 | 0.99990   
pop of  0 Er 3dz^2     0.99990 | 0.99990   
pop of  0 Er 3dxz      0.99990 | 0.99990   
pop of  0 Er 3dx2-y2    0.99990 | 0.99990   
pop of  0 Er 4dxy      0.99971 | 0.99970   
pop of  0 Er 4dyz      0.99971 | 0.99970   
pop of  0 Er 4dz^2     0.99971 | 0.99971   
pop of  0 Er 4dxz      0.99971 | 0.99971   
pop of  0 Er 4dx2-y2    0.99972 | 0.99970   
pop of  0 Er 5dxy      0.01615 | 0.01749   
pop of  0 Er 5dyz      0.01744 | 0.01878   
pop of  0 Er 5dz^2     0.01433 | 0.01506   
pop of  0 Er 5dxz      0.01307 | 0.01400   
pop of  0 Er 5dx2-y2    0.01378 | 0.01494   
pop of  0 Er 6dxy      0.00301 | 0.00316   
pop of  0 Er 6dyz      0.00310 | 0.00334   
pop of  0 Er 6dz^2     0.00249 | 0.00252   
pop of  0 Er 6dxz      0.00253 | 0.00264   
pop of  0 Er 6dx2-y2    0.00223 | 0.00232   
pop of  0 Er 7dxy      0.00247 | 0.00251   
pop of  0 Er 7dyz      0.00265 | 0.00269   
pop of  0 Er 7dz^2     0.00172 | 0.00174   
pop of  0 Er 7dxz      0.00190 | 0.00192   
pop of  0 Er 7dx2-y2    0.00162 | 0.00166   
pop of  0 Er 8dxy      0.00304 | 0.00306   
pop of  0 Er 8dyz      0.00290 | 0.00290   
pop of  0 Er 8dz^2     0.00279 | 0.00281   
pop of  0 Er 8dxz      0.00275 | 0.00276   
pop of  0 Er 8dx2-y2    0.00193 | 0.00195   
pop of  0 Er 9dxy      0.00302 | 0.00302   
pop of  0 Er 9dyz      0.00365 | 0.00363   
pop of  0 Er 9dz^2     0.00353 | 0.00353   
pop of  0 Er 9dxz      0.00370 | 0.00370   
pop of  0 Er 9dx2-y2    0.00223 | 0.00224   
pop of  0 Er 10dxy      0.00021 | 0.00022   
pop of  0 Er 10dyz      0.00026 | 0.00027   
pop of  0 Er 10dz^2     0.00024 | 0.00024   
pop of  0 Er 10dxz      0.00024 | 0.00024   
pop of  0 Er 10dx2-y2    0.00020 | 0.00021   
pop of  0 Er 11dxy      0.00112 | 0.00113   
pop of  0 Er 11dyz      0.00188 | 0.00189   
pop of  0 Er 11dz^2     0.00146 | 0.00146   
pop of  0 Er 11dxz      0.00153 | 0.00153   
pop of  0 Er 11dx2-y2    0.00099 | 0.00099   
pop of  0 Er 4f-3      0.51127 | 0.97792   
pop of  0 Er 4f-2      0.56024 | 0.96890   
pop of  0 Er 4f-1      0.78337 | 0.97323   
pop of  0 Er 4f+0      0.67055 | 0.96282   
pop of  0 Er 4f+1      0.60385 | 0.94895   
pop of  0 Er 4f+2      0.56351 | 0.97119   
pop of  0 Er 4f+3      0.51859 | 0.97775   
pop of  0 Er 5f-3      0.00088 | 0.00163   
pop of  0 Er 5f-2      0.00096 | 0.00170   
pop of  0 Er 5f-1      0.00065 | 0.00131   
pop of  0 Er 5f+0      0.00045 | 0.00118   
pop of  0 Er 5f+1      0.00073 | 0.00150   
pop of  0 Er 5f+2      0.00069 | 0.00142   
pop of  0 Er 5f+3      0.00079 | 0.00155   
pop of  0 Er 6f-3      0.00136 | 0.00153   
pop of  0 Er 6f-2      0.00153 | 0.00165   
pop of  0 Er 6f-1      0.00176 | 0.00189   
pop of  0 Er 6f+0      0.00181 | 0.00198   
pop of  0 Er 6f+1      0.00152 | 0.00170   
pop of  0 Er 6f+2      0.00160 | 0.00175   
pop of  0 Er 6f+3      0.00165 | 0.00183   
pop of  1 O 1s        0.99999 | 0.99999   
pop of  1 O 2s        0.86234 | 0.86227   
pop of  1 O 3s        0.00505 | 0.00511   
pop of  1 O 2px       0.78712 | 0.78710   
pop of  1 O 2py       0.89073 | 0.89058   
pop of  1 O 2pz       0.86891 | 0.86860   
pop of  1 O 3px       0.00272 | 0.00275   
pop of  1 O 3py       0.00417 | 0.00424   
pop of  1 O 3pz       0.00426 | 0.00435   
pop of  2 O 1s        0.99999 | 0.99999   
pop of  2 O 2s        0.86099 | 0.86098   
pop of  2 O 3s        0.00610 | 0.00610   
pop of  2 O 2px       0.95211 | 0.95206   
pop of  2 O 2py       0.82773 | 0.82772   
pop of  2 O 2pz       0.75530 | 0.75529   
pop of  2 O 3px       0.00541 | 0.00541   
pop of  2 O 3py       0.00310 | 0.00310   
pop of  2 O 3pz       0.00185 | 0.00186   
pop of  3 O 1s        0.99999 | 0.99999   
pop of  3 O 2s        0.86843 | 0.86835   
pop of  3 O 3s        0.00479 | 0.00485   
pop of  3 O 2px       0.78770 | 0.78757   
pop of  3 O 2py       0.85492 | 0.85459   
pop of  3 O 2pz       0.88495 | 0.88456   
pop of  3 O 3px       0.00250 | 0.00254   
pop of  3 O 3py       0.00376 | 0.00382   
pop of  3 O 3pz       0.00401 | 0.00411   
pop of  4 O 1s        0.99999 | 0.99999   
pop of  4 O 2s        0.86521 | 0.86514   
pop of  4 O 3s        0.00500 | 0.00506   
pop of  4 O 2px       0.77938 | 0.77935   
pop of  4 O 2py       0.90973 | 0.90944   
pop of  4 O 2pz       0.86766 | 0.86733   
pop of  4 O 3px       0.00270 | 0.00272   
pop of  4 O 3py       0.00461 | 0.00470   
pop of  4 O 3pz       0.00436 | 0.00446   
pop of  5 O 1s        0.99999 | 0.99999   
pop of  5 O 2s        0.85928 | 0.85927   
pop of  5 O 3s        0.00623 | 0.00624   
pop of  5 O 2px       0.94813 | 0.94807   
pop of  5 O 2py       0.81778 | 0.81778   
pop of  5 O 2pz       0.77324 | 0.77324   
pop of  5 O 3px       0.00534 | 0.00534   
pop of  5 O 3py       0.00278 | 0.00278   
pop of  5 O 3pz       0.00235 | 0.00235   
pop of  6 O 1s        0.99999 | 0.99999   
pop of  6 O 2s        0.85935 | 0.85924   
pop of  6 O 3s        0.00508 | 0.00515   
pop of  6 O 2px       0.80970 | 0.80958   
pop of  6 O 2py       0.82965 | 0.82939   
pop of  6 O 2pz       0.88164 | 0.88107   
pop of  6 O 3px       0.00266 | 0.00271   
pop of  6 O 3py       0.00314 | 0.00320   
pop of  6 O 3pz       0.00399 | 0.00410   
pop of  7 O 1s        0.99999 | 0.99999   
pop of  7 O 2s        0.86123 | 0.86113   
pop of  7 O 3s        0.00518 | 0.00526   
pop of  7 O 2px       0.93776 | 0.93714   
pop of  7 O 2py       0.83316 | 0.83287   
pop of  7 O 2pz       0.77302 | 0.77285   
pop of  7 O 3px       0.00531 | 0.00548   
pop of  7 O 3py       0.00345 | 0.00351   
pop of  7 O 3pz       0.00191 | 0.00193   
pop of  8 O 1s        0.99999 | 0.99999   
pop of  8 O 2s        0.86492 | 0.86482   
pop of  8 O 3s        0.00504 | 0.00511   
pop of  8 O 2px       0.72486 | 0.72462   
pop of  8 O 2py       0.91101 | 0.91067   
pop of  8 O 2pz       0.91783 | 0.91758   
pop of  8 O 3px       0.00125 | 0.00127   
pop of  8 O 3py       0.00483 | 0.00493   
pop of  8 O 3pz       0.00554 | 0.00565   
pop of  9 O 1s        0.99999 | 0.99999   
pop of  9 O 2s        0.86975 | 0.86961   
pop of  9 O 3s        0.00493 | 0.00501   
pop of  9 O 2px       0.71933 | 0.71909   
pop of  9 O 2py       0.91404 | 0.91344   
pop of  9 O 2pz       0.92331 | 0.92302   
pop of  9 O 3px       0.00119 | 0.00121   
pop of  9 O 3py       0.00494 | 0.00508   
pop of  9 O 3pz       0.00587 | 0.00598   
pop of  10 O 1s        0.99999 | 0.99999   
pop of  10 O 2s        0.85879 | 0.85878   
pop of  10 O 3s        0.00605 | 0.00605   
pop of  10 O 2px       0.85081 | 0.85074   
pop of  10 O 2py       0.80734 | 0.80732   
pop of  10 O 2pz       0.84972 | 0.84967   
pop of  10 O 3px       0.00277 | 0.00277   
pop of  10 O 3py       0.00257 | 0.00257   
pop of  10 O 3pz       0.00354 | 0.00354   
pop of  11 O 1s        0.99999 | 0.99999   
pop of  11 O 2s        0.86126 | 0.86115   
pop of  11 O 3s        0.00517 | 0.00525   
pop of  11 O 2px       0.93630 | 0.93567   
pop of  11 O 2py       0.83442 | 0.83412   
pop of  11 O 2pz       0.76552 | 0.76540   
pop of  11 O 3px       0.00509 | 0.00524   
pop of  11 O 3py       0.00342 | 0.00348   
pop of  11 O 3pz       0.00184 | 0.00185   
pop of  12 C 1s        0.99999 | 0.99999   
pop of  12 C 2s        0.41716 | 0.41725   
pop of  12 C 3s        0.00982 | 0.00983   
pop of  12 C 2px       0.41420 | 0.41423   
pop of  12 C 2py       0.37699 | 0.37712   
pop of  12 C 2pz       0.41049 | 0.41062   
pop of  12 C 3px       0.01874 | 0.01876   
pop of  12 C 3py       0.00442 | 0.00445   
pop of  12 C 3pz       0.01303 | 0.01310   
pop of  13 C 1s        0.99999 | 0.99999   
pop of  13 C 2s        0.41292 | 0.41304   
pop of  13 C 3s        0.01007 | 0.01009   
pop of  13 C 2px       0.41171 | 0.41175   
pop of  13 C 2py       0.38605 | 0.38620   
pop of  13 C 2pz       0.40558 | 0.40573   
pop of  13 C 3px       0.01819 | 0.01820   
pop of  13 C 3py       0.00703 | 0.00707   
pop of  13 C 3pz       0.01115 | 0.01122   
pop of  14 C 1s        0.99999 | 0.99999   
pop of  14 C 2s        0.41348 | 0.41359   
pop of  14 C 3s        0.01006 | 0.01008   
pop of  14 C 2px       0.41411 | 0.41421   
pop of  14 C 2py       0.38822 | 0.38839   
pop of  14 C 2pz       0.40137 | 0.40148   
pop of  14 C 3px       0.01699 | 0.01704   
pop of  14 C 3py       0.00662 | 0.00666   
pop of  14 C 3pz       0.01273 | 0.01276   
pop of  15 C 1s        0.99999 | 0.99999   
pop of  15 C 2s        0.41544 | 0.41557   
pop of  15 C 3s        0.01005 | 0.01007   
pop of  15 C 2px       0.41240 | 0.41250   
pop of  15 C 2py       0.38716 | 0.38734   
pop of  15 C 2pz       0.40129 | 0.40140   
pop of  15 C 3px       0.01654 | 0.01660   
pop of  15 C 3py       0.00661 | 0.00665   
pop of  15 C 3pz       0.01277 | 0.01281   
pop of  16 O 1s        0.99999 | 0.99999   
pop of  16 O 2s        0.85985 | 0.85984   
pop of  16 O 3s        0.00602 | 0.00602   
pop of  16 O 2px       0.84275 | 0.84268   
pop of  16 O 2py       0.81141 | 0.81139   
pop of  16 O 2pz       0.84949 | 0.84942   
pop of  16 O 3px       0.00264 | 0.00264   
pop of  16 O 3py       0.00266 | 0.00266   
pop of  16 O 3pz       0.00353 | 0.00353   
In total            95.20919 | 97.79081  
 ** Mulliken atomic charges   ( Nelec_alpha | Nelec_beta ) **
charge of  0Er =      2.24419  (    31.58537     34.17044 )
charge of  1O =     -0.85026  (     4.42528      4.42498 )
charge of  2O =     -0.82509  (     4.41258      4.41251 )
charge of  3O =     -0.82145  (     4.41106      4.41038 )
charge of  4O =     -0.87685  (     4.43865      4.43819 )
charge of  5O =     -0.83020  (     4.41513      4.41507 )
charge of  6O =     -0.78964  (     4.39520      4.39444 )
charge of  7O =     -0.84118  (     4.42101      4.42016 )
charge of  8O =     -0.86992  (     4.43528      4.43464 )
charge of  9O =     -0.88578  (     4.44336      4.44243 )
charge of  10O =     -0.76303  (     4.38158      4.38145 )
charge of  11O =     -0.82517  (     4.41301      4.41216 )
charge of  12C =      0.66982  (     2.66483      2.66535 )
charge of  13C =      0.67401  (     2.66269      2.66330 )
charge of  14C =      0.67223  (     2.66357      2.66420 )
charge of  15C =      0.67483  (     2.66225      2.66292 )
charge of  16O =     -0.75652  (     4.37834      4.37818 )
(3, 264, 264) 264
S vector [ 0.2936-0.j  0.5907-0.j -1.2908+0.j]
(3, 264, 264) 264
L vector [ 1.2011-0.j  2.4531+0.j -5.3761-0.j]
(3, 264, 264) 264
J vector [ 1.4947-0.j  3.0438+0.j -6.6669-0.j]
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
ao_index [ 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383]
ao_labels ['0 Er 4f-3  ' '0 Er 4f-2  ' '0 Er 4f-1  ' '0 Er 4f+0  ' '0 Er 4f+1  ' '0 Er 4f+2  ' '0 Er 4f+3  ' '0 Er 5f-3  ' '0 Er 5f-2  ' '0 Er 5f-1  ' '0 Er 5f+0  ' '0 Er 5f+1  ' '0 Er 5f+2  ' '0 Er 5f+3  ' '0 Er 6f-3  ' '0 Er 6f-2  ' '0 Er 6f-1  ' '0 Er 6f+0  ' '0 Er 6f+1  ' '0 Er 6f+2  ' '0 Er 6f+3  ']
  J     M     c^2  
rank = 0, idx_lst = [ 0 16]
rank = 11, idx_lst = [11 27]
rank = 12, idx_lst = [12 28]
rank = 3, idx_lst = [ 3 19]
rank = 1, idx_lst = [ 1 17]
rank = 7, idx_lst = [ 7 23]
rank = 9, idx_lst = [ 9 25]
rank = 10, idx_lst = [10 26]
rank = 6, idx_lst = [ 6 22]
rank = 2, idx_lst = [ 2 18]
rank = 4, idx_lst = [ 4 20]
rank = 13, idx_lst = [13]
rank = 15, idx_lst = [15]
rank = 8, idx_lst = [ 8 24]
rank = 14, idx_lst = [14]
rank = 5, idx_lst = [ 5 21]
[hpc-92-14.cm.cluster:1124565] 15 more processes have sent help message help-mpi-btl-openib.txt / error in device init
[hpc-92-14.cm.cluster:1124565] Set MCA parameter "orte_base_help_aggregate" to 0 to see all help / error messages
 7.5    4.5   -5.5   -0.00001   -0.00001
 7.5    4.5   -6.5    0.00001   -0.00001
 7.5    4.5   -7.5    0.00002    0.00001
 7.5    3.5   -4.5   -0.00002    0.00001
 7.5    3.5   -5.5   -0.00003   -0.00002
 7.5    3.5   -6.5    0.00001   -0.00006
 7.5    3.5   -7.5    0.00006   -0.00002
 7.5    2.5   -1.5   -0.00001   -0.00001
 7.5    2.5   -2.5    0.00002   -0.00001
 7.5    2.5   -3.5    0.00003    0.00002
 7.5    2.5   -4.5   -0.00002    0.00007
 7.5    2.5   -5.5   -0.00013    0.00001
 7.5    2.5   -6.5   -0.00012   -0.00017
 7.5    2.5   -7.5    0.00011   -0.00020
 7.5    1.5   -0.5   -0.00001    0.00001
 7.5    1.5   -1.5   -0.00001   -0.00000
 7.5    1.5   -2.5   -0.00001   -0.00005
 7.5    1.5   -3.5    0.00011   -0.00002
 7.5    1.5   -4.5    0.00013    0.00020
 7.5    1.5   -5.5   -0.00023    0.00038
 7.5    1.5   -6.5   -0.00068   -0.00006
 7.5    1.5   -7.5   -0.00028   -0.00073
 7.5    0.5    0.5    0.00001
 7.5    0.5   -0.5    0.00002    0.00003
 7.5    0.5   -1.5   -0.00005    0.00004
 7.5    0.5   -2.5   -0.00011   -0.00008
 7.5    0.5   -3.5    0.00011   -0.00031
 7.5    0.5   -4.5    0.00070    0.00003
 7.5    0.5   -5.5    0.00052    0.00116
 7.5    0.5   -6.5   -0.00125    0.00153
 7.5    0.5   -7.5   -0.00220   -0.00049
 7.5   -0.5   -0.5    0.00008   -0.00000
 7.5   -0.5   -1.5    0.00006    0.00016
 7.5   -0.5   -2.5   -0.00032    0.00017
 7.5   -0.5   -3.5   -0.00053   -0.00060
 7.5   -0.5   -4.5    0.00084   -0.00155
 7.5   -0.5   -5.5    0.00323    0.00016
 7.5   -0.5   -6.5    0.00206    0.00451
 7.5   -0.5   -7.5   -0.00357    0.00441
 7.5   -1.5   -1.5    0.00037   -0.00000
 7.5   -1.5   -2.5    0.00015    0.00079
 7.5   -1.5   -3.5   -0.00170    0.00070
 7.5   -1.5   -4.5   -0.00270   -0.00284
 7.5   -1.5   -5.5    0.00254   -0.00676
 7.5   -1.5   -6.5    0.01101   -0.00123
 7.5   -1.5   -7.5    0.00691    0.01067
 7.5   -2.5   -2.5    0.00177   -0.00000
 7.5   -2.5   -3.5    0.00087    0.00399
 7.5   -2.5   -4.5   -0.00732    0.00470
 7.5   -2.5   -5.5   -0.01361   -0.00822
 7.5   -2.5   -6.5    0.00183   -0.02443
 7.5   -2.5   -7.5    0.02605   -0.01070
 7.5   -3.5   -3.5    0.00942    0.00000
 7.5   -3.5   -4.5    0.00701    0.01897
 7.5   -3.5   -5.5   -0.02544    0.02662
 7.5   -3.5   -6.5   -0.05422   -0.01616
 7.5   -3.5   -7.5   -0.01116   -0.06412
 7.5   -4.5   -4.5    0.04351    0.00002
 7.5   -4.5   -5.5    0.03464    0.07141
 7.5   -4.5   -6.5   -0.07321    0.09699
 7.5   -4.5   -7.5   -0.13741   -0.02552
 7.5   -5.5   -5.5    0.14500   -0.00000
 7.5   -5.5   -6.5    0.10083    0.19790
 7.5   -5.5   -7.5   -0.15137    0.20529
 7.5   -6.5   -6.5    0.34057   -0.00003
 7.5   -6.5   -7.5    0.17489    0.34990
 7.5   -7.5   -7.5    0.44971   -0.00011
triangle [[ 0.    +0.j     -0.    -0.j      0.    -0.j     -0.    -0.j     -0.    +0.j     -0.    -0.j      0.    +0.j      0.    -0.j     -0.    +0.j      0.    +0.j      0.    -0.j     -0.    -0.j     -0.    +0.j      0.    -0.j     -0.    +0.j     -0.    +0.j    ]
 [ 0.    +0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    -0.j      0.    -0.j     -0.    +0.j      0.    +0.j     -0.    -0.j     -0.    +0.j      0.    -0.j     -0.    -0.j     -0.    -0.j      0.    +0.j     -0.    +0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    -0.j      0.    -0.j     -0.    +0.j      0.    -0.j      0.    -0.j     -0.    -0.j     -0.    +0.j      0.    -0.j      0.    +0.j      0.    +0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j     -0.    +0.j      0.    +0.j      0.    +0.j     -0.    -0.j     -0.    -0.j      0.    -0.j      0.    +0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j     -0.    +0.j     -0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    +0.j     -0.    +0.j     -0.    -0.j      0.    -0.0001j  0.0001-0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    -0.j     -0.    +0.j     -0.    -0.j      0.    +0.j     -0.    -0.j      0.    -0.j      0.    +0.j     -0.    +0.0001j -0.0001+0.j     -0.0001-0.0002j  0.0001-0.0002j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    -0.j      0.    +0.j     -0.    +0.j     -0.    -0.j     -0.    -0.0001j  0.0001-0.j      0.0001+0.0002j -0.0002+0.0004j -0.0007-0.0001j -0.0003-0.0007j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    -0.j      0.    +0.j     -0.0001+0.j     -0.0001-0.0001j  0.0001-0.0003j  0.0007+0.j      0.0005+0.0012j -0.0012+0.0015j -0.0022-0.0005j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0001-0.j      0.0001+0.0002j -0.0003+0.0002j -0.0005-0.0006j  0.0008-0.0016j  0.0032+0.0002j  0.0021+0.0045j -0.0036+0.0044j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0004-0.j      0.0002+0.0008j -0.0017+0.0007j -0.0027-0.0028j  0.0025-0.0068j  0.011 -0.0012j  0.0069+0.0107j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0018-0.j      0.0009+0.004j  -0.0073+0.0047j -0.0136-0.0082j  0.0018-0.0244j  0.0261-0.0107j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0094+0.j      0.007 +0.019j  -0.0254+0.0266j -0.0542-0.0162j -0.0112-0.0641j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0435+0.j      0.0346+0.0714j -0.0732+0.097j  -0.1374-0.0255j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.145 -0.j      0.1008+0.1979j -0.1514+0.2053j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.3406-0.j      0.1749+0.3499j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.4497-0.0001j]]
full [[ 0.    +0.j     -0.    -0.j      0.    -0.j     -0.    -0.j     -0.    +0.j     -0.    -0.j      0.    +0.j      0.    -0.j     -0.    +0.j      0.    +0.j      0.    -0.j     -0.    -0.j     -0.    +0.j      0.    -0.j     -0.    +0.j     -0.    +0.j    ]
 [-0.    +0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    -0.j      0.    -0.j     -0.    +0.j      0.    +0.j     -0.    -0.j     -0.    +0.j      0.    -0.j     -0.    -0.j     -0.    -0.j      0.    +0.j     -0.    +0.j    ]
 [ 0.    +0.j     -0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    -0.j      0.    -0.j     -0.    +0.j      0.    -0.j      0.    -0.j     -0.    -0.j     -0.    +0.j      0.    -0.j      0.    +0.j      0.    +0.j    ]
 [-0.    +0.j      0.    +0.j     -0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j     -0.    +0.j      0.    +0.j      0.    +0.j     -0.    -0.j     -0.    -0.j      0.    -0.j      0.    +0.j    ]
 [-0.    -0.j      0.    -0.j      0.    +0.j     -0.    -0.j      0.    +0.j     -0.    +0.j     -0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    +0.j     -0.    +0.j     -0.    -0.j      0.    -0.0001j  0.0001-0.j    ]
 [-0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    -0.j      0.    +0.j     -0.    +0.j     -0.    -0.j      0.    +0.j     -0.    -0.j      0.    -0.j      0.    +0.j     -0.    +0.0001j -0.0001+0.j     -0.0001-0.0002j  0.0001-0.0002j]
 [ 0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j     -0.    +0.j     -0.    -0.j      0.    +0.j      0.    +0.j     -0.    +0.j     -0.    -0.j     -0.    -0.0001j  0.0001-0.j      0.0001+0.0002j -0.0002+0.0004j -0.0007-0.0001j -0.0003-0.0007j]
 [ 0.    +0.j     -0.    -0.j      0.    +0.j     -0.    -0.j      0.    -0.j     -0.    +0.j      0.    -0.j      0.    +0.j      0.    +0.j     -0.0001+0.j     -0.0001-0.0001j  0.0001-0.0003j  0.0007+0.j      0.0005+0.0012j -0.0012+0.0015j -0.0022-0.0005j]
 [-0.    -0.j      0.    -0.j     -0.    -0.j      0.    +0.j     -0.    -0.j      0.    -0.j     -0.    -0.j      0.    -0.j      0.0001+0.j      0.0001+0.0002j -0.0003+0.0002j -0.0005-0.0006j  0.0008-0.0016j  0.0032+0.0002j  0.0021+0.0045j -0.0036+0.0044j]
 [ 0.    -0.j     -0.    +0.j      0.    +0.j     -0.    -0.j      0.    +0.j     -0.    +0.j     -0.    +0.j     -0.0001-0.j      0.0001-0.0002j  0.0004+0.j      0.0002+0.0008j -0.0017+0.0007j -0.0027-0.0028j  0.0025-0.0068j  0.011 -0.0012j  0.0069+0.0107j]
 [ 0.    +0.j     -0.    -0.j      0.    +0.j      0.    -0.j      0.    -0.j      0.    +0.j     -0.    +0.0001j -0.0001+0.0001j -0.0003-0.0002j  0.0002-0.0008j  0.0018+0.j      0.0009+0.004j  -0.0073+0.0047j -0.0136-0.0082j  0.0018-0.0244j  0.0261-0.0107j]
 [-0.    +0.j      0.    +0.j     -0.    +0.j      0.    -0.j     -0.    -0.j      0.    -0.j      0.0001+0.j      0.0001+0.0003j -0.0005+0.0006j -0.0017-0.0007j  0.0009-0.004j   0.0094+0.j      0.007 +0.019j  -0.0254+0.0266j -0.0542-0.0162j -0.0112-0.0641j]
 [-0.    -0.j     -0.    +0.j     -0.    -0.j     -0.    +0.j     -0.    -0.j     -0.    -0.0001j  0.0001-0.0002j  0.0007-0.j      0.0008+0.0016j -0.0027+0.0028j -0.0073-0.0047j  0.007 -0.019j   0.0435+0.j      0.0346+0.0714j -0.0732+0.097j  -0.1374-0.0255j]
 [ 0.    +0.j     -0.    +0.j      0.    +0.j     -0.    +0.j     -0.    +0.j     -0.0001-0.j     -0.0002-0.0004j  0.0005-0.0012j  0.0032-0.0002j  0.0025+0.0068j -0.0136+0.0082j -0.0254-0.0266j  0.0346-0.0714j  0.145 +0.j      0.1008+0.1979j -0.1514+0.2053j]
 [-0.    -0.j      0.    -0.j      0.    -0.j      0.    +0.j      0.    +0.0001j -0.0001+0.0002j -0.0007+0.0001j -0.0012-0.0015j  0.0021-0.0045j  0.011 +0.0012j  0.0018+0.0244j -0.0542+0.0162j -0.0732-0.097j   0.1008-0.1979j  0.3406+0.j      0.1749+0.3499j]
 [-0.    -0.j     -0.    -0.j      0.    -0.j      0.    -0.j      0.0001+0.j      0.0001+0.0002j -0.0003+0.0007j -0.0022+0.0005j -0.0036-0.0044j  0.0069-0.0107j  0.0261+0.0107j -0.0112+0.0641j -0.1374+0.0255j -0.1514-0.2053j  0.1749-0.3499j  0.4497+0.j    ]]
Sum of c^2 0.9904382929610382
Wed Apr 16 00:10:22 PDT 2025
