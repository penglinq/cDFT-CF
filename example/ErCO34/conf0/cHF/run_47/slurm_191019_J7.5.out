Currently Loaded Modulefiles:
 1) gmp/6.2.1-gcc-13.2.0-lcnhyse <aL>             
 2) mpfr/4.2.0-gcc-13.2.0-yy2fkq5 <aL>            
 3) mpc/1.3.1-gcc-13.2.0-5kgoftq <aL>             
 4) zlib-ng/2.1.3-gcc-13.2.0-jetnfwa <aL>         
 5) zstd/1.5.5-gcc-13.2.0-t2lua3l <aL>            
 6) gcc/13.2.0-gcc-13.2.0-w55nxkl                 
 7) cmake/3.20.2-gcc-13.2.0-rp74vpv               
 8) libfabric/1.18.1-gcc-13.2.0-bijxar4 <aL>      
 9) numactl/2.0.14-gcc-13.2.0-etkf74e <aL>        
10) openssh/8.7p1-gcc-13.2.0-g55xmkx <aL>         
11) slurm/22.05.6-gcc-13.2.0-tchsn6y <aL>         
12) openmpi/4.1.5-gcc-13.2.0-24q3ap2              
13) libpciaccess/0.17-gcc-13.2.0-r2cijnn <aL>     
14) libiconv/1.17-gcc-13.2.0-ntov4te <aL>         
15) xz/5.4.1-gcc-13.2.0-4xkm5xo <aL>              
16) libxml2/2.10.3-gcc-13.2.0-fr6jcjz <aL>        
17) ncurses/6.4-gcc-13.2.0-4o2yj6n <aL>           
18) hwloc/2.9.1-gcc-13.2.0-gzvfolk <aL>           
19) intel-tbb/2021.9.0-gcc-13.2.0-6nwk3ml <aL>    
20) intel-oneapi-mkl/2023.2.0-gcc-13.2.0-ohvyk7g  

Key:
<module-tag>  <aL>=auto-loaded  
/central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF
Wed Apr 16 00:08:27 PDT 2025
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
hpc-90-25.cm.cluster
--------------------------------------------------------------------------
WARNING: There was an error initializing an OpenFabrics device.

  Local host:   hpc-90-25
  Local device: mlx5_0
--------------------------------------------------------------------------
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:08:31 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         1.00
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     N_elec (98, 95), N_ao 264
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-66:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
[CONFIG] conf_file None
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
[INPUT] verbose = 4
[INPUT] num. atoms = 17
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf


[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0

[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************



#INFO: ******************** input file end ********************
System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
nuclear repulsion = 2660.00686642269
number of shells = 122
nuclear repulsion = 2660.00686642269
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
number of shells = 122
number of NR pGTOs = 525
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

CPU time:         0.99
CPU time:         0.99
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
N_elec (98, 95), N_ao 264
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6nuclear repulsion = 2660.00686642269
number of shells = 122

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
N_elec (98, 95), N_ao 264
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


number of NR pGTOs = 525
number of NR cGTOs = 264
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom

[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.96
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
N_elec (98, 95), N_ao 264
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0

[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
               System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

     else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.99
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
nuclear repulsion = 2660.00686642269
number of shells = 122
N_elec (98, 95), N_ao 264
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
ecp = {}
CPU time:         0.99
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
N_elec (98, 95), N_ao 264
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] num. atoms = 17
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
number of NR pGTOs = 525
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         1.00
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
PySCF version 2.5.0
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


nuclear repulsion = 2660.00686642269
number of shells = 122
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
basis = {'default': '631g', 'Er': 'sarc-dkh'}
number of NR pGTOs = 525
number of NR cGTOs = 264
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
ecp = {}
CPU time:         1.00
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
[CONFIG] conf_file None
N_elec (98, 95), N_ao 264
CPU time:         0.98
[INPUT] verbose = 4
[INPUT] num. atoms = 17
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.99
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

N_elec (98, 95), N_ao 264
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
N_elec (98, 95), N_ao 264
      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
N_elec (98, 95), N_ao 264
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] num. atoms = 17
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0

[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.98
nuclear repulsion = 2660.00686642269
N_elec (98, 95), N_ao 264
number of shells = 122
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
number of NR pGTOs = 525
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6CPU time:         1.01
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


number of NR cGTOs = 264
N_elec (98, 95), N_ao 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
CPU time:         0.97
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
N_elec (98, 95), N_ao 264
[CONFIG] conf_file None
[INPUT] verbose = 4
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     [INPUT] num. atoms = 17
   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************

[INPUT] num. electrons = 193

[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
PySCF version 2.5.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] num. electrons = 193
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.97
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

N_elec (98, 95), N_ao 264
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         1.00
N_elec (98, 95), N_ao 264
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_47/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-90-25.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:08:31 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.98
N_elec (98, 95), N_ao 264
**** MO energy ****
MO #1   energy= -2122.67984434173  occ= 1
MO #2   energy= -2122.67976609984  occ= 1
MO #3   energy= -361.386802426672  occ= 1
MO #4   energy= -361.386162842986  occ= 1
MO #5   energy= -343.310116651665  occ= 1
MO #6   energy= -343.31008487501   occ= 1
MO #7   energy= -309.245845109188  occ= 1
MO #8   energy= -309.2449835417    occ= 1
MO #9   energy= -309.241954756263  occ= 1
MO #10  energy= -309.241651145226  occ= 1
MO #11  energy= -83.0815911425425  occ= 1
MO #12  energy= -83.0020765208614  occ= 1
MO #13  energy= -75.198377111696   occ= 1
MO #14  energy= -75.178767977972   occ= 1
MO #15  energy= -67.8560724560581  occ= 1
MO #16  energy= -67.8144881553621  occ= 1
MO #17  energy= -67.7666637925007  occ= 1
MO #18  energy= -67.7169222146768  occ= 1
MO #19  energy= -54.8568714411028  occ= 1
MO #20  energy= -54.8469168441077  occ= 1
MO #21  energy= -54.8353465960425  occ= 1
MO #22  energy= -54.8308481395175  occ= 1
MO #23  energy= -53.0401947518081  occ= 1
MO #24  energy= -53.0198758633333  occ= 1
MO #25  energy= -52.9973453196721  occ= 1
MO #26  energy= -52.958325787834   occ= 1
MO #27  energy= -52.8851849101046  occ= 1
MO #28  energy= -52.8594139538972  occ= 1
MO #29  energy= -20.2080219492096  occ= 1
MO #30  energy= -20.2078923460924  occ= 1
MO #31  energy= -20.2047615841854  occ= 1
MO #32  energy= -20.204751337075   occ= 1
MO #33  energy= -20.2014758302007  occ= 1
MO #34  energy= -20.2013261694232  occ= 1
MO #35  energy= -20.1970549305818  occ= 1
MO #36  energy= -20.1970469889655  occ= 1
MO #37  energy= -20.1953674195854  occ= 1
MO #38  energy= -20.1952024012094  occ= 1
MO #39  energy= -20.1905572984797  occ= 1
MO #40  energy= -20.1903688037525  occ= 1
MO #41  energy= -20.1548511528665  occ= 1
MO #42  energy= -20.1546474128825  occ= 1
MO #43  energy= -20.1520648496615  occ= 1
MO #44  energy= -20.1518815457882  occ= 1
MO #45  energy= -20.1487244466745  occ= 1
MO #46  energy= -20.1485320556345  occ= 1
MO #47  energy= -20.1451325790761  occ= 1
MO #48  energy= -20.1449227675138  occ= 1
MO #49  energy= -20.1392747781255  occ= 1
MO #50  energy= -20.1392652681608  occ= 1
MO #51  energy= -20.1318197761102  occ= 1
MO #52  energy= -20.1318078635102  occ= 1
MO #53  energy= -17.400284620978   occ= 1
MO #54  energy= -17.1983541080535  occ= 1
MO #55  energy= -14.1619455185808  occ= 1
MO #56  energy= -14.1009633637147  occ= 1
MO #57  energy= -12.5227413587283  occ= 1
MO #58  energy= -12.441513562981   occ= 1
MO #59  energy= -12.3243829982668  occ= 1
MO #60  energy= -12.1973739018558  occ= 1
MO #61  energy= -11.0732837239553  occ= 1
MO #62  energy= -11.0732658933364  occ= 1
MO #63  energy= -11.0673825051749  occ= 1
MO #64  energy= -11.0673573086951  occ= 1
MO #65  energy= -11.0163002316433  occ= 1
MO #66  energy= -11.0162734458992  occ= 1
MO #67  energy= -11.0115540829296  occ= 1
MO #68  energy= -11.0115277201325  occ= 1
MO #69  energy= -7.28558098546928  occ= 1
MO #70  energy= -7.23719323972294  occ= 1
MO #71  energy= -7.22293401063014  occ= 1
MO #72  energy= -7.20261547298746  occ= 1
MO #73  energy= -6.94560427518472  occ= 1
MO #74  energy= -6.89997693077502  occ= 1
MO #75  energy= -6.83973608929326  occ= 1
MO #76  energy= -6.70708401442827  occ= 1
MO #77  energy= -6.47051894091059  occ= 1
MO #78  energy= -6.40403884353876  occ= 1
MO #79  energy= -2.10109863242402  occ= 1
MO #80  energy= -2.03004231878602  occ= 1
MO #81  energy= -1.13191512259817  occ= 1
MO #82  energy= -1.1240733932967   occ= 1
MO #83  energy= -1.11094028208692  occ= 1
MO #84  energy= -1.11067705705551  occ= 1
MO #85  energy= -1.09211474141516  occ= 1
MO #86  energy= -1.0837025493955   occ= 1
MO #87  energy= -1.05636851919743  occ= 1
MO #88  energy= -1.05597809311192  occ= 1
MO #89  energy= -1.04476561591617  occ= 1
MO #90  energy= -1.04014555353482  occ= 1
MO #91  energy= -0.970333349119033 occ= 1
MO #92  energy= -0.969410748523152 occ= 1
MO #93  energy= -0.965017433922294 occ= 1
MO #94  energy= -0.961888331786655 occ= 1
MO #95  energy= -0.948117013929169 occ= 1
MO #96  energy= -0.947470429299883 occ= 1
MO #97  energy= -0.944448881105512 occ= 1
MO #98  energy= -0.944046135025469 occ= 1
MO #99  energy= -0.915544530990307 occ= 1
MO #100 energy= -0.913678974482806 occ= 1
MO #101 energy= -0.908465432894118 occ= 1
MO #102 energy= -0.905467366467556 occ= 1
MO #103 energy= -0.896348758946648 occ= 1
MO #104 energy= -0.895441240203137 occ= 1
MO #105 energy= -0.891868949541363 occ= 1
MO #106 energy= -0.891194748080912 occ= 1
MO #107 energy= -0.849950731154104 occ= 1
MO #108 energy= -0.834447076179395 occ= 1
MO #109 energy= -0.812123514102611 occ= 1
MO #110 energy= -0.793860283495368 occ= 1
MO #111 energy= -0.463969289566772 occ= 1
MO #112 energy= -0.441185493742748 occ= 1
MO #113 energy= -0.417567622112441 occ= 1
MO #114 energy= -0.414633181151545 occ= 1
MO #115 energy= -0.405088865788983 occ= 1
MO #116 energy= -0.404399312974722 occ= 1
MO #117 energy= -0.392441011796277 occ= 1
MO #118 energy= -0.390526636035443 occ= 1
MO #119 energy= -0.387908526285004 occ= 1
MO #120 energy= -0.382939952110571 occ= 1
MO #121 energy= -0.381329222102064 occ= 1
MO #122 energy= -0.367608172087504 occ= 1
MO #123 energy= -0.340025511025729 occ= 1
MO #124 energy= -0.333019510639805 occ= 1
MO #125 energy= -0.332918019971202 occ= 1
MO #126 energy= -0.327354407989061 occ= 1
MO #127 energy= -0.326971138658538 occ= 1
MO #128 energy= -0.307813956732895 occ= 1
MO #129 energy= -0.307605398736758 occ= 1
MO #130 energy= -0.306315913605533 occ= 1
MO #131 energy= -0.305620536631792 occ= 1
MO #132 energy= -0.303151737179306 occ= 1
MO #133 energy= -0.302488665860193 occ= 1
MO #134 energy= -0.299787796680324 occ= 1
MO #135 energy= -0.299452801876277 occ= 1
MO #136 energy= -0.288158702302097 occ= 1
MO #137 energy= -0.287764397112029 occ= 1
MO #138 energy= -0.279966472389493 occ= 1
MO #139 energy= -0.2790332794367   occ= 1
MO #140 energy= -0.25920270372904  occ= 1
MO #141 energy= -0.254821119049161 occ= 1
MO #142 energy= -0.252214532202253 occ= 1
MO #143 energy= -0.252042897752004 occ= 1
MO #144 energy= -0.249347120832228 occ= 1
MO #145 energy= -0.246099429455711 occ= 1
MO #146 energy= -0.243401761264242 occ= 1
MO #147 energy= -0.241642298095565 occ= 1
MO #148 energy= -0.239436731872617 occ= 1
MO #149 energy= -0.238508343768749 occ= 1
MO #150 energy= -0.228455781933348 occ= 1
MO #151 energy= -0.228067360340354 occ= 1
MO #152 energy= -0.220714600498309 occ= 1
MO #153 energy= -0.220392940113645 occ= 1
MO #154 energy= -0.148786565725903 occ= 1
MO #155 energy= -0.148034335991387 occ= 1
MO #156 energy= -0.133804921713303 occ= 1
MO #157 energy= -0.133324625876482 occ= 1
MO #158 energy= -0.11890644699695  occ= 1
MO #159 energy= -0.118710864325766 occ= 1
MO #160 energy= -0.113012507550033 occ= 1
MO #161 energy= -0.112804035596078 occ= 1
MO #162 energy= -0.100822947845297 occ= 1
MO #163 energy= -0.100748483450004 occ= 1
MO #164 energy= -0.0969627247854977 occ= 1
MO #165 energy= -0.0968775416262742 occ= 1
MO #166 energy= -0.089830050948784 occ= 1
MO #167 energy= -0.0894916219754132 occ= 1
MO #168 energy= -0.0840728636024841 occ= 1
MO #169 energy= -0.0838924603712555 occ= 1
MO #170 energy= -0.0829563248541748 occ= 1
MO #171 energy= -0.08253683805717  occ= 1
MO #172 energy= -0.0791115814411408 occ= 1
MO #173 energy= -0.0786566054131047 occ= 1
MO #174 energy= -0.0740836093457964 occ= 1
MO #175 energy= -0.0737725100039557 occ= 1
MO #176 energy= -0.072628993783871 occ= 1
MO #177 energy= -0.0720694170766966 occ= 1
MO #178 energy= -0.0587973485577582 occ= 1
MO #179 energy= -0.0583801867160491 occ= 1
MO #180 energy= -0.0544343244262611 occ= 1
MO #181 energy= -0.054296411633426 occ= 1
MO #182 energy= -0.0439773322805217 occ= 1
MO #183 energy= -0.0436212781716579 occ= 1
MO #184 energy= -0.0417274600488213 occ= 1
MO #185 energy= -0.0413272457442317 occ= 1
MO #186 energy= -0.0301715927916492 occ= 1
MO #187 energy= -0.0300764574713162 occ= 1
MO #188 energy= -0.0218319238508788 occ= 1
MO #189 energy= -0.0216222064334684 occ= 1
MO #190 energy= -0.0187909515680158 occ= 1
MO #191 energy= -0.018343337206174 occ= 1
MO #192 energy= -0.014613661877666 occ= 1
MO #193 energy= -0.0142224493483823 occ= 1
MO #194 energy= 0.259544376854469  occ= 0
MO #195 energy= 0.259546927679844  occ= 0
MO #196 energy= 0.272792012492264  occ= 0
MO #197 energy= 0.272793235638237  occ= 0
MO #198 energy= 0.290406783731101  occ= 0
MO #199 energy= 0.290416082683943  occ= 0
MO #200 energy= 0.29450690861464   occ= 0
MO #201 energy= 0.29451006714969   occ= 0
MO #202 energy= 0.306674456283388  occ= 0
MO #203 energy= 0.306682823999449  occ= 0
MO #204 energy= 0.309720686354345  occ= 0
MO #205 energy= 0.309725346376091  occ= 0
MO #206 energy= 0.329392565081835  occ= 0
MO #207 energy= 0.329398452269882  occ= 0
MO #208 energy= 0.371777007544269  occ= 0
MO #209 energy= 0.371785377564568  occ= 0
MO #210 energy= 0.381493337356071  occ= 0
MO #211 energy= 0.381508188061094  occ= 0
MO #212 energy= 0.55305434090496   occ= 0
MO #213 energy= 0.553341003986304  occ= 0
MO #214 energy= 0.556898334590853  occ= 0
MO #215 energy= 0.557046429565186  occ= 0
MO #216 energy= 0.574605360722825  occ= 0
MO #217 energy= 0.574743742921212  occ= 0
MO #218 energy= 0.58173516573566   occ= 0
MO #219 energy= 0.582286683085907  occ= 0
MO #220 energy= 0.585720100387597  occ= 0
MO #221 energy= 0.58613463608055   occ= 0
MO #222 energy= 0.592030605343439  occ= 0
MO #223 energy= 0.592400806034291  occ= 0
MO #224 energy= 0.606631936884674  occ= 0
MO #225 energy= 0.60668876354672   occ= 0
MO #226 energy= 0.618558897677628  occ= 0
MO #227 energy= 0.621984999757941  occ= 0
MO #228 energy= 0.634851165869701  occ= 0
MO #229 energy= 0.635974695886386  occ= 0
MO #230 energy= 0.640119206502053  occ= 0
MO #231 energy= 0.641452649793354  occ= 0
MO #232 energy= 0.651636889533966  occ= 0
MO #233 energy= 0.651807206546666  occ= 0
MO #234 energy= 0.655729991934327  occ= 0
MO #235 energy= 0.65619192772868   occ= 0
MO #236 energy= 0.661142762924344  occ= 0
MO #237 energy= 0.663862350224179  occ= 0
MO #238 energy= 0.665574472788657  occ= 0
MO #239 energy= 0.66809859770612   occ= 0
MO #240 energy= 0.689375390326946  occ= 0
MO #241 energy= 0.695772646114198  occ= 0
MO #242 energy= 0.704740706731453  occ= 0
MO #243 energy= 0.708128242116847  occ= 0
MO #244 energy= 0.71750428538289   occ= 0
MO #245 energy= 0.732297714575387  occ= 0
MO #246 energy= 0.760842394234836  occ= 0
MO #247 energy= 0.780561355709132  occ= 0
MO #248 energy= 0.860402983164205  occ= 0
MO #249 energy= 0.861067385426475  occ= 0
MO #250 energy= 0.865741261113501  occ= 0
MO #251 energy= 0.867148530521441  occ= 0
MO #252 energy= 0.876602303908916  occ= 0
MO #253 energy= 0.877099879323862  occ= 0
MO #254 energy= 0.89263444047308   occ= 0
MO #255 energy= 0.908655685103105  occ= 0
MO #256 energy= 0.914170890162576  occ= 0
MO #257 energy= 0.920020326433244  occ= 0
MO #258 energy= 0.927041194050772  occ= 0
MO #259 energy= 0.929179292289294  occ= 0
MO #260 energy= 0.934959116428627  occ= 0
MO #261 energy= 0.938801523297878  occ= 0
MO #262 energy= 0.941241180797793  occ= 0
MO #263 energy= 0.949545333010828  occ= 0
MO #264 energy= 0.952251387275237  occ= 0
MO #265 energy= 0.95594495621812   occ= 0
MO #266 energy= 0.961358519591316  occ= 0
MO #267 energy= 0.972765702980858  occ= 0
MO #268 energy= 0.97844873808565   occ= 0
MO #269 energy= 0.987473076117015  occ= 0
MO #270 energy= 0.990561413482568  occ= 0
MO #271 energy= 0.993946015103143  occ= 0
MO #272 energy= 0.997036799361554  occ= 0
MO #273 energy= 1.00375898831059   occ= 0
MO #274 energy= 1.00670596924737   occ= 0
MO #275 energy= 1.03131303969979   occ= 0
MO #276 energy= 1.03417352458715   occ= 0
MO #277 energy= 1.04302166765102   occ= 0
MO #278 energy= 1.04533316211788   occ= 0
MO #279 energy= 1.04789557193147   occ= 0
MO #280 energy= 1.04953356653097   occ= 0
MO #281 energy= 1.07933798969002   occ= 0
MO #282 energy= 1.0809711717815    occ= 0
MO #283 energy= 1.08624396681589   occ= 0
MO #284 energy= 1.09008718602586   occ= 0
MO #285 energy= 1.09096362885674   occ= 0
MO #286 energy= 1.09351704842118   occ= 0
MO #287 energy= 1.09839562003546   occ= 0
MO #288 energy= 1.11503385896806   occ= 0
MO #289 energy= 1.11817563913101   occ= 0
MO #290 energy= 1.12375557056172   occ= 0
MO #291 energy= 1.15766125386609   occ= 0
MO #292 energy= 1.16419945822719   occ= 0
MO #293 energy= 1.17161522421104   occ= 0
MO #294 energy= 1.17551398922097   occ= 0
MO #295 energy= 1.19551008658684   occ= 0
MO #296 energy= 1.19787665332927   occ= 0
MO #297 energy= 1.21001513111672   occ= 0
MO #298 energy= 1.21288363097568   occ= 0
MO #299 energy= 1.22005190509958   occ= 0
MO #300 energy= 1.22274511883804   occ= 0
MO #301 energy= 1.23025294480066   occ= 0
MO #302 energy= 1.2346123345386    occ= 0
MO #303 energy= 1.25427367784585   occ= 0
MO #304 energy= 1.25963585429918   occ= 0
MO #305 energy= 1.26335066369271   occ= 0
MO #306 energy= 1.26760527927243   occ= 0
MO #307 energy= 1.27509210717268   occ= 0
MO #308 energy= 1.2775643177068    occ= 0
MO #309 energy= 1.28714278842755   occ= 0
MO #310 energy= 1.2925738034572    occ= 0
MO #311 energy= 1.29728071545869   occ= 0
MO #312 energy= 1.30006091835652   occ= 0
MO #313 energy= 1.30758835262713   occ= 0
MO #314 energy= 1.31124750865107   occ= 0
MO #315 energy= 1.3298664126415    occ= 0
MO #316 energy= 1.33220363480459   occ= 0
MO #317 energy= 1.34575911273717   occ= 0
MO #318 energy= 1.34613355812082   occ= 0
MO #319 energy= 1.3761143527407    occ= 0
MO #320 energy= 1.38570191225237   occ= 0
MO #321 energy= 1.39619709487152   occ= 0
MO #322 energy= 1.4045516000697    occ= 0
MO #323 energy= 1.45462460382126   occ= 0
MO #324 energy= 1.46173664866045   occ= 0
MO #325 energy= 1.47407860013567   occ= 0
MO #326 energy= 1.4821902678691    occ= 0
MO #327 energy= 1.49133450841086   occ= 0
MO #328 energy= 1.5008279747347    occ= 0
MO #329 energy= 1.52449211494213   occ= 0
MO #330 energy= 1.5275609812766    occ= 0
MO #331 energy= 1.56091015106692   occ= 0
MO #332 energy= 1.56164059433782   occ= 0
MO #333 energy= 1.57800614428451   occ= 0
MO #334 energy= 1.57906313587365   occ= 0
MO #335 energy= 1.58226988824754   occ= 0
MO #336 energy= 1.58328108777349   occ= 0
MO #337 energy= 1.59880575522793   occ= 0
MO #338 energy= 1.60014240754795   occ= 0
MO #339 energy= 1.62454681642254   occ= 0
MO #340 energy= 1.62554495831016   occ= 0
MO #341 energy= 1.62905206503659   occ= 0
MO #342 energy= 1.63535845971225   occ= 0
MO #343 energy= 1.64526348263865   occ= 0
MO #344 energy= 1.64690302100282   occ= 0
MO #345 energy= 1.6630428888378    occ= 0
MO #346 energy= 1.66533368150767   occ= 0
MO #347 energy= 1.66908324016279   occ= 0
MO #348 energy= 1.66962741806176   occ= 0
MO #349 energy= 1.67490284750293   occ= 0
MO #350 energy= 1.67581385731947   occ= 0
MO #351 energy= 1.68217113704158   occ= 0
MO #352 energy= 1.68276862187596   occ= 0
MO #353 energy= 1.69196744801646   occ= 0
MO #354 energy= 1.69259057830655   occ= 0
MO #355 energy= 1.69551786359713   occ= 0
MO #356 energy= 1.69748814737197   occ= 0
MO #357 energy= 1.7010657333631    occ= 0
MO #358 energy= 1.70241306865531   occ= 0
MO #359 energy= 1.70737673568415   occ= 0
MO #360 energy= 1.70895747942274   occ= 0
MO #361 energy= 1.7114595417571    occ= 0
MO #362 energy= 1.71402014161452   occ= 0
MO #363 energy= 1.72548434235738   occ= 0
MO #364 energy= 1.72686347325134   occ= 0
MO #365 energy= 1.73931010500578   occ= 0
MO #366 energy= 1.74104142874426   occ= 0
MO #367 energy= 1.75761048479953   occ= 0
MO #368 energy= 1.75989038882022   occ= 0
MO #369 energy= 1.76484249650859   occ= 0
MO #370 energy= 1.76653577990599   occ= 0
MO #371 energy= 1.77450568024658   occ= 0
MO #372 energy= 1.77640882237284   occ= 0
MO #373 energy= 1.78121307827119   occ= 0
MO #374 energy= 1.78137276869414   occ= 0
MO #375 energy= 1.79077131485412   occ= 0
MO #376 energy= 1.79092107342359   occ= 0
MO #377 energy= 1.804677492679     occ= 0
MO #378 energy= 1.80475955098776   occ= 0
MO #379 energy= 1.83191524175285   occ= 0
MO #380 energy= 1.83470751780421   occ= 0
MO #381 energy= 1.84827411244178   occ= 0
MO #382 energy= 1.8512454279779    occ= 0
MO #383 energy= 1.85747612496844   occ= 0
MO #384 energy= 1.86363249964341   occ= 0
MO #385 energy= 1.86758431933558   occ= 0
MO #386 energy= 1.87046226055103   occ= 0
MO #387 energy= 1.87627217468159   occ= 0
MO #388 energy= 1.87731982010379   occ= 0
MO #389 energy= 1.88515532168747   occ= 0
MO #390 energy= 1.88885298425507   occ= 0
MO #391 energy= 1.93004639544931   occ= 0
MO #392 energy= 1.93088911802938   occ= 0
MO #393 energy= 1.93334151448129   occ= 0
MO #394 energy= 1.94110203321503   occ= 0
MO #395 energy= 1.98870831976589   occ= 0
MO #396 energy= 1.99017408080839   occ= 0
MO #397 energy= 2.0144959207575    occ= 0
MO #398 energy= 2.0168799418848    occ= 0
MO #399 energy= 2.04166633826857   occ= 0
MO #400 energy= 2.04374487680583   occ= 0
MO #401 energy= 2.05891742145674   occ= 0
MO #402 energy= 2.06878294103917   occ= 0
MO #403 energy= 2.08692327770622   occ= 0
MO #404 energy= 2.09119633489483   occ= 0
MO #405 energy= 2.10186057684491   occ= 0
MO #406 energy= 2.10955848266681   occ= 0
MO #407 energy= 2.12856038645754   occ= 0
MO #408 energy= 2.13851199990443   occ= 0
MO #409 energy= 2.14194215493788   occ= 0
MO #410 energy= 2.14447830441706   occ= 0
MO #411 energy= 2.15943726617002   occ= 0
MO #412 energy= 2.16457355240134   occ= 0
MO #413 energy= 2.18631591956127   occ= 0
MO #414 energy= 2.20265355238858   occ= 0
MO #415 energy= 2.21091617536664   occ= 0
MO #416 energy= 2.21881398584463   occ= 0
MO #417 energy= 2.22700745742209   occ= 0
MO #418 energy= 2.27089473398814   occ= 0
MO #419 energy= 2.29693934671472   occ= 0
MO #420 energy= 2.30674849272064   occ= 0
MO #421 energy= 2.31145578964527   occ= 0
MO #422 energy= 2.32534861381386   occ= 0
MO #423 energy= 2.3333945893334    occ= 0
MO #424 energy= 2.34638644512195   occ= 0
MO #425 energy= 2.35942806065011   occ= 0
MO #426 energy= 2.39524677495669   occ= 0
MO #427 energy= 2.43232209326823   occ= 0
MO #428 energy= 2.43750945693121   occ= 0
MO #429 energy= 2.45421796950617   occ= 0
MO #430 energy= 2.46425233836253   occ= 0
MO #431 energy= 2.53115007484428   occ= 0
MO #432 energy= 2.55283476455122   occ= 0
MO #433 energy= 2.62845391311406   occ= 0
MO #434 energy= 2.6365612661856    occ= 0
MO #435 energy= 2.66429198005601   occ= 0
MO #436 energy= 2.66788176812037   occ= 0
MO #437 energy= 2.6933927840777    occ= 0
MO #438 energy= 2.69744673177034   occ= 0
MO #439 energy= 2.70694504437405   occ= 0
MO #440 energy= 2.71334645626142   occ= 0
MO #441 energy= 2.72947867046642   occ= 0
MO #442 energy= 2.73192687372061   occ= 0
MO #443 energy= 2.7536079614764    occ= 0
MO #444 energy= 2.75695432137727   occ= 0
MO #445 energy= 2.7739881384608    occ= 0
MO #446 energy= 2.77636414999419   occ= 0
MO #447 energy= 2.81828488214012   occ= 0
MO #448 energy= 2.81989213690716   occ= 0
MO #449 energy= 2.87261211714548   occ= 0
MO #450 energy= 2.87353712684501   occ= 0
MO #451 energy= 2.94050330971811   occ= 0
MO #452 energy= 2.94597034733788   occ= 0
MO #453 energy= 2.97303401353825   occ= 0
MO #454 energy= 2.97357762336269   occ= 0
MO #455 energy= 3.01959171754064   occ= 0
MO #456 energy= 3.02007095738457   occ= 0
MO #457 energy= 3.33428439975582   occ= 0
MO #458 energy= 3.36438883542238   occ= 0
MO #459 energy= 3.39239410457984   occ= 0
MO #460 energy= 3.40442265044957   occ= 0
MO #461 energy= 3.46058545954294   occ= 0
MO #462 energy= 3.46427838848374   occ= 0
MO #463 energy= 3.48860616189557   occ= 0
MO #464 energy= 3.52323852443016   occ= 0
MO #465 energy= 3.8075092818643    occ= 0
MO #466 energy= 3.84439384184385   occ= 0
MO #467 energy= 5.17897715739967   occ= 0
MO #468 energy= 5.21270790665322   occ= 0
MO #469 energy= 6.48624646288364   occ= 0
MO #470 energy= 6.51015189707088   occ= 0
MO #471 energy= 7.04349335557944   occ= 0
MO #472 energy= 7.08718440799548   occ= 0
MO #473 energy= 7.1576461017556    occ= 0
MO #474 energy= 7.168663405957     occ= 0
MO #475 energy= 12.729697337278    occ= 0
MO #476 energy= 12.7542947419188   occ= 0
MO #477 energy= 12.7858703882427   occ= 0
MO #478 energy= 12.8086520821699   occ= 0
MO #479 energy= 13.0793142991589   occ= 0
MO #480 energy= 13.1123196863183   occ= 0
MO #481 energy= 13.1456607061443   occ= 0
MO #482 energy= 13.1931692676673   occ= 0
MO #483 energy= 13.2795626196603   occ= 0
MO #484 energy= 13.3504825296735   occ= 0
MO #485 energy= 18.0961478062108   occ= 0
MO #486 energy= 18.1550162081906   occ= 0
MO #487 energy= 29.6661725325516   occ= 0
MO #488 energy= 29.6921157665963   occ= 0
MO #489 energy= 33.1925097718525   occ= 0
MO #490 energy= 33.2495247625863   occ= 0
MO #491 energy= 33.3100431106252   occ= 0
MO #492 energy= 33.3212014417057   occ= 0
MO #493 energy= 65.2871861424762   occ= 0
MO #494 energy= 65.3035536357339   occ= 0
MO #495 energy= 65.3463063985313   occ= 0
MO #496 energy= 65.351723714577    occ= 0
MO #497 energy= 67.7896884731339   occ= 0
MO #498 energy= 67.8177793113089   occ= 0
MO #499 energy= 67.837090120951    occ= 0
MO #500 energy= 67.8572875329892   occ= 0
MO #501 energy= 67.8960392155178   occ= 0
MO #502 energy= 67.9260639123466   occ= 0
MO #503 energy= 75.5545544807293   occ= 0
MO #504 energy= 75.5999556738306   occ= 0
MO #505 energy= 158.595821995687   occ= 0
MO #506 energy= 158.605908806894   occ= 0
MO #507 energy= 174.888889761682   occ= 0
MO #508 energy= 174.910216131602   occ= 0
MO #509 energy= 174.959209704118   occ= 0
MO #510 energy= 174.963717598901   occ= 0
MO #511 energy= 308.448582120394   occ= 0
MO #512 energy= 308.462611891136   occ= 0
MO #513 energy= 725.22958058543    occ= 0
MO #514 energy= 725.231234247526   occ= 0
MO #515 energy= 846.744307368566   occ= 0
MO #516 energy= 846.747053987874   occ= 0
MO #517 energy= 846.784436784358   occ= 0
MO #518 energy= 846.785002128707   occ= 0
MO #519 energy= 1057.13906045574   occ= 0
MO #520 energy= 1057.14188151037   occ= 0
MO #521 energy= 2996.8267383996    occ= 0
MO #522 energy= 2996.82736623364   occ= 0
MO #523 energy= 7255.33899006994   occ= 0
MO #524 energy= 7255.33917376387   occ= 0
MO #525 energy= 15388.0040003064   occ= 0
MO #526 energy= 15388.0040630551   occ= 0
MO #527 energy= 35974.1096587429   occ= 0
MO #528 energy= 35974.1096775889   occ= 0
 ** Mulliken pop alpha/beta on meta-lowdin orthogonal AOs **
 ** Mulliken pop       alpha | beta **
pop of  0 Er 1s        0.99999 | 0.99999   
pop of  0 Er 2s        1.00000 | 1.00000   
pop of  0 Er 3s        1.00000 | 1.00000   
pop of  0 Er 4s        0.99999 | 0.99999   
pop of  0 Er 5s        0.99880 | 0.99858   
pop of  0 Er 6s        0.16391 | 0.16460   
pop of  0 Er 7s        0.00877 | 0.00899   
pop of  0 Er 8s        0.00152 | 0.00156   
pop of  0 Er 9s        0.00066 | 0.00066   
pop of  0 Er 10s        0.00018 | 0.00019   
pop of  0 Er 11s        0.00037 | 0.00037   
pop of  0 Er 12s        0.00009 | 0.00009   
pop of  0 Er 13s        0.00001 | 0.00001   
pop of  0 Er 14s        0.00000 | 0.00000   
pop of  0 Er 15s        0.00000 | 0.00000   
pop of  0 Er 16s        0.00000 | 0.00000   
pop of  0 Er 17s        0.00000 | 0.00000   
pop of  0 Er 18s        0.00000 | 0.00000   
pop of  0 Er 2px       0.99884 | 0.99884   
pop of  0 Er 2py       0.99884 | 0.99884   
pop of  0 Er 2pz       0.99884 | 0.99884   
pop of  0 Er 3px       0.99858 | 0.99858   
pop of  0 Er 3py       0.99858 | 0.99858   
pop of  0 Er 3pz       0.99858 | 0.99858   
pop of  0 Er 4px       0.99815 | 0.99815   
pop of  0 Er 4py       0.99814 | 0.99814   
pop of  0 Er 4pz       0.99815 | 0.99815   
pop of  0 Er 5px       0.99550 | 0.99518   
pop of  0 Er 5py       0.99605 | 0.99578   
pop of  0 Er 5pz       0.99574 | 0.99549   
pop of  0 Er 6px       0.00917 | 0.00936   
pop of  0 Er 6py       0.00763 | 0.00782   
pop of  0 Er 6pz       0.00801 | 0.00815   
pop of  0 Er 7px       0.00754 | 0.00774   
pop of  0 Er 7py       0.00450 | 0.00466   
pop of  0 Er 7pz       0.00681 | 0.00698   
pop of  0 Er 8px       0.00559 | 0.00559   
pop of  0 Er 8py       0.00406 | 0.00405   
pop of  0 Er 8pz       0.00683 | 0.00683   
pop of  0 Er 9px       0.00128 | 0.00129   
pop of  0 Er 9py       0.00143 | 0.00144   
pop of  0 Er 9pz       0.00176 | 0.00176   
pop of  0 Er 10px       0.00051 | 0.00052   
pop of  0 Er 10py       0.00059 | 0.00059   
pop of  0 Er 10pz       0.00068 | 0.00068   
pop of  0 Er 11px       0.00086 | 0.00086   
pop of  0 Er 11py       0.00082 | 0.00082   
pop of  0 Er 11pz       0.00088 | 0.00089   
pop of  0 Er 12px       0.00073 | 0.00073   
pop of  0 Er 12py       0.00067 | 0.00067   
pop of  0 Er 12pz       0.00071 | 0.00071   
pop of  0 Er 13px       0.00171 | 0.00171   
pop of  0 Er 13py       0.00171 | 0.00171   
pop of  0 Er 13pz       0.00171 | 0.00171   
pop of  0 Er 3dxy      0.99990 | 0.99990   
pop of  0 Er 3dyz      0.99990 | 0.99990   
pop of  0 Er 3dz^2     0.99990 | 0.99990   
pop of  0 Er 3dxz      0.99990 | 0.99990   
pop of  0 Er 3dx2-y2    0.99990 | 0.99990   
pop of  0 Er 4dxy      0.99971 | 0.99970   
pop of  0 Er 4dyz      0.99971 | 0.99971   
pop of  0 Er 4dz^2     0.99971 | 0.99971   
pop of  0 Er 4dxz      0.99971 | 0.99971   
pop of  0 Er 4dx2-y2    0.99971 | 0.99970   
pop of  0 Er 5dxy      0.01629 | 0.01675   
pop of  0 Er 5dyz      0.01790 | 0.01831   
pop of  0 Er 5dz^2     0.01484 | 0.01510   
pop of  0 Er 5dxz      0.01359 | 0.01388   
pop of  0 Er 5dx2-y2    0.01401 | 0.01435   
pop of  0 Er 6dxy      0.00304 | 0.00309   
pop of  0 Er 6dyz      0.00318 | 0.00326   
pop of  0 Er 6dz^2     0.00252 | 0.00252   
pop of  0 Er 6dxz      0.00259 | 0.00262   
pop of  0 Er 6dx2-y2    0.00226 | 0.00229   
pop of  0 Er 7dxy      0.00246 | 0.00248   
pop of  0 Er 7dyz      0.00266 | 0.00267   
pop of  0 Er 7dz^2     0.00175 | 0.00175   
pop of  0 Er 7dxz      0.00192 | 0.00193   
pop of  0 Er 7dx2-y2    0.00163 | 0.00164   
pop of  0 Er 8dxy      0.00304 | 0.00305   
pop of  0 Er 8dyz      0.00290 | 0.00290   
pop of  0 Er 8dz^2     0.00281 | 0.00281   
pop of  0 Er 8dxz      0.00275 | 0.00276   
pop of  0 Er 8dx2-y2    0.00194 | 0.00194   
pop of  0 Er 9dxy      0.00302 | 0.00302   
pop of  0 Er 9dyz      0.00364 | 0.00364   
pop of  0 Er 9dz^2     0.00353 | 0.00353   
pop of  0 Er 9dxz      0.00369 | 0.00369   
pop of  0 Er 9dx2-y2    0.00224 | 0.00224   
pop of  0 Er 10dxy      0.00021 | 0.00021   
pop of  0 Er 10dyz      0.00027 | 0.00027   
pop of  0 Er 10dz^2     0.00024 | 0.00024   
pop of  0 Er 10dxz      0.00024 | 0.00024   
pop of  0 Er 10dx2-y2    0.00020 | 0.00021   
pop of  0 Er 11dxy      0.00112 | 0.00113   
pop of  0 Er 11dyz      0.00188 | 0.00189   
pop of  0 Er 11dz^2     0.00146 | 0.00146   
pop of  0 Er 11dxz      0.00153 | 0.00153   
pop of  0 Er 11dx2-y2    0.00099 | 0.00099   
pop of  0 Er 4f-3      0.81088 | 0.92333   
pop of  0 Er 4f-2      0.68820 | 0.79819   
pop of  0 Er 4f-1      0.75922 | 0.82152   
pop of  0 Er 4f+0      0.72669 | 0.83264   
pop of  0 Er 4f+1      0.69438 | 0.79408   
pop of  0 Er 4f+2      0.75412 | 0.87385   
pop of  0 Er 4f+3      0.65830 | 0.85672   
pop of  0 Er 5f-3      0.00093 | 0.00115   
pop of  0 Er 5f-2      0.00123 | 0.00147   
pop of  0 Er 5f-1      0.00092 | 0.00115   
pop of  0 Er 5f+0      0.00088 | 0.00111   
pop of  0 Er 5f+1      0.00121 | 0.00145   
pop of  0 Er 5f+2      0.00091 | 0.00114   
pop of  0 Er 5f+3      0.00082 | 0.00107   
pop of  0 Er 6f-3      0.00136 | 0.00141   
pop of  0 Er 6f-2      0.00157 | 0.00161   
pop of  0 Er 6f-1      0.00181 | 0.00185   
pop of  0 Er 6f+0      0.00192 | 0.00198   
pop of  0 Er 6f+1      0.00164 | 0.00169   
pop of  0 Er 6f+2      0.00163 | 0.00168   
pop of  0 Er 6f+3      0.00164 | 0.00170   
pop of  1 O 1s        0.99999 | 0.99999   
pop of  1 O 2s        0.86234 | 0.86230   
pop of  1 O 3s        0.00507 | 0.00508   
pop of  1 O 2px       0.78699 | 0.78697   
pop of  1 O 2py       0.89051 | 0.89041   
pop of  1 O 2pz       0.86880 | 0.86870   
pop of  1 O 3px       0.00273 | 0.00274   
pop of  1 O 3py       0.00420 | 0.00422   
pop of  1 O 3pz       0.00427 | 0.00429   
pop of  2 O 1s        0.99999 | 0.99999   
pop of  2 O 2s        0.86099 | 0.86099   
pop of  2 O 3s        0.00610 | 0.00610   
pop of  2 O 2px       0.95209 | 0.95208   
pop of  2 O 2py       0.82769 | 0.82769   
pop of  2 O 2pz       0.75529 | 0.75527   
pop of  2 O 3px       0.00541 | 0.00541   
pop of  2 O 3py       0.00310 | 0.00310   
pop of  2 O 3pz       0.00185 | 0.00186   
pop of  3 O 1s        0.99999 | 0.99999   
pop of  3 O 2s        0.86842 | 0.86838   
pop of  3 O 3s        0.00482 | 0.00484   
pop of  3 O 2px       0.78775 | 0.78770   
pop of  3 O 2py       0.85490 | 0.85481   
pop of  3 O 2pz       0.88490 | 0.88476   
pop of  3 O 3px       0.00253 | 0.00254   
pop of  3 O 3py       0.00379 | 0.00381   
pop of  3 O 3pz       0.00404 | 0.00406   
pop of  4 O 1s        0.99999 | 0.99999   
pop of  4 O 2s        0.86519 | 0.86518   
pop of  4 O 3s        0.00502 | 0.00504   
pop of  4 O 2px       0.77929 | 0.77929   
pop of  4 O 2py       0.90952 | 0.90944   
pop of  4 O 2pz       0.86754 | 0.86748   
pop of  4 O 3px       0.00270 | 0.00271   
pop of  4 O 3py       0.00465 | 0.00468   
pop of  4 O 3pz       0.00437 | 0.00441   
pop of  5 O 1s        0.99999 | 0.99999   
pop of  5 O 2s        0.85928 | 0.85928   
pop of  5 O 3s        0.00624 | 0.00624   
pop of  5 O 2px       0.94811 | 0.94809   
pop of  5 O 2py       0.81779 | 0.81778   
pop of  5 O 2pz       0.77323 | 0.77323   
pop of  5 O 3px       0.00534 | 0.00534   
pop of  5 O 3py       0.00278 | 0.00278   
pop of  5 O 3pz       0.00235 | 0.00235   
pop of  6 O 1s        0.99999 | 0.99999   
pop of  6 O 2s        0.85930 | 0.85927   
pop of  6 O 3s        0.00511 | 0.00513   
pop of  6 O 2px       0.80970 | 0.80967   
pop of  6 O 2py       0.82965 | 0.82956   
pop of  6 O 2pz       0.88152 | 0.88136   
pop of  6 O 3px       0.00269 | 0.00270   
pop of  6 O 3py       0.00318 | 0.00320   
pop of  6 O 3pz       0.00401 | 0.00405   
pop of  7 O 1s        0.99999 | 0.99999   
pop of  7 O 2s        0.86118 | 0.86114   
pop of  7 O 3s        0.00521 | 0.00523   
pop of  7 O 2px       0.93764 | 0.93740   
pop of  7 O 2py       0.83302 | 0.83294   
pop of  7 O 2pz       0.77295 | 0.77291   
pop of  7 O 3px       0.00536 | 0.00541   
pop of  7 O 3py       0.00347 | 0.00349   
pop of  7 O 3pz       0.00192 | 0.00192   
pop of  8 O 1s        0.99999 | 0.99999   
pop of  8 O 2s        0.86483 | 0.86479   
pop of  8 O 3s        0.00507 | 0.00508   
pop of  8 O 2px       0.72487 | 0.72479   
pop of  8 O 2py       0.91089 | 0.91070   
pop of  8 O 2pz       0.91788 | 0.91779   
pop of  8 O 3px       0.00126 | 0.00127   
pop of  8 O 3py       0.00489 | 0.00492   
pop of  8 O 3pz       0.00556 | 0.00559   
pop of  9 O 1s        0.99999 | 0.99999   
pop of  9 O 2s        0.86967 | 0.86964   
pop of  9 O 3s        0.00495 | 0.00498   
pop of  9 O 2px       0.71928 | 0.71921   
pop of  9 O 2py       0.91376 | 0.91358   
pop of  9 O 2pz       0.92321 | 0.92315   
pop of  9 O 3px       0.00119 | 0.00120   
pop of  9 O 3py       0.00500 | 0.00505   
pop of  9 O 3pz       0.00589 | 0.00593   
pop of  10 O 1s        0.99999 | 0.99999   
pop of  10 O 2s        0.85879 | 0.85878   
pop of  10 O 3s        0.00605 | 0.00605   
pop of  10 O 2px       0.85078 | 0.85076   
pop of  10 O 2py       0.80735 | 0.80734   
pop of  10 O 2pz       0.84974 | 0.84972   
pop of  10 O 3px       0.00277 | 0.00277   
pop of  10 O 3py       0.00257 | 0.00257   
pop of  10 O 3pz       0.00354 | 0.00354   
pop of  11 O 1s        0.99999 | 0.99999   
pop of  11 O 2s        0.86119 | 0.86116   
pop of  11 O 3s        0.00520 | 0.00522   
pop of  11 O 2px       0.93610 | 0.93591   
pop of  11 O 2py       0.83431 | 0.83420   
pop of  11 O 2pz       0.76552 | 0.76548   
pop of  11 O 3px       0.00514 | 0.00519   
pop of  11 O 3py       0.00344 | 0.00346   
pop of  11 O 3pz       0.00184 | 0.00185   
pop of  12 C 1s        0.99999 | 0.99999   
pop of  12 C 2s        0.41720 | 0.41722   
pop of  12 C 3s        0.00983 | 0.00983   
pop of  12 C 2px       0.41420 | 0.41421   
pop of  12 C 2py       0.37710 | 0.37714   
pop of  12 C 2pz       0.41053 | 0.41057   
pop of  12 C 3px       0.01875 | 0.01875   
pop of  12 C 3py       0.00444 | 0.00445   
pop of  12 C 3pz       0.01305 | 0.01307   
pop of  13 C 1s        0.99999 | 0.99999   
pop of  13 C 2s        0.41296 | 0.41301   
pop of  13 C 3s        0.01008 | 0.01008   
pop of  13 C 2px       0.41173 | 0.41174   
pop of  13 C 2py       0.38613 | 0.38617   
pop of  13 C 2pz       0.40559 | 0.40565   
pop of  13 C 3px       0.01819 | 0.01820   
pop of  13 C 3py       0.00705 | 0.00707   
pop of  13 C 3pz       0.01117 | 0.01120   
pop of  14 C 1s        0.99999 | 0.99999   
pop of  14 C 2s        0.41349 | 0.41352   
pop of  14 C 3s        0.01007 | 0.01008   
pop of  14 C 2px       0.41409 | 0.41413   
pop of  14 C 2py       0.38829 | 0.38834   
pop of  14 C 2pz       0.40139 | 0.40143   
pop of  14 C 3px       0.01701 | 0.01702   
pop of  14 C 3py       0.00663 | 0.00665   
pop of  14 C 3pz       0.01273 | 0.01275   
pop of  15 C 1s        0.99999 | 0.99999   
pop of  15 C 2s        0.41547 | 0.41552   
pop of  15 C 3s        0.01006 | 0.01006   
pop of  15 C 2px       0.41241 | 0.41244   
pop of  15 C 2py       0.38722 | 0.38727   
pop of  15 C 2pz       0.40132 | 0.40135   
pop of  15 C 3px       0.01656 | 0.01658   
pop of  15 C 3py       0.00662 | 0.00664   
pop of  15 C 3pz       0.01278 | 0.01279   
pop of  16 O 1s        0.99999 | 0.99999   
pop of  16 O 2s        0.85984 | 0.85984   
pop of  16 O 3s        0.00602 | 0.00602   
pop of  16 O 2px       0.84268 | 0.84266   
pop of  16 O 2py       0.81142 | 0.81142   
pop of  16 O 2pz       0.84949 | 0.84947   
pop of  16 O 3px       0.00264 | 0.00264   
pop of  16 O 3py       0.00266 | 0.00266   
pop of  16 O 3pz       0.00353 | 0.00353   
In total            96.09385 | 96.90615  
 ** Mulliken atomic charges   ( Nelec_alpha | Nelec_beta ) **
charge of  0Er =      2.24426  (    32.47112     33.28462 )
charge of  1O =     -0.84961  (     4.42489      4.42471 )
charge of  2O =     -0.82501  (     4.41252      4.41249 )
charge of  3O =     -0.82204  (     4.41114      4.41090 )
charge of  4O =     -0.87651  (     4.43829      4.43822 )
charge of  5O =     -0.83019  (     4.41511      4.41508 )
charge of  6O =     -0.79008  (     4.39515      4.39494 )
charge of  7O =     -0.84119  (     4.42075      4.42044 )
charge of  8O =     -0.87016  (     4.43524      4.43492 )
charge of  9O =     -0.88568  (     4.44294      4.44274 )
charge of  10O =     -0.76309  (     4.38157      4.38152 )
charge of  11O =     -0.82522  (     4.41275      4.41247 )
charge of  12C =      0.66968  (     2.66509      2.66523 )
charge of  13C =      0.67401  (     2.66289      2.66310 )
charge of  14C =      0.67241  (     2.66369      2.66390 )
charge of  15C =      0.67493  (     2.66243      2.66264 )
charge of  16O =     -0.75652  (     4.37828      4.37824 )
(3, 264, 264) 264
S vector [-0.0101-0.j  1.3913+0.j -0.4062+0.j]
(3, 264, 264) 264
L vector [-0.0331-0.j  5.7941-0.j -1.6832-0.j]
(3, 264, 264) 264
J vector [-0.0432-0.j  7.1854+0.j -2.0894-0.j]
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
ao_index [ 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383]
ao_labels ['0 Er 4f-3  ' '0 Er 4f-2  ' '0 Er 4f-1  ' '0 Er 4f+0  ' '0 Er 4f+1  ' '0 Er 4f+2  ' '0 Er 4f+3  ' '0 Er 5f-3  ' '0 Er 5f-2  ' '0 Er 5f-1  ' '0 Er 5f+0  ' '0 Er 5f+1  ' '0 Er 5f+2  ' '0 Er 5f+3  ' '0 Er 6f-3  ' '0 Er 6f-2  ' '0 Er 6f-1  ' '0 Er 6f+0  ' '0 Er 6f+1  ' '0 Er 6f+2  ' '0 Er 6f+3  ']
  J     M     c^2  
rank = 0, idx_lst = [ 0 16]
rank = 8, idx_lst = [ 8 24]
rank = 4, idx_lst = [ 4 20]
rank = 14, idx_lst = [14]
rank = 10, idx_lst = [10 26]
rank = 6, idx_lst = [ 6 22]
rank = 2, idx_lst = [ 2 18]
rank = 12, idx_lst = [12 28]
rank = 9, idx_lst = [ 9 25]
rank = 11, idx_lst = [11 27]
rank = 3, idx_lst = [ 3 19]
rank = 5, idx_lst = [ 5 21]
rank = 7, idx_lst = [ 7 23]
rank = 15, idx_lst = [15]
rank = 13, idx_lst = [13]
rank = 1, idx_lst = [ 1 17]
[hpc-90-25.cm.cluster:2110337] 15 more processes have sent help message help-mpi-btl-openib.txt / error in device init
[hpc-90-25.cm.cluster:2110337] Set MCA parameter "orte_base_help_aggregate" to 0 to see all help / error messages
 7.5    7.5    3.5    0.00002    0.00002
 7.5    7.5    2.5   -0.00006    0.00003
 7.5    7.5    1.5   -0.00004   -0.00010
 7.5    7.5    0.5    0.00014   -0.00007
 7.5    7.5   -0.5    0.00009    0.00020
 7.5    7.5   -1.5   -0.00024    0.00011
 7.5    7.5   -2.5   -0.00010   -0.00025
 7.5    7.5   -3.5    0.00022   -0.00009
 7.5    7.5   -4.5    0.00007    0.00017
 7.5    7.5   -5.5   -0.00011    0.00005
 7.5    7.5   -6.5   -0.00003   -0.00006
 7.5    7.5   -7.5    0.00002   -0.00001
 7.5    6.5    4.5   -0.00003   -0.00001
 7.5    6.5    3.5    0.00006   -0.00009
 7.5    6.5    2.5    0.00017    0.00016
 7.5    6.5    1.5   -0.00029    0.00027
 7.5    6.5    0.5   -0.00041   -0.00043
 7.5    6.5   -0.5    0.00059   -0.00056
 7.5    6.5   -1.5    0.00064    0.00070
 7.5    6.5   -2.5   -0.00072    0.00065
 7.5    6.5   -3.5   -0.00057   -0.00065
 7.5    6.5   -4.5    0.00049   -0.00045
 7.5    6.5   -5.5    0.00030    0.00031
 7.5    6.5   -6.5   -0.00016    0.00017
 7.5    6.5   -7.5   -0.00007   -0.00005
 7.5    5.5    5.5    0.00004   -0.00001
 7.5    5.5    4.5   -0.00001    0.00012
 7.5    5.5    3.5   -0.00031   -0.00009
 7.5    5.5    2.5    0.00026   -0.00065
 7.5    5.5    1.5    0.00112    0.00053
 7.5    5.5    0.5   -0.00082    0.00170
 7.5    5.5   -0.5   -0.00227   -0.00112
 7.5    5.5   -1.5    0.00133   -0.00265
 7.5    5.5   -2.5    0.00271    0.00140
 7.5    5.5   -3.5   -0.00127    0.00240
 7.5    5.5   -4.5   -0.00185   -0.00096
 7.5    5.5   -5.5    0.00059   -0.00123
 7.5    5.5   -6.5    0.00067    0.00027
 7.5    5.5   -7.5   -0.00008    0.00027
 7.5    4.5    4.5    0.00037   -0.00002
 7.5    4.5    3.5   -0.00008    0.00095
 7.5    4.5    2.5   -0.00201   -0.00031
 7.5    4.5    1.5    0.00069   -0.00355
 7.5    4.5    0.5    0.00543    0.00116
 7.5    4.5   -0.5   -0.00163    0.00722
 7.5    4.5   -1.5   -0.00842   -0.00199
 7.5    4.5   -2.5    0.00214   -0.00861
 7.5    4.5   -3.5    0.00766    0.00198
 7.5    4.5   -4.5   -0.00147    0.00589
 7.5    4.5   -5.5   -0.00387   -0.00083
 7.5    4.5   -6.5    0.00032   -0.00209
 7.5    4.5   -7.5    0.00081    0.00005
 7.5    3.5    3.5    0.00240   -0.00004
 7.5    3.5    2.5   -0.00022    0.00507
 7.5    3.5    1.5   -0.00905   -0.00068
 7.5    3.5    0.5    0.00132   -0.01388
 7.5    3.5   -0.5    0.01848    0.00202
 7.5    3.5   -1.5   -0.00262    0.02154
 7.5    3.5   -2.5   -0.02200   -0.00293
 7.5    3.5   -3.5    0.00272   -0.01958
 7.5    3.5   -4.5    0.01506    0.00196
 7.5    3.5   -5.5   -0.00096    0.00986
 7.5    3.5   -6.5   -0.00528   -0.00019
 7.5    3.5   -7.5   -0.00011   -0.00204
 7.5    2.5    2.5    0.01068   -0.00003
 7.5    2.5    1.5   -0.00046    0.01913
 7.5    2.5    0.5   -0.02941   -0.00124
 7.5    2.5   -0.5    0.00225   -0.03923
 7.5    2.5   -1.5    0.04572    0.00325
 7.5    2.5   -2.5   -0.00385    0.04662
 7.5    2.5   -3.5   -0.04147   -0.00361
 7.5    2.5   -4.5    0.00250   -0.03190
 7.5    2.5   -5.5    0.02086    0.00097
 7.5    2.5   -6.5    0.00016    0.01113
 7.5    2.5   -7.5   -0.00428    0.00044
 7.5    1.5    1.5    0.03426   -0.00000
 7.5    1.5    0.5   -0.00090    0.05274
 7.5    1.5   -0.5   -0.07042   -0.00225
 7.5    1.5   -1.5    0.00379   -0.08209
 7.5    1.5   -2.5    0.08367    0.00482
 7.5    1.5   -3.5   -0.00462    0.07438
 7.5    1.5   -4.5   -0.05721   -0.00301
 7.5    1.5   -5.5    0.00077   -0.03739
 7.5    1.5   -6.5    0.01994   -0.00080
 7.5    1.5   -7.5    0.00098    0.00766
 7.5    0.5    0.5    0.08121    0.00006
 7.5    0.5   -0.5   -0.00166    0.10854
 7.5    0.5   -1.5   -0.12658   -0.00372
 7.5    0.5   -2.5    0.00533   -0.12903
 7.5    0.5   -3.5    0.11465    0.00526
 7.5    0.5   -4.5   -0.00318    0.08815
 7.5    0.5   -5.5   -0.05758   -0.00022
 7.5    0.5   -6.5   -0.00175   -0.03067
 7.5    0.5   -7.5    0.01176   -0.00171
 7.5   -0.5   -0.5    0.14513    0.00004
 7.5   -0.5   -1.5   -0.00245    0.16935
 7.5   -0.5   -2.5   -0.17264   -0.00457
 7.5   -0.5   -3.5    0.00482   -0.15343
 7.5   -0.5   -4.5    0.11788    0.00256
 7.5   -0.5   -5.5    0.00084    0.07695
 7.5   -0.5   -6.5   -0.04094    0.00295
 7.5   -0.5   -7.5   -0.00252   -0.01568
 7.5   -1.5   -1.5    0.19763   -0.00001
 7.5   -1.5   -2.5   -0.00242    0.20160
 7.5   -1.5   -3.5   -0.17920   -0.00307
 7.5   -1.5   -4.5    0.00105   -0.13764
 7.5   -1.5   -5.5    0.08978   -0.00225
 7.5   -1.5   -6.5    0.00412    0.04771
 7.5   -1.5   -7.5   -0.01825    0.00321
 7.5   -2.5   -2.5    0.20573   -0.00002
 7.5   -2.5   -3.5   -0.00090    0.18292
 7.5   -2.5   -4.5   -0.14051    0.00063
 7.5   -2.5   -5.5   -0.00338   -0.09158
 7.5   -2.5   -6.5    0.04861   -0.00479
 7.5   -2.5   -7.5    0.00349    0.01857
 7.5   -3.5   -3.5    0.16270   -0.00004
 7.5   -3.5   -4.5    0.00121    0.12499
 7.5   -3.5   -5.5   -0.08144    0.00341
 7.5   -3.5   -6.5   -0.00446   -0.04321
 7.5   -3.5   -7.5    0.01649   -0.00319
 7.5   -4.5   -4.5    0.09605   -0.00004
 7.5   -4.5   -5.5    0.00204    0.06263
 7.5   -4.5   -6.5   -0.03324    0.00311
 7.5   -4.5   -7.5   -0.00232   -0.01269
 7.5   -5.5   -5.5    0.04090   -0.00001
 7.5   -5.5   -6.5    0.00133    0.02176
 7.5   -5.5   -7.5   -0.00834    0.00124
 7.5   -6.5   -6.5    0.01164   -0.00000
 7.5   -6.5   -7.5    0.00039    0.00449
 7.5   -7.5   -7.5    0.00175   -0.00000
triangle [[-0.    -0.j      0.    -0.j     -0.    -0.j      0.    -0.j      0.    +0.j     -0.0001+0.j     -0.    -0.0001j  0.0001-0.0001j  0.0001+0.0002j -0.0002+0.0001j -0.0001-0.0002j  0.0002-0.0001j  0.0001+0.0002j -0.0001+0.0001j -0.    -0.0001j  0.    -0.j    ]
 [ 0.    +0.j      0.    -0.j     -0.    +0.j     -0.    -0.j      0.0001-0.0001j  0.0002+0.0002j -0.0003+0.0003j -0.0004-0.0004j  0.0006-0.0006j  0.0006+0.0007j -0.0007+0.0007j -0.0006-0.0007j  0.0005-0.0004j  0.0003+0.0003j -0.0002+0.0002j -0.0001-0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    -0.j     -0.    +0.0001j -0.0003-0.0001j  0.0003-0.0007j  0.0011+0.0005j -0.0008+0.0017j -0.0023-0.0011j  0.0013-0.0027j  0.0027+0.0014j -0.0013+0.0024j -0.0019-0.001j   0.0006-0.0012j  0.0007+0.0003j -0.0001+0.0003j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.0004-0.j     -0.0001+0.001j  -0.002 -0.0003j  0.0007-0.0036j  0.0054+0.0012j -0.0016+0.0072j -0.0084-0.002j   0.0021-0.0086j  0.0077+0.002j  -0.0015+0.0059j -0.0039-0.0008j  0.0003-0.0021j  0.0008+0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0024-0.j     -0.0002+0.0051j -0.0091-0.0007j  0.0013-0.0139j  0.0185+0.002j  -0.0026+0.0215j -0.022 -0.0029j  0.0027-0.0196j  0.0151+0.002j  -0.001 +0.0099j -0.0053-0.0002j -0.0001-0.002j ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0107-0.j     -0.0005+0.0191j -0.0294-0.0012j  0.0023-0.0392j  0.0457+0.0033j -0.0038+0.0466j -0.0415-0.0036j  0.0025-0.0319j  0.0209+0.001j   0.0002+0.0111j -0.0043+0.0004j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0343-0.j     -0.0009+0.0527j -0.0704-0.0022j  0.0038-0.0821j  0.0837+0.0048j -0.0046+0.0744j -0.0572-0.003j   0.0008-0.0374j  0.0199-0.0008j  0.001 +0.0077j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0812+0.0001j -0.0017+0.1085j -0.1266-0.0037j  0.0053-0.129j   0.1147+0.0053j -0.0032+0.0882j -0.0576-0.0002j -0.0018-0.0307j  0.0118-0.0017j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.1451+0.j     -0.0025+0.1694j -0.1726-0.0046j  0.0048-0.1534j  0.1179+0.0026j  0.0008+0.0769j -0.0409+0.0029j -0.0025-0.0157j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.1976-0.j     -0.0024+0.2016j -0.1792-0.0031j  0.001 -0.1376j  0.0898-0.0022j  0.0041+0.0477j -0.0182+0.0032j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.2057-0.j     -0.0009+0.1829j -0.1405+0.0006j -0.0034-0.0916j  0.0486-0.0048j  0.0035+0.0186j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.1627-0.j      0.0012+0.125j  -0.0814+0.0034j -0.0045-0.0432j  0.0165-0.0032j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.096 -0.j      0.002 +0.0626j -0.0332+0.0031j -0.0023-0.0127j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0409-0.j      0.0013+0.0218j -0.0083+0.0012j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0116-0.j      0.0004+0.0045j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0018-0.j    ]]
full [[-0.    +0.j      0.    -0.j     -0.    -0.j      0.    -0.j      0.    +0.j     -0.0001+0.j     -0.    -0.0001j  0.0001-0.0001j  0.0001+0.0002j -0.0002+0.0001j -0.0001-0.0002j  0.0002-0.0001j  0.0001+0.0002j -0.0001+0.0001j -0.    -0.0001j  0.    -0.j    ]
 [ 0.    +0.j      0.    +0.j     -0.    +0.j     -0.    -0.j      0.0001-0.0001j  0.0002+0.0002j -0.0003+0.0003j -0.0004-0.0004j  0.0006-0.0006j  0.0006+0.0007j -0.0007+0.0007j -0.0006-0.0007j  0.0005-0.0004j  0.0003+0.0003j -0.0002+0.0002j -0.0001-0.0001j]
 [-0.    +0.j     -0.    -0.j      0.    +0.j     -0.    +0.0001j -0.0003-0.0001j  0.0003-0.0007j  0.0011+0.0005j -0.0008+0.0017j -0.0023-0.0011j  0.0013-0.0027j  0.0027+0.0014j -0.0013+0.0024j -0.0019-0.001j   0.0006-0.0012j  0.0007+0.0003j -0.0001+0.0003j]
 [ 0.    +0.j     -0.    +0.j     -0.    -0.0001j  0.0004+0.j     -0.0001+0.001j  -0.002 -0.0003j  0.0007-0.0036j  0.0054+0.0012j -0.0016+0.0072j -0.0084-0.002j   0.0021-0.0086j  0.0077+0.002j  -0.0015+0.0059j -0.0039-0.0008j  0.0003-0.0021j  0.0008+0.j    ]
 [ 0.    -0.j      0.0001+0.0001j -0.0003+0.0001j -0.0001-0.001j   0.0024+0.j     -0.0002+0.0051j -0.0091-0.0007j  0.0013-0.0139j  0.0185+0.002j  -0.0026+0.0215j -0.022 -0.0029j  0.0027-0.0196j  0.0151+0.002j  -0.001 +0.0099j -0.0053-0.0002j -0.0001-0.002j ]
 [-0.0001-0.j      0.0002-0.0002j  0.0003+0.0007j -0.002 +0.0003j -0.0002-0.0051j  0.0107+0.j     -0.0005+0.0191j -0.0294-0.0012j  0.0023-0.0392j  0.0457+0.0033j -0.0038+0.0466j -0.0415-0.0036j  0.0025-0.0319j  0.0209+0.001j   0.0002+0.0111j -0.0043+0.0004j]
 [-0.    +0.0001j -0.0003-0.0003j  0.0011-0.0005j  0.0007+0.0036j -0.0091+0.0007j -0.0005-0.0191j  0.0343+0.j     -0.0009+0.0527j -0.0704-0.0022j  0.0038-0.0821j  0.0837+0.0048j -0.0046+0.0744j -0.0572-0.003j   0.0008-0.0374j  0.0199-0.0008j  0.001 +0.0077j]
 [ 0.0001+0.0001j -0.0004+0.0004j -0.0008-0.0017j  0.0054-0.0012j  0.0013+0.0139j -0.0294+0.0012j -0.0009-0.0527j  0.0812+0.j     -0.0017+0.1085j -0.1266-0.0037j  0.0053-0.129j   0.1147+0.0053j -0.0032+0.0882j -0.0576-0.0002j -0.0018-0.0307j  0.0118-0.0017j]
 [ 0.0001-0.0002j  0.0006+0.0006j -0.0023+0.0011j -0.0016-0.0072j  0.0185-0.002j   0.0023+0.0392j -0.0704+0.0022j -0.0017-0.1085j  0.1451+0.j     -0.0025+0.1694j -0.1726-0.0046j  0.0048-0.1534j  0.1179+0.0026j  0.0008+0.0769j -0.0409+0.0029j -0.0025-0.0157j]
 [-0.0002-0.0001j  0.0006-0.0007j  0.0013+0.0027j -0.0084+0.002j  -0.0026-0.0215j  0.0457-0.0033j  0.0038+0.0821j -0.1266+0.0037j -0.0025-0.1694j  0.1976+0.j     -0.0024+0.2016j -0.1792-0.0031j  0.001 -0.1376j  0.0898-0.0022j  0.0041+0.0477j -0.0182+0.0032j]
 [-0.0001+0.0002j -0.0007-0.0007j  0.0027-0.0014j  0.0021+0.0086j -0.022 +0.0029j -0.0038-0.0466j  0.0837-0.0048j  0.0053+0.129j  -0.1726+0.0046j -0.0024-0.2016j  0.2057+0.j     -0.0009+0.1829j -0.1405+0.0006j -0.0034-0.0916j  0.0486-0.0048j  0.0035+0.0186j]
 [ 0.0002+0.0001j -0.0006+0.0007j -0.0013-0.0024j  0.0077-0.002j   0.0027+0.0196j -0.0415+0.0036j -0.0046-0.0744j  0.1147-0.0053j  0.0048+0.1534j -0.1792+0.0031j -0.0009-0.1829j  0.1627+0.j      0.0012+0.125j  -0.0814+0.0034j -0.0045-0.0432j  0.0165-0.0032j]
 [ 0.0001-0.0002j  0.0005+0.0004j -0.0019+0.001j  -0.0015-0.0059j  0.0151-0.002j   0.0025+0.0319j -0.0572+0.003j  -0.0032-0.0882j  0.1179-0.0026j  0.001 +0.1376j -0.1405-0.0006j  0.0012-0.125j   0.096 +0.j      0.002 +0.0626j -0.0332+0.0031j -0.0023-0.0127j]
 [-0.0001-0.0001j  0.0003-0.0003j  0.0006+0.0012j -0.0039+0.0008j -0.001 -0.0099j  0.0209-0.001j   0.0008+0.0374j -0.0576+0.0002j  0.0008-0.0769j  0.0898+0.0022j -0.0034+0.0916j -0.0814-0.0034j  0.002 -0.0626j  0.0409+0.j      0.0013+0.0218j -0.0083+0.0012j]
 [-0.    +0.0001j -0.0002-0.0002j  0.0007-0.0003j  0.0003+0.0021j -0.0053+0.0002j  0.0002-0.0111j  0.0199+0.0008j -0.0018+0.0307j -0.0409-0.0029j  0.0041-0.0477j  0.0486+0.0048j -0.0045+0.0432j -0.0332-0.0031j  0.0013-0.0218j  0.0116+0.j      0.0004+0.0045j]
 [ 0.    +0.j     -0.0001+0.0001j -0.0001-0.0003j  0.0008-0.j     -0.0001+0.002j  -0.0043-0.0004j  0.001 -0.0077j  0.0118+0.0017j -0.0025+0.0157j -0.0182-0.0032j  0.0035-0.0186j  0.0165+0.0032j -0.0023+0.0127j -0.0083-0.0012j  0.0004-0.0045j  0.0018+0.j    ]]
Sum of c^2 0.9904878759316948
Wed Apr 16 00:20:49 PDT 2025
