Currently Loaded Modulefiles:
 1) gmp/6.2.1-gcc-13.2.0-lcnhyse <aL>             
 2) mpfr/4.2.0-gcc-13.2.0-yy2fkq5 <aL>            
 3) mpc/1.3.1-gcc-13.2.0-5kgoftq <aL>             
 4) zlib-ng/2.1.3-gcc-13.2.0-jetnfwa <aL>         
 5) zstd/1.5.5-gcc-13.2.0-t2lua3l <aL>            
 6) gcc/13.2.0-gcc-13.2.0-w55nxkl                 
 7) cmake/3.20.2-gcc-13.2.0-rp74vpv               
 8) libfabric/1.18.1-gcc-13.2.0-bijxar4 <aL>      
 9) numactl/2.0.14-gcc-13.2.0-etkf74e <aL>        
10) openssh/8.7p1-gcc-13.2.0-g55xmkx <aL>         
11) slurm/22.05.6-gcc-13.2.0-tchsn6y <aL>         
12) openmpi/4.1.5-gcc-13.2.0-24q3ap2              
13) libpciaccess/0.17-gcc-13.2.0-r2cijnn <aL>     
14) libiconv/1.17-gcc-13.2.0-ntov4te <aL>         
15) xz/5.4.1-gcc-13.2.0-4xkm5xo <aL>              
16) libxml2/2.10.3-gcc-13.2.0-fr6jcjz <aL>        
17) ncurses/6.4-gcc-13.2.0-4o2yj6n <aL>           
18) hwloc/2.9.1-gcc-13.2.0-gzvfolk <aL>           
19) intel-tbb/2021.9.0-gcc-13.2.0-6nwk3ml <aL>    
20) intel-oneapi-mkl/2023.2.0-gcc-13.2.0-ohvyk7g  

Key:
<module-tag>  <aL>=auto-loaded  
/central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF
Wed Apr 16 00:09:34 PDT 2025
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
hpc-93-04.cm.cluster
--------------------------------------------------------------------------
WARNING: There was an error initializing an OpenFabrics device.

  Local host:   hpc-93-04
  Local device: mlx5_0
--------------------------------------------------------------------------
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:09:38 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
               '''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
     else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
number of NR pGTOs = 525
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.98
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
N_elec (98, 95), N_ao 264
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

nuclear repulsion = 2660.00686642269
number of shells = 122
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
number of NR pGTOs = 525
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.98
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
N_elec (98, 95), N_ao 264
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.99
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
number of NR pGTOs = 525
number of NR pGTOs = 525
number of NR cGTOs = 264
N_elec (98, 95), N_ao 264
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.98
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.99
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
N_elec (98, 95), N_ao 264
N_elec (98, 95), N_ao 264
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

number of NR pGTOs = 525
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
number of NR pGTOs = 525
ecp = {}
CPU time:         0.98
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.99
N_elec (98, 95), N_ao 264
N_elec (98, 95), N_ao 264
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.99
N_elec (98, 95), N_ao 264
**** MO energy ****
MO #1   energy= -2122.67980111739  occ= 1
MO #2   energy= -2122.67972284446  occ= 1
MO #3   energy= -361.386753454411  occ= 1
MO #4   energy= -361.386114099193  occ= 1
MO #5   energy= -343.310068769755  occ= 1
MO #6   energy= -343.310036687308  occ= 1
MO #7   energy= -309.245803777619  occ= 1
MO #8   energy= -309.244943428678  occ= 1
MO #9   energy= -309.241898819611  occ= 1
MO #10  energy= -309.241595792467  occ= 1
MO #11  energy= -83.081544182146   occ= 1
MO #12  energy= -83.002014111796   occ= 1
MO #13  energy= -75.1983019030076  occ= 1
MO #14  energy= -75.1787150508232  occ= 1
MO #15  energy= -67.8560418621908  occ= 1
MO #16  energy= -67.8144097832119  occ= 1
MO #17  energy= -67.7666155732674  occ= 1
MO #18  energy= -67.7168839535966  occ= 1
MO #19  energy= -54.8568090855283  occ= 1
MO #20  energy= -54.8468764770028  occ= 1
MO #21  energy= -54.8352415957717  occ= 1
MO #22  energy= -54.8307785450671  occ= 1
MO #23  energy= -53.0401658442185  occ= 1
MO #24  energy= -53.0198028503636  occ= 1
MO #25  energy= -52.9972733145108  occ= 1
MO #26  energy= -52.9583047259088  occ= 1
MO #27  energy= -52.8851542354914  occ= 1
MO #28  energy= -52.8593860453113  occ= 1
MO #29  energy= -20.208175159028   occ= 1
MO #30  energy= -20.2080444973928  occ= 1
MO #31  energy= -20.2049964904023  occ= 1
MO #32  energy= -20.2049902531251  occ= 1
MO #33  energy= -20.2015092579204  occ= 1
MO #34  energy= -20.2013588161531  occ= 1
MO #35  energy= -20.1969166672086  occ= 1
MO #36  energy= -20.1969092926316  occ= 1
MO #37  energy= -20.195875998785   occ= 1
MO #38  energy= -20.1957045806857  occ= 1
MO #39  energy= -20.1901337340596  occ= 1
MO #40  energy= -20.1899553010653  occ= 1
MO #41  energy= -20.1548769022231  occ= 1
MO #42  energy= -20.1546717783092  occ= 1
MO #43  energy= -20.1522849570959  occ= 1
MO #44  energy= -20.152097196213   occ= 1
MO #45  energy= -20.1488405110006  occ= 1
MO #46  energy= -20.1486522705081  occ= 1
MO #47  energy= -20.144472617925   occ= 1
MO #48  energy= -20.1442886513679  occ= 1
MO #49  energy= -20.1393299448653  occ= 1
MO #50  energy= -20.1393192624896  occ= 1
MO #51  energy= -20.1316628930402  occ= 1
MO #52  energy= -20.1316481537449  occ= 1
MO #53  energy= -17.4002553023073  occ= 1
MO #54  energy= -17.1982851815252  occ= 1
MO #55  energy= -14.1618590385517  occ= 1
MO #56  energy= -14.1009180123405  occ= 1
MO #57  energy= -12.52281360771    occ= 1
MO #58  energy= -12.4413512694516  occ= 1
MO #59  energy= -12.3242592345376  occ= 1
MO #60  energy= -12.1974306698745  occ= 1
MO #61  energy= -11.0735687106805  occ= 1
MO #62  energy= -11.073548043985   occ= 1
MO #63  energy= -11.0671963632905  occ= 1
MO #64  energy= -11.0671722726885  occ= 1
MO #65  energy= -11.0163447439521  occ= 1
MO #66  energy= -11.0163184100194  occ= 1
MO #67  energy= -11.0113494592209  occ= 1
MO #68  energy= -11.0113272677063  occ= 1
MO #69  energy= -7.28566268378585  occ= 1
MO #70  energy= -7.2369904685086   occ= 1
MO #71  energy= -7.22295811944927  occ= 1
MO #72  energy= -7.20245621041782  occ= 1
MO #73  energy= -6.94573701816874  occ= 1
MO #74  energy= -6.89989658934364  occ= 1
MO #75  energy= -6.83952470322632  occ= 1
MO #76  energy= -6.70698248248367  occ= 1
MO #77  energy= -6.47044096203428  occ= 1
MO #78  energy= -6.40417233523938  occ= 1
MO #79  energy= -2.10108336287302  occ= 1
MO #80  energy= -2.03001716268273  occ= 1
MO #81  energy= -1.13239754474589  occ= 1
MO #82  energy= -1.12400941743852  occ= 1
MO #83  energy= -1.11119826093274  occ= 1
MO #84  energy= -1.11072862260104  occ= 1
MO #85  energy= -1.09153341493823  occ= 1
MO #86  energy= -1.08376371986016  occ= 1
MO #87  energy= -1.05636140086395  occ= 1
MO #88  energy= -1.05587385160195  occ= 1
MO #89  energy= -1.04477611886658  occ= 1
MO #90  energy= -1.04008032529527  occ= 1
MO #91  energy= -0.970652885095979 occ= 1
MO #92  energy= -0.969525760552542 occ= 1
MO #93  energy= -0.964605560874404 occ= 1
MO #94  energy= -0.961948977651131 occ= 1
MO #95  energy= -0.948317588847146 occ= 1
MO #96  energy= -0.947490053970161 occ= 1
MO #97  energy= -0.94461085925787  occ= 1
MO #98  energy= -0.944204642690247 occ= 1
MO #99  energy= -0.915770329661234 occ= 1
MO #100 energy= -0.913574440905395 occ= 1
MO #101 energy= -0.907512339094693 occ= 1
MO #102 energy= -0.905913258013309 occ= 1
MO #103 energy= -0.896616195335803 occ= 1
MO #104 energy= -0.895276510808112 occ= 1
MO #105 energy= -0.891746977462635 occ= 1
MO #106 energy= -0.89110652257708  occ= 1
MO #107 energy= -0.851136867543524 occ= 1
MO #108 energy= -0.833391787533755 occ= 1
MO #109 energy= -0.811141717482628 occ= 1
MO #110 energy= -0.794535038539466 occ= 1
MO #111 energy= -0.464296587543692 occ= 1
MO #112 energy= -0.440891352072611 occ= 1
MO #113 energy= -0.417751290043493 occ= 1
MO #114 energy= -0.414633041579601 occ= 1
MO #115 energy= -0.405308205712894 occ= 1
MO #116 energy= -0.404614011787036 occ= 1
MO #117 energy= -0.391427278215379 occ= 1
MO #118 energy= -0.390365758841959 occ= 1
MO #119 energy= -0.388678935807259 occ= 1
MO #120 energy= -0.382815498608546 occ= 1
MO #121 energy= -0.381135315184886 occ= 1
MO #122 energy= -0.36792107591864  occ= 1
MO #123 energy= -0.340373186694155 occ= 1
MO #124 energy= -0.332919705189255 occ= 1
MO #125 energy= -0.332666033220451 occ= 1
MO #126 energy= -0.326935850769414 occ= 1
MO #127 energy= -0.326481044221549 occ= 1
MO #128 energy= -0.30791867909093  occ= 1
MO #129 energy= -0.307655352997742 occ= 1
MO #130 energy= -0.306227594048364 occ= 1
MO #131 energy= -0.305824973348935 occ= 1
MO #132 energy= -0.303769609276805 occ= 1
MO #133 energy= -0.302576112891184 occ= 1
MO #134 energy= -0.299735734355045 occ= 1
MO #135 energy= -0.299197198148357 occ= 1
MO #136 energy= -0.288085910081169 occ= 1
MO #137 energy= -0.287865528369656 occ= 1
MO #138 energy= -0.279556816485971 occ= 1
MO #139 energy= -0.278999117725452 occ= 1
MO #140 energy= -0.261043990537216 occ= 1
MO #141 energy= -0.25579339862213  occ= 1
MO #142 energy= -0.251919093968851 occ= 1
MO #143 energy= -0.251218047331997 occ= 1
MO #144 energy= -0.249115293846085 occ= 1
MO #145 energy= -0.2457832933715   occ= 1
MO #146 energy= -0.243420109767952 occ= 1
MO #147 energy= -0.241839952284268 occ= 1
MO #148 energy= -0.239107358467839 occ= 1
MO #149 energy= -0.237249908308748 occ= 1
MO #150 energy= -0.228444985702792 occ= 1
MO #151 energy= -0.228130428570226 occ= 1
MO #152 energy= -0.220565316854518 occ= 1
MO #153 energy= -0.219871770077511 occ= 1
MO #154 energy= -0.14895368404102  occ= 1
MO #155 energy= -0.14827307000217  occ= 1
MO #156 energy= -0.133956898352334 occ= 1
MO #157 energy= -0.133388088518283 occ= 1
MO #158 energy= -0.119193073211438 occ= 1
MO #159 energy= -0.118992107635921 occ= 1
MO #160 energy= -0.112818023796639 occ= 1
MO #161 energy= -0.112619431465108 occ= 1
MO #162 energy= -0.100938340142517 occ= 1
MO #163 energy= -0.100835765356806 occ= 1
MO #164 energy= -0.0969646336490227 occ= 1
MO #165 energy= -0.096954439966722 occ= 1
MO #166 energy= -0.0899966815886281 occ= 1
MO #167 energy= -0.0897041591812931 occ= 1
MO #168 energy= -0.0840198379639762 occ= 1
MO #169 energy= -0.0838168489765276 occ= 1
MO #170 energy= -0.0832405812369027 occ= 1
MO #171 energy= -0.0828992381299079 occ= 1
MO #172 energy= -0.0791110869783641 occ= 1
MO #173 energy= -0.0788342295625466 occ= 1
MO #174 energy= -0.0739537339303761 occ= 1
MO #175 energy= -0.0737212352060967 occ= 1
MO #176 energy= -0.0724568187976137 occ= 1
MO #177 energy= -0.0719940857106138 occ= 1
MO #178 energy= -0.0587649363992783 occ= 1
MO #179 energy= -0.0583547145895626 occ= 1
MO #180 energy= -0.0542196723488946 occ= 1
MO #181 energy= -0.0541023262535822 occ= 1
MO #182 energy= -0.0439953819600931 occ= 1
MO #183 energy= -0.0436624361058715 occ= 1
MO #184 energy= -0.0416706250487374 occ= 1
MO #185 energy= -0.041235674838755 occ= 1
MO #186 energy= -0.0301351950207821 occ= 1
MO #187 energy= -0.0300370371687333 occ= 1
MO #188 energy= -0.021863683171729 occ= 1
MO #189 energy= -0.021641073262093 occ= 1
MO #190 energy= -0.0185369502767307 occ= 1
MO #191 energy= -0.0181750744547881 occ= 1
MO #192 energy= -0.0144379371129145 occ= 1
MO #193 energy= -0.0140411580839035 occ= 1
MO #194 energy= 0.259522625442778  occ= 0
MO #195 energy= 0.259524729469457  occ= 0
MO #196 energy= 0.272803611707505  occ= 0
MO #197 energy= 0.27280483498091   occ= 0
MO #198 energy= 0.29038310478243   occ= 0
MO #199 energy= 0.290391721402373  occ= 0
MO #200 energy= 0.294511703255911  occ= 0
MO #201 energy= 0.29451458961835   occ= 0
MO #202 energy= 0.306651095724567  occ= 0
MO #203 energy= 0.30665961075821   occ= 0
MO #204 energy= 0.309735746473481  occ= 0
MO #205 energy= 0.309741391949292  occ= 0
MO #206 energy= 0.329395394081793  occ= 0
MO #207 energy= 0.3294004352423    occ= 0
MO #208 energy= 0.371811063543013  occ= 0
MO #209 energy= 0.371818641025354  occ= 0
MO #210 energy= 0.381490186871174  occ= 0
MO #211 energy= 0.381504703730723  occ= 0
MO #212 energy= 0.552833475553836  occ= 0
MO #213 energy= 0.553187944299973  occ= 0
MO #214 energy= 0.557012029765507  occ= 0
MO #215 energy= 0.55712845812053   occ= 0
MO #216 energy= 0.574525770253811  occ= 0
MO #217 energy= 0.574665730172005  occ= 0
MO #218 energy= 0.581540343701654  occ= 0
MO #219 energy= 0.582149401078389  occ= 0
MO #220 energy= 0.585611665861266  occ= 0
MO #221 energy= 0.586100652234282  occ= 0
MO #222 energy= 0.592109243675894  occ= 0
MO #223 energy= 0.592461725930361  occ= 0
MO #224 energy= 0.606659534252211  occ= 0
MO #225 energy= 0.606734136542874  occ= 0
MO #226 energy= 0.617616833099617  occ= 0
MO #227 energy= 0.621810016249151  occ= 0
MO #228 energy= 0.635190184720312  occ= 0
MO #229 energy= 0.636115312797556  occ= 0
MO #230 energy= 0.6402422483473    occ= 0
MO #231 energy= 0.641644702841842  occ= 0
MO #232 energy= 0.651600116878017  occ= 0
MO #233 energy= 0.651794894467407  occ= 0
MO #234 energy= 0.655795690803273  occ= 0
MO #235 energy= 0.656207152989113  occ= 0
MO #236 energy= 0.660567554730024  occ= 0
MO #237 energy= 0.663741162414928  occ= 0
MO #238 energy= 0.665441175706944  occ= 0
MO #239 energy= 0.667950013312725  occ= 0
MO #240 energy= 0.690289981529528  occ= 0
MO #241 energy= 0.696900080855819  occ= 0
MO #242 energy= 0.704112172102248  occ= 0
MO #243 energy= 0.710176212873121  occ= 0
MO #244 energy= 0.717293409272075  occ= 0
MO #245 energy= 0.732993033569589  occ= 0
MO #246 energy= 0.75957700487666   occ= 0
MO #247 energy= 0.779483798100672  occ= 0
MO #248 energy= 0.860177589669701  occ= 0
MO #249 energy= 0.860445662538459  occ= 0
MO #250 energy= 0.865685479665009  occ= 0
MO #251 energy= 0.866932801206968  occ= 0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              MO #252 energy= 0.87631290439177   occ= 0
MO #253 energy= 0.877085805220752  occ= 0
MO #254 energy= 0.893877655282503  occ= 0
MO #255 energy= 0.908959668475148  occ= 0
MO #256 energy= 0.912448513987714  occ= 0
MO #257 energy= 0.917344750792314  occ= 0
MO #258 energy= 0.926900256734897  occ= 0
MO #259 energy= 0.928724293122433  occ= 0
MO #260 energy= 0.934519899658853  occ= 0
MO #261 energy= 0.938057206914823  occ= 0
MO #262 energy= 0.942479002695483  occ= 0
MO #263 energy= 0.949448222814858  occ= 0
MO #264 energy= 0.952392940154896  occ= 0
MO #265 energy= 0.954721233814631  occ= 0
MO #266 energy= 0.967061098339473  occ= 0
MO #267 energy= 0.972511009130893  occ= 0
MO #268 energy= 0.981771820808887  occ= 0
MO #269 energy= 0.987463018382075  occ= 0
MO #270 energy= 0.991713316421406  occ= 0
MO #271 energy= 0.994097575629013  occ= 0
MO #272 energy= 0.997007680812028  occ= 0
MO #273 energy= 1.00386851178208   occ= 0
      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


MO #274 energy= 1.00765145641107   occ= 0
MO #275 energy= 1.03128542595348   occ= 0
MO #276 energy= 1.0337744660856    occ= 0
MO #277 energy= 1.04329704958815   occ= 0
MO #278 energy= 1.04592880259455   occ= 0
MO #279 energy= 1.04795198789049   occ= 0
MO #280 energy= 1.04920707191851   occ= 0
MO #281 energy= 1.07960865396093   occ= 0
MO #282 energy= 1.08104768748518   occ= 0
MO #283 energy= 1.08502782576585   occ= 0
System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
MO #284 energy= 1.08989371666685   occ= 0
MO #285 energy= 1.09098777002709   occ= 0
MO #286 energy= 1.09316410611502   occ= 0
MO #287 energy= 1.09418557543682   occ= 0
MO #288 energy= 1.11534432460594   occ= 0
MO #289 energy= 1.11600568744122   occ= 0
MO #290 energy= 1.12639670312708   occ= 0
MO #291 energy= 1.15752938274384   occ= 0
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
MO #292 energy= 1.1641745967206    occ= 0
MO #293 energy= 1.17160217247975   occ= 0
MO #294 energy= 1.1743506328245    occ= 0
MO #295 energy= 1.19553432553882   occ= 0
MO #296 energy= 1.19780777475041   occ= 0
MO #297 energy= 1.21016743011463   occ= 0
MO #298 energy= 1.21321894843416   occ= 0
MO #299 energy= 1.22004876322705   occ= 0
MO #300 energy= 1.22236308749071   occ= 0
MO #301 energy= 1.230351704367     occ= 0
MO #302 energy= 1.23472316532119   occ= 0
MO #303 energy= 1.25244152395825   occ= 0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

MO #304 energy= 1.25967050930163   occ= 0
MO #305 energy= 1.26370823724838   occ= 0
MO #306 energy= 1.26710888136414   occ= 0
MO #307 energy= 1.27511164901323   occ= 0
MO #308 energy= 1.27730101864897   occ= 0
MO #309 energy= 1.28736322838364   occ= 0
MO #310 energy= 1.29305245666126   occ= 0
MO #311 energy= 1.29719043735593   occ= 0
MO #312 energy= 1.30039747744109   occ= 0
MO #313 energy= 1.30789613925726   occ= 0
MO #314 energy= 1.3111935301447    occ= 0
MO #315 energy= 1.32994269897393   occ= 0
MO #316 energy= 1.33239522000651   occ= 0
MO #317 energy= 1.34576667699203   occ= 0
MO #318 energy= 1.34615278550753   occ= 0
MO #319 energy= 1.37590880867388   occ= 0
MO #320 energy= 1.38572978301632   occ= 0
MO #321 energy= 1.396221679347     occ= 0
MO #322 energy= 1.40558324016113   occ= 0
MO #323 energy= 1.45489854879427   occ= 0
MO #324 energy= 1.46185864146626   occ= 0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
MO #325 energy= 1.47419903397648   occ= 0
MO #326 energy= 1.4816780459567    occ= 0
MO #327 energy= 1.49156539763246   occ= 0
MO #328 energy= 1.50091836360059   occ= 0
MO #329 energy= 1.52444723149532   occ= 0
MO #330 energy= 1.52732481655538   occ= 0
MO #331 energy= 1.56085542856078   occ= 0
MO #332 energy= 1.56175879559578   occ= 0
MO #333 energy= 1.57785230060933   occ= 0
MO #334 energy= 1.57890202006069   occ= 0
MO #335 energy= 1.58232950567765   occ= 0
MO #336 energy= 1.58369153502167   occ= 0
MO #337 energy= 1.59886108283756   occ= 0
MO #338 energy= 1.60025823924942   occ= 0
MO #339 energy= 1.62452104441972   occ= 0
MO #340 energy= 1.62554976224162   occ= 0
MO #341 energy= 1.62884485256704   occ= 0
MO #342 energy= 1.63534622957195   occ= 0
MO #343 energy= 1.64513885027963   occ= 0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
MO #344 energy= 1.64701283522981   occ= 0
MO #345 energy= 1.66309487443168   occ= 0
MO #346 energy= 1.66544622204519   occ= 0
MO #347 energy= 1.66899483563279   occ= 0
MO #348 energy= 1.66956863421379   occ= 0
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
MO #349 energy= 1.67487851079722   occ= 0
MO #350 energy= 1.67584221459191   occ= 0
MO #351 energy= 1.68216242233959   occ= 0
MO #352 energy= 1.68278069385985   occ= 0
MO #353 energy= 1.69192586805793   occ= 0
MO #354 energy= 1.6925567691829    occ= 0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
MO #355 energy= 1.69525621230587   occ= 0
MO #356 energy= 1.69727664006269   occ= 0
MO #357 energy= 1.70098348434711   occ= 0
MO #358 energy= 1.70276862432277   occ= 0
MO #359 energy= 1.70730766537223   occ= 0
MO #360 energy= 1.70881462123998   occ= 0
MO #361 energy= 1.71146507434198   occ= 0
MO #362 energy= 1.71348542102868   occ= 0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
MO #363 energy= 1.72549761270583   occ= 0
MO #364 energy= 1.72683393673129   occ= 0
MO #365 energy= 1.73943218221391   occ= 0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
MO #366 energy= 1.74071950941362   occ= 0
MO #367 energy= 1.75763557478357   occ= 0
MO #368 energy= 1.75991353824977   occ= 0
MO #369 energy= 1.76485380971902   occ= 0
MO #370 energy= 1.76660517407765   occ= 0
MO #371 energy= 1.77446488751996   occ= 0
MO #372 energy= 1.7765965653088    occ= 0
MO #373 energy= 1.78123363639901   occ= 0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
MO #374 energy= 1.7814309990232    occ= 0
MO #375 energy= 1.79082749511991   occ= 0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
MO #376 energy= 1.79098101950971   occ= 0
MO #377 energy= 1.80471211489708   occ= 0
MO #378 energy= 1.80481270001557   occ= 0
MO #379 energy= 1.83178420092846   occ= 0
MO #380 energy= 1.8354510744238    occ= 0
MO #381 energy= 1.84832584824196   occ= 0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
MO #382 energy= 1.85157827229334   occ= 0
MO #383 energy= 1.85749524290532   occ= 0
MO #384 energy= 1.8635369887241    occ= 0
MO #385 energy= 1.8683111791315    occ= 0
MO #386 energy= 1.87062086001068   occ= 0
MO #387 energy= 1.87629858680502   occ= 0
MO #388 energy= 1.87715914831692   occ= 0

MO #389 energy= 1.88554406065887   occ= 0
MO #390 energy= 1.88917741185981   occ= 0
MO #391 energy= 1.93012899450441   occ= 0
MO #392 energy= 1.93068236290688   occ= 0
MO #393 energy= 1.93314848260008   occ= 0
MO #394 energy= 1.94016202344894   occ= 0
MO #395 energy= 1.98859579982105   occ= 0
MO #396 energy= 1.99007785336752   occ= 0
MO #397 energy= 2.01434035464037   occ= 0
MO #398 energy= 2.01688769293167   occ= 0
MO #399 energy= 2.0411833495855    occ= 0
MO #400 energy= 2.04448970305151   occ= 0
MO #401 energy= 2.05943227918189   occ= 0
MO #402 energy= 2.06926058956849   occ= 0
MO #403 energy= 2.08682973244918   occ= 0
MO #404 energy= 2.09193188498489   occ= 0
MO #405 energy= 2.101709699494     occ= 0
MO #406 energy= 2.1108793022209    occ= 0
MO #407 energy= 2.1291870203074    occ= 0
MO #408 energy= 2.13801590238927   occ= 0
MO #409 energy= 2.14176545881436   occ= 0
MO #410 energy= 2.1450196208238    occ= 0
MO #411 energy= 2.15868262261725   occ= 0
MO #412 energy= 2.16788489073381   occ= 0
MO #413 energy= 2.1857502256477    occ= 0
MO #414 energy= 2.21009302228137   occ= 0
MO #415 energy= 2.21300556922216   occ= 0
MO #416 energy= 2.21882477578841   occ= 0
MO #417 energy= 2.22557969211272   occ= 0
MO #418 energy= 2.25261751378779   occ= 0
MO #419 energy= 2.29692507132523   occ= 0
MO #420 energy= 2.30613966325661   occ= 0
MO #421 energy= 2.31143855585051   occ= 0
MO #422 energy= 2.32943576659198   occ= 0
MO #423 energy= 2.33638147646118   occ= 0
MO #424 energy= 2.34554440485073   occ= 0
MO #425 energy= 2.36009757204013   occ= 0
MO #426 energy= 2.39451790917828   occ= 0
MO #427 energy= 2.43139785853254   occ= 0
MO #428 energy= 2.43772861921537   occ= 0
MO #429 energy= 2.45380307149587   occ= 0
MO #430 energy= 2.46578342271103   occ= 0
MO #431 energy= 2.53040193706599   occ= 0
MO #432 energy= 2.5524083206607    occ= 0
MO #433 energy= 2.62845806388158   occ= 0
MO #434 energy= 2.63689853794913   occ= 0
MO #435 energy= 2.66385072453738   occ= 0
MO #436 energy= 2.6679360542804    occ= 0
MO #437 energy= 2.69334862430164   occ= 0
MO #438 energy= 2.69779627989295   occ= 0
MO #439 energy= 2.70699763862399   occ= 0
MO #440 energy= 2.71280183966887   occ= 0
MO #441 energy= 2.72934174222413   occ= 0
MO #442 energy= 2.73174599062584   occ= 0
MO #443 energy= 2.75362283949089   occ= 0
MO #444 energy= 2.75734056996351   occ= 0
MO #445 energy= 2.77411450183585   occ= 0
MO #446 energy= 2.77678918342264   occ= 0
MO #447 energy= 2.81835851208078   occ= 0
nuclear repulsion = 2660.00686642269
MO #448 energy= 2.81993607298519   occ= 0
MO #449 energy= 2.87255128636423   occ= 0
MO #450 energy= 2.87355089610436   occ= 0
MO #451 energy= 2.94061481945667   occ= 0
MO #452 energy= 2.94593197067605   occ= 0
MO #453 energy= 2.97303845099355   occ= 0
number of shells = 122
MO #454 energy= 2.97360539882085   occ= 0
MO #455 energy= 3.0196029100728    occ= 0
number of NR pGTOs = 525
MO #456 energy= 3.02001984026213   occ= 0
MO #457 energy= 3.32903643169901   occ= 0
MO #458 energy= 3.3634990621047    occ= 0
MO #459 energy= 3.39485670600052   occ= 0
MO #460 energy= 3.40692331237293   occ= 0
MO #461 energy= 3.45985141451279   occ= 0
MO #462 energy= 3.47006729447743   occ= 0
MO #463 energy= 3.48761485483051   occ= 0
MO #464 energy= 3.5236234260126    occ= 0
MO #465 energy= 3.80550518835652   occ= 0
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
MO #466 energy= 3.84334922094689   occ= 0
MO #467 energy= 5.1789042263707    occ= 0
MO #468 energy= 5.21266219713619   occ= 0
MO #469 energy= 6.48825716585234   occ= 0
MO #470 energy= 6.50996785587028   occ= 0
MO #471 energy= 7.04676527683843   occ= 0
CPU time:         0.94
MO #472 energy= 7.08673745270027   occ= 0
MO #473 energy= 7.14618671413601   occ= 0
MO #474 energy= 7.17568503094404   occ= 0
MO #475 energy= 12.7334600087632   occ= 0
MO #476 energy= 12.7557061069846   occ= 0
MO #477 energy= 12.7823886127437   occ= 0
MO #478 energy= 12.8067219337505   occ= 0
MO #479 energy= 13.0851954224932   occ= 0
MO #480 energy= 13.1150811362844   occ= 0
MO #481 energy= 13.1443058452859   occ= 0
MO #482 energy= 13.1909315586718   occ= 0
MO #483 energy= 13.2765775993192   occ= 0
MO #484 energy= 13.349260702448    occ= 0
MO #485 energy= 18.0961178972256   occ= 0
MO #486 energy= 18.1550095837555   occ= 0
MO #487 energy= 29.6666663319065   occ= 0
MO #488 energy= 29.6921050122417   occ= 0
N_elec (98, 95), N_ao 264
MO #489 energy= 33.1974343180624   occ= 0
MO #490 energy= 33.250410128388    occ= 0
MO #491 energy= 33.2972045860071   occ= 0
MO #492 energy= 33.3280444905647   occ= 0
MO #493 energy= 65.2904541255464   occ= 0
MO #494 energy= 65.3061065621296   occ= 0
MO #495 energy= 65.34202807719     occ= 0
MO #496 energy= 65.3504650595711   occ= 0
MO #497 energy= 67.7935176123059   occ= 0
MO #498 energy= 67.8181143964217   occ= 0
MO #499 energy= 67.8352989386071   occ= 0
MO #500 energy= 67.8570479708898   occ= 0
MO #501 energy= 67.8950714568781   occ= 0
MO #502 energy= 67.925188954769    occ= 0
MO #503 energy= 75.5545708158186   occ= 0
MO #504 energy= 75.599984658367    occ= 0
MO #505 energy= 158.595912225287   occ= 0
MO #506 energy= 158.605961750812   occ= 0
MO #507 energy= 174.891795902499   occ= 0
MO #508 energy= 174.911551940957   occ= 0
MO #509 energy= 174.953847834927   occ= 0
MO #510 energy= 174.965006939016   occ= 0
MO #511 energy= 308.448632528      occ= 0
MO #512 energy= 308.462664829347   occ= 0
MO #513 energy= 725.229630057863   occ= 0
MO #514 energy= 725.231282420374   occ= 0
MO #515 energy= 846.745230851703   occ= 0
MO #516 energy= 846.747749931711   occ= 0
MO #517 energy= 846.783168297687   occ= 0
MO #518 energy= 846.784839727693   occ= 0
MO #519 energy= 1057.13910868825   occ= 0
MO #520 energy= 1057.1419301823    occ= 0
MO #521 energy= 2996.82678402585   occ= 0
MO #522 energy= 2996.82741192761   occ= 0
MO #523 energy= 7255.33903383888   occ= 0
MO #524 energy= 7255.33921753498   occ= 0
MO #525 energy= 15388.0040428729   occ= 0
MO #526 energy= 15388.0041056029   occ= 0
MO #527 energy= 35974.1097003076   occ= 0
MO #528 energy= 35974.1097191237   occ= 0
 ** Mulliken pop alpha/beta on meta-lowdin orthogonal AOs **
 ** Mulliken pop       alpha | beta **
pop of  0 Er 1s        0.99999 | 0.99999   
pop of  0 Er 2s        1.00000 | 1.00000   
pop of  0 Er 3s        1.00000 | 1.00000   
pop of  0 Er 4s        0.99999 | 0.99999   
pop of  0 Er 5s        0.99869 | 0.99869   
pop of  0 Er 6s        0.16426 | 0.16424   
pop of  0 Er 7s        0.00888 | 0.00888   
pop of  0 Er 8s        0.00154 | 0.00154   
pop of  0 Er 9s        0.00066 | 0.00066   
pop of  0 Er 10s        0.00018 | 0.00018   
pop of  0 Er 11s        0.00037 | 0.00037   
pop of  0 Er 12s        0.00009 | 0.00009   
pop of  0 Er 13s        0.00001 | 0.00001   
pop of  0 Er 14s        0.00000 | 0.00000   
pop of  0 Er 15s        0.00000 | 0.00000   
pop of  0 Er 16s        0.00000 | 0.00000   
pop of  0 Er 17s        0.00000 | 0.00000   
pop of  0 Er 18s        0.00000 | 0.00000   
pop of  0 Er 2px       0.99884 | 0.99884   
pop of  0 Er 2py       0.99884 | 0.99884   
pop of  0 Er 2pz       0.99884 | 0.99884   
pop of  0 Er 3px       0.99858 | 0.99858   
pop of  0 Er 3py       0.99858 | 0.99858   
pop of  0 Er 3pz       0.99858 | 0.99858   
pop of  0 Er 4px       0.99815 | 0.99815   
pop of  0 Er 4py       0.99814 | 0.99814   
pop of  0 Er 4pz       0.99815 | 0.99815   
pop of  0 Er 5px       0.99547 | 0.99548   
pop of  0 Er 5py       0.99581 | 0.99581   
pop of  0 Er 5pz       0.99557 | 0.99558   
pop of  0 Er 6px       0.00918 | 0.00917   
pop of  0 Er 6py       0.00779 | 0.00778   
pop of  0 Er 6pz       0.00810 | 0.00809   
pop of  0 Er 7px       0.00755 | 0.00754   
pop of  0 Er 7py       0.00465 | 0.00465   
pop of  0 Er 7pz       0.00692 | 0.00691   
pop of  0 Er 8px       0.00558 | 0.00559   
pop of  0 Er 8py       0.00406 | 0.00406   
pop of  0 Er 8pz       0.00682 | 0.00682   
pop of  0 Er 9px       0.00129 | 0.00129   
pop of  0 Er 9py       0.00144 | 0.00144   
pop of  0 Er 9pz       0.00176 | 0.00176   
pop of  0 Er 10px       0.00052 | 0.00052   
pop of  0 Er 10py       0.00059 | 0.00059   
pop of  0 Er 10pz       0.00068 | 0.00068   
pop of  0 Er 11px       0.00086 | 0.00086   
pop of  0 Er 11py       0.00082 | 0.00082   
pop of  0 Er 11pz       0.00089 | 0.00089   
pop of  0 Er 12px       0.00073 | 0.00073   
pop of  0 Er 12py       0.00067 | 0.00067   
pop of  0 Er 12pz       0.00071 | 0.00071   
pop of  0 Er 13px       0.00171 | 0.00171   
pop of  0 Er 13py       0.00171 | 0.00171   
pop of  0 Er 13pz       0.00171 | 0.00171   
pop of  0 Er 3dxy      0.99990 | 0.99990   
pop of  0 Er 3dyz      0.99990 | 0.99990   
pop of  0 Er 3dz^2     0.99990 | 0.99990   
pop of  0 Er 3dxz      0.99990 | 0.99990   
pop of  0 Er 3dx2-y2    0.99990 | 0.99990   
pop of  0 Er 4dxy      0.99971 | 0.99971   
pop of  0 Er 4dyz      0.99971 | 0.99971   
pop of  0 Er 4dz^2     0.99971 | 0.99971   
pop of  0 Er 4dxz      0.99971 | 0.99971   
pop of  0 Er 4dx2-y2    0.99971 | 0.99971   
pop of  0 Er 5dxy      0.01649 | 0.01648   
pop of  0 Er 5dyz      0.01823 | 0.01822   
pop of  0 Er 5dz^2     0.01498 | 0.01498   
pop of  0 Er 5dxz      0.01367 | 0.01364   
pop of  0 Er 5dx2-y2    0.01416 | 0.01415   
pop of  0 Er 6dxy      0.00307 | 0.00307   
pop of  0 Er 6dyz      0.00323 | 0.00324   
pop of  0 Er 6dz^2     0.00252 | 0.00252   
pop of  0 Er 6dxz      0.00260 | 0.00259   
pop of  0 Er 6dx2-y2    0.00227 | 0.00226   
pop of  0 Er 7dxy      0.00247 | 0.00247   
pop of  0 Er 7dyz      0.00268 | 0.00268   
pop of  0 Er 7dz^2     0.00175 | 0.00175   
pop of  0 Er 7dxz      0.00192 | 0.00192   
pop of  0 Er 7dx2-y2    0.00163 | 0.00163   
pop of  0 Er 8dxy      0.00305 | 0.00304   
pop of  0 Er 8dyz      0.00290 | 0.00290   
pop of  0 Er 8dz^2     0.00281 | 0.00281   
pop of  0 Er 8dxz      0.00275 | 0.00275   
pop of  0 Er 8dx2-y2    0.00194 | 0.00194   
pop of  0 Er 9dxy      0.00302 | 0.00302   
pop of  0 Er 9dyz      0.00364 | 0.00364   
pop of  0 Er 9dz^2     0.00353 | 0.00353   
pop of  0 Er 9dxz      0.00369 | 0.00369   
pop of  0 Er 9dx2-y2    0.00224 | 0.00224   
pop of  0 Er 10dxy      0.00021 | 0.00021   
pop of  0 Er 10dyz      0.00027 | 0.00027   
pop of  0 Er 10dz^2     0.00024 | 0.00024   
pop of  0 Er 10dxz      0.00024 | 0.00024   
pop of  0 Er 10dx2-y2    0.00020 | 0.00020   
pop of  0 Er 11dxy      0.00112 | 0.00113   
pop of  0 Er 11dyz      0.00189 | 0.00189   
pop of  0 Er 11dz^2     0.00146 | 0.00146   
pop of  0 Er 11dxz      0.00153 | 0.00153   
pop of  0 Er 11dx2-y2    0.00099 | 0.00099   
pop of  0 Er 4f-3      0.76963 | 0.76709   
pop of  0 Er 4f-2      0.75391 | 0.74666   
pop of  0 Er 4f-1      0.81083 | 0.80992   
pop of  0 Er 4f+0      0.75389 | 0.74937   
pop of  0 Er 4f+1      0.77565 | 0.77521   
pop of  0 Er 4f+2      0.74893 | 0.74703   
pop of  0 Er 4f+3      0.89585 | 0.88833   
pop of  0 Er 5f-3      0.00101 | 0.00101   
pop of  0 Er 5f-2      0.00132 | 0.00131   
pop of  0 Er 5f-1      0.00112 | 0.00111   
pop of  0 Er 5f+0      0.00101 | 0.00100   
pop of  0 Er 5f+1      0.00128 | 0.00127   
pop of  0 Er 5f+2      0.00109 | 0.00108   
pop of  0 Er 5f+3      0.00093 | 0.00092   
pop of  0 Er 6f-3      0.00139 | 0.00139   
pop of  0 Er 6f-2      0.00158 | 0.00158   
pop of  0 Er 6f-1      0.00185 | 0.00185   
pop of  0 Er 6f+0      0.00196 | 0.00196   
pop of  0 Er 6f+1      0.00165 | 0.00165   
pop of  0 Er 6f+2      0.00168 | 0.00167   
pop of  0 Er 6f+3      0.00166 | 0.00166   
pop of  1 O 1s        0.99999 | 0.99999   
pop of  1 O 2s        0.86238 | 0.86239   
pop of  1 O 3s        0.00507 | 0.00507   
pop of  1 O 2px       0.78688 | 0.78689   
pop of  1 O 2py       0.89038 | 0.89043   
pop of  1 O 2pz       0.86864 | 0.86865   
pop of  1 O 3px       0.00274 | 0.00274   
pop of  1 O 3py       0.00420 | 0.00421   
pop of  1 O 3pz       0.00426 | 0.00427   
pop of  2 O 1s        0.99999 | 0.99999   
pop of  2 O 2s        0.86100 | 0.86100   
pop of  2 O 3s        0.00610 | 0.00610   
pop of  2 O 2px       0.95210 | 0.95210   
pop of  2 O 2py       0.82762 | 0.82762   
pop of  2 O 2pz       0.75524 | 0.75524   
pop of  2 O 3px       0.00541 | 0.00541   
pop of  2 O 3py       0.00310 | 0.00310   
pop of  2 O 3pz       0.00185 | 0.00185   
pop of  3 O 1s        0.99999 | 0.99999   
pop of  3 O 2s        0.86843 | 0.86843   
pop of  3 O 3s        0.00483 | 0.00483   
pop of  3 O 2px       0.78782 | 0.78782   
pop of  3 O 2py       0.85497 | 0.85496   
pop of  3 O 2pz       0.88480 | 0.88479   
pop of  3 O 3px       0.00254 | 0.00254   
pop of  3 O 3py       0.00380 | 0.00380   
pop of  3 O 3pz       0.00406 | 0.00407   
pop of  4 O 1s        0.99999 | 0.99999   
pop of  4 O 2s        0.86517 | 0.86517   
pop of  4 O 3s        0.00503 | 0.00503   
pop of  4 O 2px       0.77941 | 0.77940   
pop of  4 O 2py       0.90952 | 0.90951   
pop of  4 O 2pz       0.86760 | 0.86759   
pop of  4 O 3px       0.00271 | 0.00271   
pop of  4 O 3py       0.00467 | 0.00466   
pop of  4 O 3pz       0.00441 | 0.00441   
pop of  5 O 1s        0.99999 | 0.99999   
pop of  5 O 2s        0.85927 | 0.85927   
pop of  5 O 3s        0.00624 | 0.00624   
pop of  5 O 2px       0.94809 | 0.94809   
pop of  5 O 2py       0.81783 | 0.81784   
pop of  5 O 2pz       0.77326 | 0.77325   
pop of  5 O 3px       0.00534 | 0.00534   
pop of  5 O 3py       0.00278 | 0.00278   
pop of  5 O 3pz       0.00235 | 0.00235   
pop of  6 O 1s        0.99999 | 0.99999   
pop of  6 O 2s        0.85930 | 0.85928   
pop of  6 O 3s        0.00512 | 0.00511   
pop of  6 O 2px       0.80958 | 0.80957   
pop of  6 O 2py       0.82951 | 0.82949   
pop of  6 O 2pz       0.88135 | 0.88133   
pop of  6 O 3px       0.00269 | 0.00269   
pop of  6 O 3py       0.00319 | 0.00319   
pop of  6 O 3pz       0.00401 | 0.00400   
pop of  7 O 1s        0.99999 | 0.99999   
pop of  7 O 2s        0.86113 | 0.86114   
pop of  7 O 3s        0.00521 | 0.00521   
pop of  7 O 2px       0.93748 | 0.93752   
pop of  7 O 2py       0.83279 | 0.83280   
pop of  7 O 2pz       0.77274 | 0.77273   
pop of  7 O 3px       0.00536 | 0.00536   
pop of  7 O 3py       0.00348 | 0.00348   
pop of  7 O 3pz       0.00192 | 0.00192   
pop of  8 O 1s        0.99999 | 0.99999   
pop of  8 O 2s        0.86476 | 0.86478   
pop of  8 O 3s        0.00508 | 0.00509   
pop of  8 O 2px       0.72503 | 0.72504   
pop of  8 O 2py       0.91093 | 0.91098   
pop of  8 O 2pz       0.91786 | 0.91789   
pop of  8 O 3px       0.00127 | 0.00127   
pop of  8 O 3py       0.00491 | 0.00492   
pop of  8 O 3pz       0.00558 | 0.00559   
pop of  9 O 1s        0.99999 | 0.99999   
pop of  9 O 2s        0.86969 | 0.86969   
pop of  9 O 3s        0.00497 | 0.00497   
pop of  9 O 2px       0.71917 | 0.71915   
pop of  9 O 2py       0.91367 | 0.91368   
pop of  9 O 2pz       0.92317 | 0.92315   
pop of  9 O 3px       0.00120 | 0.00119   
pop of  9 O 3py       0.00503 | 0.00502   
pop of  9 O 3pz       0.00592 | 0.00591   
pop of  10 O 1s        0.99999 | 0.99999   
pop of  10 O 2s        0.85878 | 0.85879   
pop of  10 O 3s        0.00605 | 0.00605   
pop of  10 O 2px       0.85078 | 0.85078   
pop of  10 O 2py       0.80730 | 0.80731   
pop of  10 O 2pz       0.84974 | 0.84974   
pop of  10 O 3px       0.00277 | 0.00277   
pop of  10 O 3py       0.00257 | 0.00257   
pop of  10 O 3pz       0.00354 | 0.00354   
pop of  11 O 1s        0.99999 | 0.99999   
pop of  11 O 2s        0.86120 | 0.86119   
pop of  11 O 3s        0.00521 | 0.00521   
pop of  11 O 2px       0.93598 | 0.93598   
pop of  11 O 2py       0.83429 | 0.83430   
pop of  11 O 2pz       0.76550 | 0.76551   
pop of  11 O 3px       0.00517 | 0.00517   
pop of  11 O 3py       0.00344 | 0.00344   
pop of  11 O 3pz       0.00185 | 0.00185   
pop of  12 C 1s        0.99999 | 0.99999   
pop of  12 C 2s        0.41723 | 0.41724   
pop of  12 C 3s        0.00983 | 0.00983   
pop of  12 C 2px       0.41423 | 0.41423   
pop of  12 C 2py       0.37712 | 0.37712   
pop of  12 C 2pz       0.41061 | 0.41061   
pop of  12 C 3px       0.01875 | 0.01875   
pop of  12 C 3py       0.00444 | 0.00444   
pop of  12 C 3pz       0.01307 | 0.01308   
pop of  13 C 1s        0.99999 | 0.99999   
pop of  13 C 2s        0.41299 | 0.41298   
pop of  13 C 3s        0.01008 | 0.01008   
pop of  13 C 2px       0.41173 | 0.41173   
pop of  13 C 2py       0.38620 | 0.38620   
pop of  13 C 2pz       0.40561 | 0.40561   
pop of  13 C 3px       0.01819 | 0.01819   
pop of  13 C 3py       0.00706 | 0.00706   
pop of  13 C 3pz       0.01118 | 0.01118   
pop of  14 C 1s        0.99999 | 0.99999   
pop of  14 C 2s        0.41349 | 0.41350   
pop of  14 C 3s        0.01007 | 0.01007   
pop of  14 C 2px       0.41401 | 0.41401   
pop of  14 C 2py       0.38833 | 0.38833   
pop of  14 C 2pz       0.40144 | 0.40144   
pop of  14 C 3px       0.01701 | 0.01702   
pop of  14 C 3py       0.00663 | 0.00663   
pop of  14 C 3pz       0.01273 | 0.01273   
pop of  15 C 1s        0.99999 | 0.99999   
pop of  15 C 2s        0.41551 | 0.41550   
pop of  15 C 3s        0.01006 | 0.01006   
pop of  15 C 2px       0.41245 | 0.41245   
pop of  15 C 2py       0.38723 | 0.38723   
pop of  15 C 2pz       0.40137 | 0.40137   
pop of  15 C 3px       0.01657 | 0.01657   
pop of  15 C 3py       0.00663 | 0.00663   
pop of  15 C 3pz       0.01279 | 0.01279   
pop of  16 O 1s        0.99999 | 0.99999   
pop of  16 O 2s        0.85984 | 0.85984   
pop of  16 O 3s        0.00602 | 0.00602   
pop of  16 O 2px       0.84264 | 0.84264   
pop of  16 O 2py       0.81149 | 0.81149   
pop of  16 O 2pz       0.84951 | 0.84951   
pop of  16 O 3px       0.00264 | 0.00264   
pop of  16 O 3py       0.00266 | 0.00266   
pop of  16 O 3pz       0.00353 | 0.00353   
In total            96.51258 | 96.48742  
 ** Mulliken atomic charges   ( Nelec_alpha | Nelec_beta ) **
charge of  0Er =      2.24419  (    32.89055     32.86527 )
charge of  1O =     -0.84918  (     4.42454      4.42464 )
charge of  2O =     -0.82482  (     4.41241      4.41241 )
charge of  3O =     -0.82248  (     4.41125      4.41124 )
charge of  4O =     -0.87698  (     4.43851      4.43847 )
charge of  5O =     -0.83032  (     4.41515      4.41516 )
charge of  6O =     -0.78941  (     4.39475      4.39466 )
charge of  7O =     -0.84025  (     4.42011      4.42014 )
charge of  8O =     -0.87095  (     4.43541      4.43554 )
charge of  9O =     -0.88557  (     4.44281      4.44276 )
charge of  10O =     -0.76305  (     4.38152      4.38153 )
charge of  11O =     -0.82529  (     4.41264      4.41265 )
charge of  12C =      0.66944  (     2.66527      2.66529 )
charge of  13C =      0.67395  (     2.66303      2.66301 )
charge of  14C =      0.67258  (     2.66371      2.66372 )
charge of  15C =      0.67479  (     2.66260      2.66260 )
charge of  16O =     -0.75665  (     4.37833      4.37833 )
(3, 264, 264) 264
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.98
N_elec (98, 95), N_ao 264
S vector [ 0.8373-0.j -1.1834+0.j  0.0126+0.j]
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.97
N_elec (98, 95), N_ao 264
(3, 264, 264) 264
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.96
N_elec (98, 95), N_ao 264
L vector [ 3.4686-0.j -4.9342-0.j  0.0593-0.j]
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.97
N_elec (98, 95), N_ao 264
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
(3, 264, 264) 264
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.98
N_elec (98, 95), N_ao 264
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.97
N_elec (98, 95), N_ao 264
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_49/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-93-04.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:09:39 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.96
N_elec (98, 95), N_ao 264
J vector [ 4.3059-0.j -6.1176+0.j  0.0719+0.j]
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
ao_index [ 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383]
ao_labels ['0 Er 4f-3  ' '0 Er 4f-2  ' '0 Er 4f-1  ' '0 Er 4f+0  ' '0 Er 4f+1  ' '0 Er 4f+2  ' '0 Er 4f+3  ' '0 Er 5f-3  ' '0 Er 5f-2  ' '0 Er 5f-1  ' '0 Er 5f+0  ' '0 Er 5f+1  ' '0 Er 5f+2  ' '0 Er 5f+3  ' '0 Er 6f-3  ' '0 Er 6f-2  ' '0 Er 6f-1  ' '0 Er 6f+0  ' '0 Er 6f+1  ' '0 Er 6f+2  ' '0 Er 6f+3  ']
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
  J     M     c^2  
rank = 0, idx_lst = [ 0 16]
rank = 4, idx_lst = [ 4 20]
rank = 6, idx_lst = [ 6 22]
rank = 10, idx_lst = [10 26]
rank = 14, idx_lst = [14]
rank = 12, idx_lst = [12 28]
rank = 8, idx_lst = [ 8 24]
rank = 2, idx_lst = [ 2 18]
rank = 11, idx_lst = [11 27]
rank = 5, idx_lst = [ 5 21]
rank = 15, idx_lst = [15]
rank = 7, idx_lst = [ 7 23]
rank = 3, idx_lst = [ 3 19]
rank = 1, idx_lst = [ 1 17]
rank = 13, idx_lst = [13]
rank = 9, idx_lst = [ 9 25]
[hpc-93-04.cm.cluster:1120303] 15 more processes have sent help message help-mpi-btl-openib.txt / error in device init
[hpc-93-04.cm.cluster:1120303] Set MCA parameter "orte_base_help_aggregate" to 0 to see all help / error messages
 7.5    7.5    7.5    0.00002    0.00000
 7.5    7.5    6.5    0.00006   -0.00006
 7.5    7.5    5.5    0.00002   -0.00022
 7.5    7.5    4.5   -0.00035   -0.00036
 7.5    7.5    3.5   -0.00089    0.00010
 7.5    7.5    2.5   -0.00067    0.00114
 7.5    7.5    1.5    0.00067    0.00154
 7.5    7.5    0.5    0.00184    0.00039
 7.5    7.5   -0.5    0.00136   -0.00127
 7.5    7.5   -1.5   -0.00025   -0.00161
 7.5    7.5   -2.5   -0.00112   -0.00053
 7.5    7.5   -3.5   -0.00071    0.00043
 7.5    7.5   -4.5   -0.00000    0.00048
 7.5    7.5   -5.5    0.00020    0.00012
 7.5    7.5   -6.5    0.00008   -0.00005
 7.5    7.5   -7.5   -0.00000   -0.00003
 7.5    6.5    6.5    0.00036   -0.00001
 7.5    6.5    5.5    0.00071   -0.00074
 7.5    6.5    4.5   -0.00019   -0.00223
 7.5    6.5    3.5   -0.00331   -0.00220
 7.5    6.5    2.5   -0.00556    0.00196
 7.5    6.5    1.5   -0.00216    0.00721
 7.5    6.5    0.5    0.00516    0.00663
 7.5    6.5   -0.5    0.00829   -0.00042
 7.5    6.5   -1.5    0.00380   -0.00617
 7.5    6.5   -2.5   -0.00229   -0.00506
 7.5    6.5   -3.5   -0.00367   -0.00058
 7.5    6.5   -4.5   -0.00140    0.00162
 7.5    6.5   -5.5    0.00035    0.00098
 7.5    6.5   -6.5    0.00041    0.00005
 7.5    6.5   -7.5    0.00006   -0.00010
 7.5    5.5    5.5    0.00299   -0.00000
 7.5    5.5    4.5    0.00424   -0.00492
 7.5    5.5    3.5   -0.00208   -0.01126
 7.5    5.5    2.5   -0.01517   -0.00765
 7.5    5.5    1.5   -0.01934    0.00989
 7.5    5.5    0.5   -0.00352    0.02404
 7.5    5.5   -0.5    0.01745    0.01643
 7.5    5.5   -1.5    0.02043   -0.00441
 7.5    5.5   -2.5    0.00597   -0.01487
 7.5    5.5   -3.5   -0.00612   -0.00880
 7.5    5.5   -4.5   -0.00616    0.00031
 7.5    5.5   -5.5   -0.00135    0.00268
 7.5    5.5   -6.5    0.00072    0.00096
 7.5    5.5   -7.5    0.00034   -0.00008
 7.5    4.5    4.5    0.01417    0.00001
 7.5    4.5    3.5    0.01561   -0.01944
 7.5    4.5    2.5   -0.00891   -0.03585
 7.5    4.5    1.5   -0.04370   -0.01790
 7.5    4.5    0.5   -0.04468    0.02824
 7.5    4.5   -0.5   -0.00240    0.05211
 7.5    4.5   -1.5    0.03623    0.02747
 7.5    4.5   -2.5    0.03300   -0.01121
 7.5    4.5   -3.5    0.00585   -0.02256
 7.5    4.5   -4.5   -0.00924   -0.00972
 7.5    4.5   -5.5   -0.00633    0.00157
 7.5    4.5   -6.5   -0.00056    0.00254
 7.5    4.5   -7.5    0.00063    0.00045
 7.5    3.5    3.5    0.04389    0.00003
 7.5    3.5    2.5    0.03940   -0.05169
 7.5    3.5    1.5   -0.02350   -0.07965
 7.5    3.5    0.5   -0.08787   -0.03033
 7.5    3.5   -0.5   -0.07421    0.05398
 7.5    3.5   -1.5    0.00210    0.07997
 7.5    3.5   -2.5    0.05168    0.03301
 7.5    3.5   -3.5    0.03740   -0.01676
 7.5    3.5   -4.5    0.00319   -0.02337
 7.5    3.5   -5.5   -0.00911   -0.00696
 7.5    3.5   -6.5   -0.00410    0.00202
 7.5    3.5   -7.5    0.00007    0.00135
 7.5    2.5    2.5    0.09626    0.00004
 7.5    2.5    1.5    0.07274   -0.09918
 7.5    2.5    0.5   -0.04312   -0.13069
 7.5    2.5   -0.5   -0.13017   -0.03903
 7.5    2.5   -1.5   -0.09238    0.07420
 7.5    2.5   -2.5    0.00747    0.09052
 7.5    2.5   -3.5    0.05330    0.02904
 7.5    2.5   -4.5    0.03038   -0.01720
 7.5    2.5   -5.5    0.00002   -0.01698
 7.5    2.5   -6.5   -0.00606   -0.00301
 7.5    2.5   -7.5   -0.00153    0.00129
 7.5    1.5    1.5    0.15719    0.00002
 7.5    1.5    0.5    0.10212   -0.14326
 7.5    1.5   -0.5   -0.05814   -0.16365
 7.5    1.5   -1.5   -0.14628   -0.03914
 7.5    1.5   -2.5   -0.08770    0.07609
 7.5    1.5   -3.5    0.01034    0.07690
 7.5    1.5   -4.5    0.04069    0.01832
 7.5    1.5   -5.5    0.01751   -0.01280
 7.5    1.5   -6.5   -0.00148   -0.00852
 7.5    1.5   -7.5   -0.00248   -0.00059
 7.5    0.5    0.5    0.19695   -0.00001
 7.5    0.5   -0.5    0.11135   -0.15940
 7.5    0.5   -1.5   -0.05939   -0.15876
 7.5    0.5   -2.5   -0.12634   -0.03050
 7.5    0.5   -3.5   -0.06340    0.05939
 7.5    0.5   -4.5    0.00974    0.04901
 7.5    0.5   -5.5    0.02305    0.00765
 7.5    0.5   -6.5    0.00681   -0.00688
 7.5    0.5   -7.5   -0.00107   -0.00265
 7.5   -0.5   -0.5    0.19205   -0.00004
 7.5   -0.5   -1.5    0.09491   -0.13796
 7.5   -0.5   -2.5   -0.04681   -0.11950
 7.5   -0.5   -3.5   -0.08395   -0.01773
 7.5   -0.5   -4.5   -0.03419    0.03560
 7.5   -0.5   -5.5    0.00684    0.02300
 7.5   -0.5   -6.5    0.00941    0.00163
 7.5   -0.5   -7.5    0.00154   -0.00236
 7.5   -1.5   -1.5    0.14603   -0.00001
 7.5   -1.5   -2.5    0.06271   -0.09276
 7.5   -1.5   -3.5   -0.02879   -0.06907
 7.5   -1.5   -4.5   -0.04248   -0.00697
 7.5   -1.5   -5.5   -0.01316    0.01628
 7.5   -1.5   -6.5    0.00348    0.00757
 7.5   -1.5   -7.5    0.00246   -0.00006
 7.5   -2.5   -2.5    0.08589    0.00000
 7.5   -2.5   -3.5    0.03153   -0.04799
 7.5   -2.5   -4.5   -0.01382   -0.02998
 7.5   -2.5   -5.5   -0.01598   -0.00138
 7.5   -2.5   -6.5   -0.00334    0.00546
 7.5   -2.5   -7.5    0.00109    0.00154
 7.5   -3.5   -3.5    0.03840    0.00003
 7.5   -3.5   -4.5    0.01170   -0.01874
 7.5   -3.5   -5.5   -0.00509   -0.00943
 7.5   -3.5   -6.5   -0.00426    0.00013
 7.5   -3.5   -7.5   -0.00047    0.00117
 7.5   -4.5   -4.5    0.01271    0.00003
 7.5   -4.5   -5.5    0.00307   -0.00536
 7.5   -4.5   -6.5   -0.00137   -0.00204
 7.5   -4.5   -7.5   -0.00071    0.00013
 7.5   -5.5   -5.5    0.00300    0.00002
 7.5   -5.5   -6.5    0.00055   -0.00107
 7.5   -5.5   -7.5   -0.00023   -0.00028
 7.5   -6.5   -6.5    0.00047    0.00001
 7.5   -6.5   -7.5    0.00006   -0.00012
 7.5   -7.5   -7.5    0.00004
triangle [[ 0.    +0.j      0.0001-0.0001j  0.    -0.0002j -0.0004-0.0004j -0.0009+0.0001j -0.0007+0.0011j  0.0007+0.0015j  0.0018+0.0004j  0.0014-0.0013j -0.0002-0.0016j -0.0011-0.0005j -0.0007+0.0004j -0.    +0.0005j  0.0002+0.0001j  0.0001-0.0001j -0.    -0.j    ]
 [ 0.    +0.j      0.0004-0.j      0.0007-0.0007j -0.0002-0.0022j -0.0033-0.0022j -0.0056+0.002j  -0.0022+0.0072j  0.0052+0.0066j  0.0083-0.0004j  0.0038-0.0062j -0.0023-0.0051j -0.0037-0.0006j -0.0014+0.0016j  0.0003+0.001j   0.0004+0.j      0.0001-0.0001j]
 [ 0.    +0.j      0.    +0.j      0.003 -0.j      0.0042-0.0049j -0.0021-0.0113j -0.0152-0.0077j -0.0193+0.0099j -0.0035+0.024j   0.0174+0.0164j  0.0204-0.0044j  0.006 -0.0149j -0.0061-0.0088j -0.0062+0.0003j -0.0013+0.0027j  0.0007+0.001j   0.0003-0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.0142+0.j      0.0156-0.0194j -0.0089-0.0358j -0.0437-0.0179j -0.0447+0.0282j -0.0024+0.0521j  0.0362+0.0275j  0.033 -0.0112j  0.0058-0.0226j -0.0092-0.0097j -0.0063+0.0016j -0.0006+0.0025j  0.0006+0.0004j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0439+0.j      0.0394-0.0517j -0.0235-0.0797j -0.0879-0.0303j -0.0742+0.054j   0.0021+0.08j    0.0517+0.033j   0.0374-0.0168j  0.0032-0.0234j -0.0091-0.007j  -0.0041+0.002j   0.0001+0.0013j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0963+0.j      0.0727-0.0992j -0.0431-0.1307j -0.1302-0.039j  -0.0924+0.0742j  0.0075+0.0905j  0.0533+0.029j   0.0304-0.0172j  0.    -0.017j  -0.0061-0.003j  -0.0015+0.0013j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.1572+0.j      0.1021-0.1433j -0.0581-0.1637j -0.1463-0.0391j -0.0877+0.0761j  0.0103+0.0769j  0.0407+0.0183j  0.0175-0.0128j -0.0015-0.0085j -0.0025-0.0006j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.197 -0.j      0.1114-0.1594j -0.0594-0.1588j -0.1263-0.0305j -0.0634+0.0594j  0.0097+0.049j   0.0231+0.0077j  0.0068-0.0069j -0.0011-0.0027j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.1921-0.j      0.0949-0.138j  -0.0468-0.1195j -0.0839-0.0177j -0.0342+0.0356j  0.0068+0.023j   0.0094+0.0016j  0.0015-0.0024j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.146 -0.j      0.0627-0.0928j -0.0288-0.0691j -0.0425-0.007j  -0.0132+0.0163j  0.0035+0.0076j  0.0025-0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0859+0.j      0.0315-0.048j  -0.0138-0.03j   -0.016 -0.0014j -0.0033+0.0055j  0.0011+0.0015j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0384+0.j      0.0117-0.0187j -0.0051-0.0094j -0.0043+0.0001j -0.0005+0.0012j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0127+0.j      0.0031-0.0054j -0.0014-0.002j  -0.0007+0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.003 +0.j      0.0005-0.0011j -0.0002-0.0003j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0005+0.j      0.0001-0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j    ]]
full [[ 0.    +0.j      0.0001-0.0001j  0.    -0.0002j -0.0004-0.0004j -0.0009+0.0001j -0.0007+0.0011j  0.0007+0.0015j  0.0018+0.0004j  0.0014-0.0013j -0.0002-0.0016j -0.0011-0.0005j -0.0007+0.0004j -0.    +0.0005j  0.0002+0.0001j  0.0001-0.0001j -0.    -0.j    ]
 [ 0.0001+0.0001j  0.0004+0.j      0.0007-0.0007j -0.0002-0.0022j -0.0033-0.0022j -0.0056+0.002j  -0.0022+0.0072j  0.0052+0.0066j  0.0083-0.0004j  0.0038-0.0062j -0.0023-0.0051j -0.0037-0.0006j -0.0014+0.0016j  0.0003+0.001j   0.0004+0.j      0.0001-0.0001j]
 [ 0.    +0.0002j  0.0007+0.0007j  0.003 +0.j      0.0042-0.0049j -0.0021-0.0113j -0.0152-0.0077j -0.0193+0.0099j -0.0035+0.024j   0.0174+0.0164j  0.0204-0.0044j  0.006 -0.0149j -0.0061-0.0088j -0.0062+0.0003j -0.0013+0.0027j  0.0007+0.001j   0.0003-0.0001j]
 [-0.0004+0.0004j -0.0002+0.0022j  0.0042+0.0049j  0.0142+0.j      0.0156-0.0194j -0.0089-0.0358j -0.0437-0.0179j -0.0447+0.0282j -0.0024+0.0521j  0.0362+0.0275j  0.033 -0.0112j  0.0058-0.0226j -0.0092-0.0097j -0.0063+0.0016j -0.0006+0.0025j  0.0006+0.0004j]
 [-0.0009-0.0001j -0.0033+0.0022j -0.0021+0.0113j  0.0156+0.0194j  0.0439+0.j      0.0394-0.0517j -0.0235-0.0797j -0.0879-0.0303j -0.0742+0.054j   0.0021+0.08j    0.0517+0.033j   0.0374-0.0168j  0.0032-0.0234j -0.0091-0.007j  -0.0041+0.002j   0.0001+0.0013j]
 [-0.0007-0.0011j -0.0056-0.002j  -0.0152+0.0077j -0.0089+0.0358j  0.0394+0.0517j  0.0963+0.j      0.0727-0.0992j -0.0431-0.1307j -0.1302-0.039j  -0.0924+0.0742j  0.0075+0.0905j  0.0533+0.029j   0.0304-0.0172j  0.    -0.017j  -0.0061-0.003j  -0.0015+0.0013j]
 [ 0.0007-0.0015j -0.0022-0.0072j -0.0193-0.0099j -0.0437+0.0179j -0.0235+0.0797j  0.0727+0.0992j  0.1572+0.j      0.1021-0.1433j -0.0581-0.1637j -0.1463-0.0391j -0.0877+0.0761j  0.0103+0.0769j  0.0407+0.0183j  0.0175-0.0128j -0.0015-0.0085j -0.0025-0.0006j]
 [ 0.0018-0.0004j  0.0052-0.0066j -0.0035-0.024j  -0.0447-0.0282j -0.0879+0.0303j -0.0431+0.1307j  0.1021+0.1433j  0.197 +0.j      0.1114-0.1594j -0.0594-0.1588j -0.1263-0.0305j -0.0634+0.0594j  0.0097+0.049j   0.0231+0.0077j  0.0068-0.0069j -0.0011-0.0027j]
 [ 0.0014+0.0013j  0.0083+0.0004j  0.0174-0.0164j -0.0024-0.0521j -0.0742-0.054j  -0.1302+0.039j  -0.0581+0.1637j  0.1114+0.1594j  0.1921+0.j      0.0949-0.138j  -0.0468-0.1195j -0.0839-0.0177j -0.0342+0.0356j  0.0068+0.023j   0.0094+0.0016j  0.0015-0.0024j]
 [-0.0002+0.0016j  0.0038+0.0062j  0.0204+0.0044j  0.0362-0.0275j  0.0021-0.08j   -0.0924-0.0742j -0.1463+0.0391j -0.0594+0.1588j  0.0949+0.138j   0.146 +0.j      0.0627-0.0928j -0.0288-0.0691j -0.0425-0.007j  -0.0132+0.0163j  0.0035+0.0076j  0.0025-0.0001j]
 [-0.0011+0.0005j -0.0023+0.0051j  0.006 +0.0149j  0.033 +0.0112j  0.0517-0.033j   0.0075-0.0905j -0.0877-0.0761j -0.1263+0.0305j -0.0468+0.1195j  0.0627+0.0928j  0.0859+0.j      0.0315-0.048j  -0.0138-0.03j   -0.016 -0.0014j -0.0033+0.0055j  0.0011+0.0015j]
 [-0.0007-0.0004j -0.0037+0.0006j -0.0061+0.0088j  0.0058+0.0226j  0.0374+0.0168j  0.0533-0.029j   0.0103-0.0769j -0.0634-0.0594j -0.0839+0.0177j -0.0288+0.0691j  0.0315+0.048j   0.0384+0.j      0.0117-0.0187j -0.0051-0.0094j -0.0043+0.0001j -0.0005+0.0012j]
 [-0.    -0.0005j -0.0014-0.0016j -0.0062-0.0003j -0.0092+0.0097j  0.0032+0.0234j  0.0304+0.0172j  0.0407-0.0183j  0.0097-0.049j  -0.0342-0.0356j -0.0425+0.007j  -0.0138+0.03j    0.0117+0.0187j  0.0127+0.j      0.0031-0.0054j -0.0014-0.002j  -0.0007+0.0001j]
 [ 0.0002-0.0001j  0.0003-0.001j  -0.0013-0.0027j -0.0063-0.0016j -0.0091+0.007j   0.    +0.017j   0.0175+0.0128j  0.0231-0.0077j  0.0068-0.023j  -0.0132-0.0163j -0.016 +0.0014j -0.0051+0.0094j  0.0031+0.0054j  0.003 +0.j      0.0005-0.0011j -0.0002-0.0003j]
 [ 0.0001+0.0001j  0.0004-0.j      0.0007-0.001j  -0.0006-0.0025j -0.0041-0.002j  -0.0061+0.003j  -0.0015+0.0085j  0.0068+0.0069j  0.0094-0.0016j  0.0035-0.0076j -0.0033-0.0055j -0.0043-0.0001j -0.0014+0.002j   0.0005+0.0011j  0.0005+0.j      0.0001-0.0001j]
 [-0.    +0.j      0.0001+0.0001j  0.0003+0.0001j  0.0006-0.0004j  0.0001-0.0013j -0.0015-0.0013j -0.0025+0.0006j -0.0011+0.0027j  0.0015+0.0024j  0.0025+0.0001j  0.0011-0.0015j -0.0005-0.0012j -0.0007-0.0001j -0.0002+0.0003j  0.0001+0.0001j  0.    +0.j    ]]
Sum of c^2 0.9904122725108014
Wed Apr 16 00:34:27 PDT 2025
