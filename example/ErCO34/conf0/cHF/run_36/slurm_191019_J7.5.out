Currently Loaded Modulefiles:
 1) gmp/6.2.1-gcc-13.2.0-lcnhyse <aL>             
 2) mpfr/4.2.0-gcc-13.2.0-yy2fkq5 <aL>            
 3) mpc/1.3.1-gcc-13.2.0-5kgoftq <aL>             
 4) zlib-ng/2.1.3-gcc-13.2.0-jetnfwa <aL>         
 5) zstd/1.5.5-gcc-13.2.0-t2lua3l <aL>            
 6) gcc/13.2.0-gcc-13.2.0-w55nxkl                 
 7) cmake/3.20.2-gcc-13.2.0-rp74vpv               
 8) libfabric/1.18.1-gcc-13.2.0-bijxar4 <aL>      
 9) numactl/2.0.14-gcc-13.2.0-etkf74e <aL>        
10) openssh/8.7p1-gcc-13.2.0-g55xmkx <aL>         
11) slurm/22.05.6-gcc-13.2.0-tchsn6y <aL>         
12) openmpi/4.1.5-gcc-13.2.0-24q3ap2              
13) libpciaccess/0.17-gcc-13.2.0-r2cijnn <aL>     
14) libiconv/1.17-gcc-13.2.0-ntov4te <aL>         
15) xz/5.4.1-gcc-13.2.0-4xkm5xo <aL>              
16) libxml2/2.10.3-gcc-13.2.0-fr6jcjz <aL>        
17) ncurses/6.4-gcc-13.2.0-4o2yj6n <aL>           
18) hwloc/2.9.1-gcc-13.2.0-gzvfolk <aL>           
19) intel-tbb/2021.9.0-gcc-13.2.0-6nwk3ml <aL>    
20) intel-oneapi-mkl/2023.2.0-gcc-13.2.0-ohvyk7g  

Key:
<module-tag>  <aL>=auto-loaded  
/central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF
Wed Apr 16 00:02:21 PDT 2025
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
hpc-23-16.cm.cluster
--------------------------------------------------------------------------
WARNING: There was an error initializing an OpenFabrics device.

  Local host:   hpc-23-16
  Local device: mlx5_0
--------------------------------------------------------------------------
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 16 00:02:25 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              #INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              #INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

PySCF version 2.5.0
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
nuclear repulsion = 2660.00686642269
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

number of NR pGTOs = 525
number of NR cGTOs = 264
number of NR pGTOs = 525
number of NR cGTOs = 264
number of shells = 122
number of NR pGTOs = 525
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.97
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.99
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.99
N_elec (98, 95), N_ao 264
N_elec (98, 95), N_ao 264
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
CPU time:         0.99
N_elec (98, 95), N_ao 264
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.99
N_elec (98, 95), N_ao 264
nuclear repulsion = 2660.00686642269
number of shells = 122
N_elec (98, 95), N_ao 264
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.99
N_elec (98, 95), N_ao 264
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.98
N_elec (98, 95), N_ao 264
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     #INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
PySCF version 2.5.0
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************

PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0

PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
[INPUT] verbose = 4
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
[INPUT] num. atoms = 17
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[CONFIG] conf_file None
[INPUT] verbose = 4
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_36/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
              [INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
      else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-23-16.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Wed Apr 16 00:02:25 2025
PySCF version 2.5.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         1.05
ecp = {}
CPU time:         1.04
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
number of NR pGTOs = 525
N_elec (98, 95), N_ao 264
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

number of NR pGTOs = 525
number of NR cGTOs = 264
N_elec (98, 95), N_ao 264
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         1.04
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         1.04
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
number of NR pGTOs = 525
N_elec (98, 95), N_ao 264

N_elec (98, 95), N_ao 264
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         1.05
nuclear repulsion = 2660.00686642269
number of shells = 122
N_elec (98, 95), N_ao 264
number of NR pGTOs = 525
nuclear repulsion = 2660.00686642269
number of shells = 122
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         1.05
number of NR pGTOs = 525
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
N_elec (98, 95), N_ao 264
ecp = {}
CPU time:         1.00
ecp = {}
CPU time:         1.04
nuclear repulsion = 2660.00686642269
number of shells = 122
N_elec (98, 95), N_ao 264
N_elec (98, 95), N_ao 264
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         1.04
N_elec (98, 95), N_ao 264
**** MO energy ****
MO #1   energy= -2122.67985176427  occ= 1
MO #2   energy= -2122.67977328699  occ= 1
MO #3   energy= -361.386805872433  occ= 1
MO #4   energy= -361.386166981373  occ= 1
MO #5   energy= -343.310121100645  occ= 1
MO #6   energy= -343.310089237998  occ= 1
MO #7   energy= -309.24584984884   occ= 1
MO #8   energy= -309.24498835245   occ= 1
MO #9   energy= -309.241957068745  occ= 1
MO #10  energy= -309.241655798106  occ= 1
MO #11  energy= -83.081591176067   occ= 1
MO #12  energy= -83.0020775287926  occ= 1
MO #13  energy= -75.1983777223693  occ= 1
MO #14  energy= -75.1787667102743  occ= 1
MO #15  energy= -67.856054091503   occ= 1
MO #16  energy= -67.8145115968815  occ= 1
MO #17  energy= -67.766680696879   occ= 1
MO #18  energy= -67.7169061328415  occ= 1
MO #19  energy= -54.8568657682988  occ= 1
MO #20  energy= -54.8469040716494  occ= 1
MO #21  energy= -54.835343500208   occ= 1
MO #22  energy= -54.8308668911361  occ= 1
MO #23  energy= -53.0401879893507  occ= 1
MO #24  energy= -53.0198481555606  occ= 1
MO #25  energy= -52.997387351632   occ= 1
MO #26  energy= -52.9583676366704  occ= 1
MO #27  energy= -52.885170596      occ= 1
MO #28  energy= -52.8593954194369  occ= 1
MO #29  energy= -20.207820235006   occ= 1
MO #30  energy= -20.2076853343333  occ= 1
MO #31  energy= -20.2047312214412  occ= 1
MO #32  energy= -20.2047221732508  occ= 1
MO #33  energy= -20.2016240305572  occ= 1
MO #34  energy= -20.201475367164   occ= 1
MO #35  energy= -20.1971026271457  occ= 1
MO #36  energy= -20.197093803959   occ= 1
MO #37  energy= -20.1954261484688  occ= 1
MO #38  energy= -20.1952564616102  occ= 1
MO #39  energy= -20.190591389142   occ= 1
MO #40  energy= -20.1904032287276  occ= 1
MO #41  energy= -20.1549690280843  occ= 1
MO #42  energy= -20.1547648753946  occ= 1
MO #43  energy= -20.1518894716585  occ= 1
MO #44  energy= -20.1517040091978  occ= 1
MO #45  energy= -20.1488401493088  occ= 1
MO #46  energy= -20.1486481050636  occ= 1
MO #47  energy= -20.1449860160055  occ= 1
MO #48  energy= -20.144777137452   occ= 1
MO #49  energy= -20.1393431537274  occ= 1
MO #50  energy= -20.1393323710208  occ= 1
MO #51  energy= -20.1317184574371  occ= 1
MO #52  energy= -20.1317054771737  occ= 1
MO #53  energy= -17.4002938435877  occ= 1
MO #54  energy= -17.1983656511746  occ= 1
MO #55  energy= -14.1619388386535  occ= 1
MO #56  energy= -14.1009881456981  occ= 1
MO #57  energy= -12.5227419944481  occ= 1
MO #58  energy= -12.4415546218705  occ= 1
MO #59  energy= -12.3243755467137  occ= 1
MO #60  energy= -12.1973958928328  occ= 1
MO #61  energy= -11.073240585971   occ= 1
MO #62  energy= -11.0732213522237  occ= 1
MO #63  energy= -11.0674501860295  occ= 1
MO #64  energy= -11.0674256023345  occ= 1
MO #65  energy= -11.0163905819956  occ= 1
MO #66  energy= -11.016364019379   occ= 1
MO #67  energy= -11.0114257266421  occ= 1
MO #68  energy= -11.0114001228534  occ= 1
MO #69  energy= -7.2855921842191   occ= 1
MO #70  energy= -7.2371653155529   occ= 1
MO #71  energy= -7.22294481513755  occ= 1
MO #72  energy= -7.20266306803944  occ= 1
MO #73  energy= -6.9456167372605   occ= 1
MO #74  energy= -6.89998285130008  occ= 1
MO #75  energy= -6.8397719430118   occ= 1
MO #76  energy= -6.70715674863024  occ= 1
MO #77  energy= -6.47048945485842  occ= 1
MO #78  energy= -6.40405477152041  occ= 1
MO #79  energy= -2.10113452287975  occ= 1
MO #80  energy= -2.03007843710859  occ= 1
MO #81  energy= -1.13191799445839  occ= 1
MO #82  energy= -1.12408767016176  occ= 1
MO #83  energy= -1.11094666107935  occ= 1
MO #84  energy= -1.11066588097013  occ= 1
MO #85  energy= -1.09207458542999  occ= 1
MO #86  energy= -1.08371164800734  occ= 1
MO #87  energy= -1.05633226251968  occ= 1
MO #88  energy= -1.05596035872984  occ= 1
MO #89  energy= -1.04485621797532  occ= 1
MO #90  energy= -1.04010751097963  occ= 1
MO #91  energy= -0.970072567879475 occ= 1
MO #92  energy= -0.969539573425033 occ= 1
MO #93  energy= -0.965181330626028 occ= 1
MO #94  energy= -0.961914130885798 occ= 1
MO #95  energy= -0.94801311975686  occ= 1
MO #96  energy= -0.94757182695484  occ= 1
MO #97  energy= -0.944489496907367 occ= 1
MO #98  energy= -0.944072432999035 occ= 1
MO #99  energy= -0.915630693854338 occ= 1
MO #100 energy= -0.913720131452087 occ= 1
MO #101 energy= -0.908000086980371 occ= 1
MO #102 energy= -0.905663323241781 occ= 1
MO #103 energy= -0.89648239977635  occ= 1
MO #104 energy= -0.895358299036499 occ= 1
MO #105 energy= -0.891813656688804 occ= 1
MO #106 energy= -0.891163085400604 occ= 1
MO #107 energy= -0.849974088935655 occ= 1
MO #108 energy= -0.834474054986418 occ= 1
MO #109 energy= -0.812252965167751 occ= 1
MO #110 energy= -0.793814627570398 occ= 1
MO #111 energy= -0.464087987793601 occ= 1
MO #112 energy= -0.440906539509593 occ= 1
MO #113 energy= -0.417548124876718 occ= 1
MO #114 energy= -0.414589017782299 occ= 1
MO #115 energy= -0.40495968508655  occ= 1
MO #116 energy= -0.404735471755468 occ= 1
MO #117 energy= -0.392092881235112 occ= 1
MO #118 energy= -0.390416774325892 occ= 1
MO #119 energy= -0.388720954331893 occ= 1
MO #120 energy= -0.382982522365088 occ= 1
MO #121 energy= -0.381217361583898 occ= 1
MO #122 energy= -0.367618617113607 occ= 1
MO #123 energy= -0.339611895751494 occ= 1
MO #124 energy= -0.333063463291713 occ= 1
MO #125 energy= -0.332927478411546 occ= 1
MO #126 energy= -0.327221336666438 occ= 1
MO #127 energy= -0.326856756288603 occ= 1
MO #128 energy= -0.307780348873674 occ= 1
MO #129 energy= -0.307576733460489 occ= 1
MO #130 energy= -0.306331070218683 occ= 1
MO #131 energy= -0.305640850102506 occ= 1
MO #132 energy= -0.303574505602038 occ= 1
MO #133 energy= -0.302504178761901 occ= 1
MO #134 energy= -0.299861204963964 occ= 1
MO #135 energy= -0.299519605893744 occ= 1
MO #136 energy= -0.288147467683227 occ= 1
MO #137 energy= -0.287737467410812 occ= 1
MO #138 energy= -0.279981169611436 occ= 1
MO #139 energy= -0.279074471999676 occ= 1
MO #140 energy= -0.259985078800575 occ= 1
MO #141 energy= -0.256301255340774 occ= 1
MO #142 energy= -0.252152932845265 occ= 1
MO #143 energy= -0.25190239538812  occ= 1
MO #144 energy= -0.249147437652929 occ= 1
MO #145 energy= -0.245725584475996 occ= 1
MO #146 energy= -0.243498984104122 occ= 1
MO #147 energy= -0.241791465087525 occ= 1
MO #148 energy= -0.239156270655766 occ= 1
MO #149 energy= -0.237330331219176 occ= 1
MO #150 energy= -0.228445954108263 occ= 1
MO #151 energy= -0.228044679839768 occ= 1
MO #152 energy= -0.220648724943957 occ= 1
MO #153 energy= -0.22015424505355  occ= 1
MO #154 energy= -0.14879825500266  occ= 1
MO #155 energy= -0.148100719941909 occ= 1
MO #156 energy= -0.133787931179011 occ= 1
MO #157 energy= -0.133269725788688 occ= 1
MO #158 energy= -0.118860515245801 occ= 1
MO #159 energy= -0.118668305799102 occ= 1
MO #160 energy= -0.113058572720325 occ= 1
MO #161 energy= -0.112859522498153 occ= 1
MO #162 energy= -0.100741411804248 occ= 1
MO #163 energy= -0.10066748384531  occ= 1
MO #164 energy= -0.097036593390706 occ= 1
MO #165 energy= -0.0969371966308116 occ= 1
MO #166 energy= -0.0897893995765443 occ= 1
MO #167 energy= -0.0894958345963275 occ= 1
MO #168 energy= -0.0841469546565685 occ= 1
MO #169 energy= -0.0839176287412531 occ= 1
MO #170 energy= -0.0830576782233514 occ= 1
MO #171 energy= -0.0827184587807275 occ= 1
MO #172 energy= -0.079095387502895 occ= 1
MO #173 energy= -0.0786980306614557 occ= 1
MO #174 energy= -0.073892465106897 occ= 1
MO #175 energy= -0.0735827599677298 occ= 1
MO #176 energy= -0.0726606037882293 occ= 1
MO #177 energy= -0.0721026186740395 occ= 1
MO #178 energy= -0.0588063672769855 occ= 1
MO #179 energy= -0.0583964333773439 occ= 1
MO #180 energy= -0.0543721904244039 occ= 1
MO #181 energy= -0.0542330473028438 occ= 1
MO #182 energy= -0.0441001916769306 occ= 1
MO #183 energy= -0.0437247071948793 occ= 1
MO #184 energy= -0.041629663689422 occ= 1
MO #185 energy= -0.0412003496727765 occ= 1
MO #186 energy= -0.0302329731393955 occ= 1
MO #187 energy= -0.0301083643737852 occ= 1
MO #188 energy= -0.0218658706072311 occ= 1
MO #189 energy= -0.0216558357197712 occ= 1
MO #190 energy= -0.0187266539745343 occ= 1
MO #191 energy= -0.0183157237337186 occ= 1
MO #192 energy= -0.0144062985200425 occ= 1
MO #193 energy= -0.0141004782044551 occ= 1
MO #194 energy= 0.259537114219916  occ= 0
MO #195 energy= 0.259539482476192  occ= 0
MO #196 energy= 0.272795595815306  occ= 0
MO #197 energy= 0.272796828559458  occ= 0
MO #198 energy= 0.290408532184546  occ= 0
MO #199 energy= 0.290419253491826  occ= 0
MO #200 energy= 0.294506141043085  occ= 0
MO #201 energy= 0.294509321786614  occ= 0
MO #202 energy= 0.306678117678063  occ= 0
MO #203 energy= 0.306685998180969  occ= 0
MO #204 energy= 0.309720557627081  occ= 0
MO #205 energy= 0.309724960706903  occ= 0
MO #206 energy= 0.329384069821511  occ= 0
MO #207 energy= 0.329389815440786  occ= 0
MO #208 energy= 0.371785961136822  occ= 0
MO #209 energy= 0.371793917224467  occ= 0
MO #210 energy= 0.381489696109636  occ= 0
MO #211 energy= 0.381504263780809  occ= 0
MO #212 energy= 0.552978035104188  occ= 0
MO #213 energy= 0.553277124461867  occ= 0
MO #214 energy= 0.556918263061977  occ= 0
MO #215 energy= 0.55706072801576   occ= 0
MO #216 energy= 0.57460330453209   occ= 0
MO #217 energy= 0.574754169242689  occ= 0
MO #218 energy= 0.581723632208656  occ= 0
MO #219 energy= 0.582297264560207  occ= 0
MO #220 energy= 0.585696121376744  occ= 0
MO #221 energy= 0.586150248978896  occ= 0
MO #222 energy= 0.592002436067688  occ= 0
MO #223 energy= 0.59237756324032   occ= 0
MO #224 energy= 0.606648422813023  occ= 0
MO #225 energy= 0.606702154198429  occ= 0
MO #226 energy= 0.618317892918239  occ= 0
MO #227 energy= 0.621983686034775  occ= 0
MO #228 energy= 0.634877031811355  occ= 0
MO #229 energy= 0.636035550460537  occ= 0
MO #230 energy= 0.640129946250672  occ= 0
MO #231 energy= 0.641484272026726  occ= 0
MO #232 energy= 0.651631901326393  occ= 0
MO #233 energy= 0.651807568009049  occ= 0
MO #234 energy= 0.655751749575865  occ= 0
MO #235 energy= 0.656190898316471  occ= 0
MO #236 energy= 0.661036312722602  occ= 0
MO #237 energy= 0.663831136425467  occ= 0
MO #238 energy= 0.665540168430265  occ= 0
MO #239 energy= 0.668134663878964  occ= 0
MO #240 energy= 0.689415819461314  occ= 0
MO #241 energy= 0.69574010853071   occ= 0
MO #242 energy= 0.704341443810029  occ= 0
MO #243 energy= 0.708333641101036  occ= 0
MO #244 energy= 0.71804260975601   occ= 0
MO #245 energy= 0.732071458866618  occ= 0
MO #246 energy= 0.761372547062045  occ= 0
MO #247 energy= 0.779879967752348  occ= 0
MO #248 energy= 0.860428528545971  occ= 0
MO #249 energy= 0.860966604274876  occ= 0
MO #250 energy= 0.865692891318593  occ= 0
MO #251 energy= 0.867045960818667  occ= 0
MO #252 energy= 0.876390290283049  occ= 0
MO #253 energy= 0.87682755297916   occ= 0
MO #254 energy= 0.894525780968418  occ= 0
MO #255 energy= 0.907509292609782  occ= 0
MO #256 energy= 0.910837990474382  occ= 0
MO #257 energy= 0.918411814005191  occ= 0
MO #258 energy= 0.927053226752427  occ= 0
MO #259 energy= 0.929176537563498  occ= 0
MO #260 energy= 0.936386862743076  occ= 0
MO #261 energy= 0.938618316533365  occ= 0
MO #262 energy= 0.941858977047661  occ= 0
MO #263 energy= 0.949370155409658  occ= 0
MO #264 energy= 0.952305599360098  occ= 0
MO #265 energy= 0.959008990151811  occ= 0
MO #266 energy= 0.961309118916427  occ= 0
MO #267 energy= 0.972820543157986  occ= 0
MO #268 energy= 0.978441884284486  occ= 0
MO #269 energy= 0.987454849556561  occ= 0
MO #270 energy= 0.989928272289894  occ= 0
MO #271 energy= 0.993871602936987  occ= 0
MO #272 energy= 0.997089503522954  occ= 0
MO #273 energy= 1.00376539507973   occ= 0
MO #274 energy= 1.00653193703027   occ= 0
MO #275 energy= 1.03123925207807   occ= 0
MO #276 energy= 1.0339778857439    occ= 0
MO #277 energy= 1.04314458373111   occ= 0
MO #278 energy= 1.04528048046867   occ= 0
MO #279 energy= 1.04790775776931   occ= 0
MO #280 energy= 1.04956733962452   occ= 0
MO #281 energy= 1.07921865470165   occ= 0
MO #282 energy= 1.08107523969334   occ= 0
MO #283 energy= 1.08675281993921   occ= 0
MO #284 energy= 1.0900142973053    occ= 0
MO #285 energy= 1.09086621826872   occ= 0
MO #286 energy= 1.09341673210637   occ= 0
MO #287 energy= 1.09835668562629   occ= 0
MO #288 energy= 1.11500860638536   occ= 0
MO #289 energy= 1.11772657086233   occ= 0
MO #290 energy= 1.12510501989989   occ= 0
MO #291 energy= 1.1576504186018    occ= 0
MO #292 energy= 1.16421024244506   occ= 0
MO #293 energy= 1.1715928330151    occ= 0
MO #294 energy= 1.17550251548267   occ= 0
MO #295 energy= 1.19550036475172   occ= 0
MO #296 energy= 1.19783504101606   occ= 0
MO #297 energy= 1.21004500629615   occ= 0
MO #298 energy= 1.21294703418247   occ= 0
MO #299 energy= 1.22006273534886   occ= 0
MO #300 energy= 1.22298078847117   occ= 0
MO #301 energy= 1.23029923250877   occ= 0
MO #302 energy= 1.2348300044775    occ= 0
MO #303 energy= 1.25383270351575   occ= 0
MO #304 energy= 1.25965348004844   occ= 0
MO #305 energy= 1.26283504511121   occ= 0
MO #306 energy= 1.26795496961017   occ= 0
MO #307 energy= 1.27508423053767   occ= 0
MO #308 energy= 1.27754276530922   occ= 0
MO #309 energy= 1.28713770588364   occ= 0
MO #310 energy= 1.29262996196797   occ= 0
MO #311 energy= 1.2972436966857    occ= 0
MO #312 energy= 1.29994565090404   occ= 0
MO #313 energy= 1.30764818423477   occ= 0
MO #314 energy= 1.31135878473284   occ= 0
MO #315 energy= 1.32991848498506   occ= 0
MO #316 energy= 1.33207419273939   occ= 0
MO #317 energy= 1.34576475123394   occ= 0
MO #318 energy= 1.34614307975295   occ= 0
MO #319 energy= 1.37614775007585   occ= 0
MO #320 energy= 1.38370969759859   occ= 0
MO #321 energy= 1.39624912018318   occ= 0
MO #322 energy= 1.40526976807677   occ= 0
MO #323 energy= 1.454448001521     occ= 0
MO #324 energy= 1.46130215250616   occ= 0
MO #325 energy= 1.47406628286241   occ= 0
MO #326 energy= 1.48213020381986   occ= 0
MO #327 energy= 1.49130206233819   occ= 0
MO #328 energy= 1.50095878018711   occ= 0
MO #329 energy= 1.52448325596987   occ= 0
MO #330 energy= 1.52767366908928   occ= 0
MO #331 energy= 1.56089530554972   occ= 0
MO #332 energy= 1.56173492616078   occ= 0
MO #333 energy= 1.57803531200553   occ= 0
MO #334 energy= 1.57914974554848   occ= 0
MO #335 energy= 1.58222080660079   occ= 0
MO #336 energy= 1.58355037638867   occ= 0
MO #337 energy= 1.59883992478493   occ= 0
MO #338 energy= 1.60022849577432   occ= 0
MO #339 energy= 1.62453154625277   occ= 0
MO #340 energy= 1.62555508959711   occ= 0
MO #341 energy= 1.62923274795803   occ= 0
MO #342 energy= 1.63527558198685   occ= 0
MO #343 energy= 1.64528126730375   occ= 0
MO #344 energy= 1.64703748474981   occ= 0
MO #345 energy= 1.66311314219435   occ= 0
MO #346 energy= 1.66513939717067   occ= 0
MO #347 energy= 1.66908282360075   occ= 0
MO #348 energy= 1.66963623829295   occ= 0
MO #349 energy= 1.67491528031034   occ= 0
MO #350 energy= 1.67577250973882   occ= 0
MO #351 energy= 1.68216737519318   occ= 0
MO #352 energy= 1.68274527807757   occ= 0
MO #353 energy= 1.69196885951726   occ= 0
MO #354 energy= 1.69250327708825   occ= 0
MO #355 energy= 1.69548897758513   occ= 0
MO #356 energy= 1.6975257333161    occ= 0
MO #357 energy= 1.70104178988021   occ= 0
MO #358 energy= 1.70256130860396   occ= 0
MO #359 energy= 1.7073412719927    occ= 0
MO #360 energy= 1.70920744459127   occ= 0
MO #361 energy= 1.71153043980097   occ= 0
MO #362 energy= 1.71359914984687   occ= 0
MO #363 energy= 1.72548188089147   occ= 0
MO #364 energy= 1.72686304636695   occ= 0
MO #365 energy= 1.7393644673267    occ= 0
MO #366 energy= 1.74100724647561   occ= 0
MO #367 energy= 1.75766488345737   occ= 0
MO #368 energy= 1.75991106592325   occ= 0
MO #369 energy= 1.7648544049009    occ= 0
MO #370 energy= 1.76659354784577   occ= 0
MO #371 energy= 1.77451101744763   occ= 0
MO #372 energy= 1.7763091189261    occ= 0
MO #373 energy= 1.78121083966749   occ= 0
MO #374 energy= 1.78134602030486   occ= 0
MO #375 energy= 1.79081394772466   occ= 0
MO #376 energy= 1.7909456651042    occ= 0
MO #377 energy= 1.80467035826491   occ= 0
MO #378 energy= 1.80474546783834   occ= 0
MO #379 energy= 1.83182911789112   occ= 0
MO #380 energy= 1.83472328953896   occ= 0
MO #381 energy= 1.84838945231429   occ= 0
MO #382 energy= 1.85120233984919   occ= 0
MO #383 energy= 1.85749487287205   occ= 0
MO #384 energy= 1.86370083950435   occ= 0
MO #385 energy= 1.86755994764087   occ= 0
MO #386 energy= 1.87044849883551   occ= 0
MO #387 energy= 1.87625443885041   occ= 0
MO #388 energy= 1.87733751615788   occ= 0
MO #389 energy= 1.88516199973069   occ= 0
MO #390 energy= 1.88878078519151   occ= 0
MO #391 energy= 1.93005281930527   occ= 0
MO #392 energy= 1.93089104310507   occ= 0
MO #393 energy= 1.93318277438922   occ= 0
MO #394 energy= 1.94127272661916   occ= 0
MO #395 energy= 1.98867704290844   occ= 0
MO #396 energy= 1.99018864293303   occ= 0
MO #397 energy= 2.01447594183566   occ= 0
MO #398 energy= 2.01684273551818   occ= 0
MO #399 energy= 2.04150975036311   occ= 0
MO #400 energy= 2.04374611287753   occ= 0
MO #401 energy= 2.05894454273129   occ= 0
MO #402 energy= 2.06888640033174   occ= 0
MO #403 energy= 2.08670075210784   occ= 0
MO #404 energy= 2.09130684961979   occ= 0
MO #405 energy= 2.10115447060918   occ= 0
MO #406 energy= 2.10886125494078   occ= 0
MO #407 energy= 2.12836493591714   occ= 0
MO #408 energy= 2.13849380407637   occ= 0
MO #409 energy= 2.14223381488986   occ= 0
MO #410 energy= 2.14422307223239   occ= 0
MO #411 energy= 2.16089948106047   occ= 0
MO #412 energy= 2.16685160843667   occ= 0
MO #413 energy= 2.18674803138793   occ= 0
MO #414 energy= 2.20204836019599   occ= 0
MO #415 energy= 2.21106201596319   occ= 0
MO #416 energy= 2.21884018527564   occ= 0
MO #417 energy= 2.22673482830595   occ= 0
MO #418 energy= 2.26930860471958   occ= 0
MO #419 energy= 2.29699393590046   occ= 0
MO #420 energy= 2.30660351314267   occ= 0
MO #421 energy= 2.31134024300186   occ= 0
MO #422 energy= 2.32644161046747   occ= 0
MO #423 energy= 2.33363940068623   occ= 0
MO #424 energy= 2.34678821056737   occ= 0
MO #425 energy= 2.35948117583032   occ= 0
MO #426 energy= 2.3957343321172    occ= 0
MO #427 energy= 2.43230966728358   occ= 0
MO #428 energy= 2.43828439386343   occ= 0
MO #429 energy= 2.4518217583264    occ= 0
MO #430 energy= 2.46072995207149   occ= 0
MO #431 energy= 2.53097451644325   occ= 0
MO #432 energy= 2.55473258659035   occ= 0
MO #433 energy= 2.62843131391842   occ= 0
MO #434 energy= 2.63718300141405   occ= 0
MO #435 energy= 2.66430186457239   occ= 0
MO #436 energy= 2.66746114161238   occ= 0
MO #437 energy= 2.69353953105727   occ= 0
MO #438 energy= 2.69687100278896   occ= 0
MO #439 energy= 2.70681493956655   occ= 0
MO #440 energy= 2.71362217527673   occ= 0
MO #441 energy= 2.72949269415979   occ= 0
MO #442 energy= 2.73219832421871   occ= 0
MO #443 energy= 2.75363760360881   occ= 0
MO #444 energy= 2.75732098134248   occ= 0
MO #445 energy= 2.77399979646164   occ= 0
MO #446 energy= 2.7764289488431    occ= 0
MO #447 energy= 2.8183257153132    occ= 0
MO #448 energy= 2.81984653393107   occ= 0
MO #449 energy= 2.87259459352544   occ= 0
MO #450 energy= 2.8735697364851    occ= 0
MO #451 energy= 2.9404856469634    occ= 0
MO #452 energy= 2.94618922636334   occ= 0
MO #453 energy= 2.97300427824918   occ= 0
MO #454 energy= 2.9735365438661    occ= 0
MO #455 energy= 3.01962122663267   occ= 0
MO #456 energy= 3.0200494176251    occ= 0
MO #457 energy= 3.33304337836593   occ= 0
MO #458 energy= 3.3638746389992    occ= 0
MO #459 energy= 3.39233649517161   occ= 0
MO #460 energy= 3.4044918746245    occ= 0
MO #461 energy= 3.45965026004983   occ= 0
MO #462 energy= 3.46400768062677   occ= 0
MO #463 energy= 3.49054347899503   occ= 0
MO #464 energy= 3.52295428147824   occ= 0
MO #465 energy= 3.80884953009379   occ= 0
MO #466 energy= 3.8440114928527    occ= 0
MO #467 energy= 5.17892147301043   occ= 0
MO #468 energy= 5.21266185622293   occ= 0
MO #469 energy= 6.48600954535912   occ= 0
MO #470 energy= 6.51010811374294   occ= 0
MO #471 energy= 7.04320081809966   occ= 0
MO #472 energy= 7.08710471731303   occ= 0
MO #473 energy= 7.15983951298553   occ= 0
MO #474 energy= 7.16683371812108   occ= 0
MO #475 energy= 12.7297402942468   occ= 0
MO #476 energy= 12.7541214227862   occ= 0
MO #477 energy= 12.7821013418125   occ= 0
MO #478 energy= 12.81017316074     occ= 0
MO #479 energy= 13.0809609498142   occ= 0
MO #480 energy= 13.1041853271549   occ= 0
MO #481 energy= 13.1536764938697   occ= 0
MO #482 energy= 13.1926192096534   occ= 0
MO #483 energy= 13.2820040428865   occ= 0
MO #484 energy= 13.3492597154874   occ= 0
MO #485 energy= 18.0961087696501   occ= 0
MO #486 energy= 18.1549807889195   occ= 0
MO #487 energy= 29.6661215033653   occ= 0
MO #488 energy= 29.6921050916765   occ= 0
MO #489 energy= 33.1920082458851   occ= 0
MO #490 energy= 33.2494339870734   occ= 0
MO #491 energy= 33.3122826510476   occ= 0
MO #492 energy= 33.3195553800332   occ= 0
MO #493 energy= 65.2867423348685   occ= 0
MO #494 energy= 65.3033057716064   occ= 0
MO #495 energy= 65.3459978923479   occ= 0
MO #496 energy= 65.3525029470167   occ= 0
MO #497 energy= 67.7909880357808   occ= 0
MO #498 energy= 67.8120561244348   occ= 0
MO #499 energy= 67.8411636316436   occ= 0
MO #500 energy= 67.8573739065812   occ= 0
MO #501 energy= 67.8972960836708   occ= 0
MO #502 energy= 67.9252629882761   occ= 0
MO #503 energy= 75.5545397670101   occ= 0
MO #504 energy= 75.599941468948    occ= 0
MO #505 energy= 158.595816489597   occ= 0
MO #506 energy= 158.605904432436   occ= 0
MO #507 energy= 174.888598486225   occ= 0
MO #508 energy= 174.910081290327   occ= 0
MO #509 energy= 174.959976558728   occ= 0
MO #510 energy= 174.963368697724   occ= 0
MO #511 energy= 308.448579591383   occ= 0
MO #512 energy= 308.462608914572   occ= 0
MO #513 energy= 725.229575932963   occ= 0
MO #514 energy= 725.231229902632   occ= 0
MO #515 energy= 846.744208968042   occ= 0
MO #516 energy= 846.746980429586   occ= 0
MO #517 energy= 846.784636298372   occ= 0
MO #518 energy= 846.784955523998   occ= 0
MO #519 energy= 1057.13905633557   occ= 0
MO #520 energy= 1057.1418771404    occ= 0
MO #521 energy= 2996.82673256151   occ= 0
MO #522 energy= 2996.82736026426   occ= 0
MO #523 energy= 7255.33898311369   occ= 0
MO #524 energy= 7255.3391667397    occ= 0
MO #525 energy= 15388.0039926877   occ= 0
MO #526 energy= 15388.0040554022   occ= 0
MO #527 energy= 35974.1096506439   occ= 0
MO #528 energy= 35974.1096694735   occ= 0
 ** Mulliken pop alpha/beta on meta-lowdin orthogonal AOs **
 ** Mulliken pop       alpha | beta **
pop of  0 Er 1s        0.99999 | 0.99999   
pop of  0 Er 2s        1.00000 | 1.00000   
pop of  0 Er 3s        1.00000 | 1.00000   
pop of  0 Er 4s        0.99999 | 0.99999   
pop of  0 Er 5s        0.99856 | 0.99883   
pop of  0 Er 6s        0.16471 | 0.16383   
pop of  0 Er 7s        0.00903 | 0.00874   
pop of  0 Er 8s        0.00156 | 0.00151   
pop of  0 Er 9s        0.00066 | 0.00066   
pop of  0 Er 10s        0.00019 | 0.00018   
pop of  0 Er 11s        0.00037 | 0.00037   
pop of  0 Er 12s        0.00009 | 0.00009   
pop of  0 Er 13s        0.00001 | 0.00001   
pop of  0 Er 14s        0.00000 | 0.00000   
pop of  0 Er 15s        0.00000 | 0.00000   
pop of  0 Er 16s        0.00000 | 0.00000   
pop of  0 Er 17s        0.00000 | 0.00000   
pop of  0 Er 18s        0.00000 | 0.00000   
pop of  0 Er 2px       0.99884 | 0.99884   
pop of  0 Er 2py       0.99884 | 0.99884   
pop of  0 Er 2pz       0.99884 | 0.99884   
pop of  0 Er 3px       0.99858 | 0.99858   
pop of  0 Er 3py       0.99858 | 0.99858   
pop of  0 Er 3pz       0.99858 | 0.99858   
pop of  0 Er 4px       0.99815 | 0.99815   
pop of  0 Er 4py       0.99814 | 0.99814   
pop of  0 Er 4pz       0.99815 | 0.99815   
pop of  0 Er 5px       0.99515 | 0.99555   
pop of  0 Er 5py       0.99571 | 0.99606   
pop of  0 Er 5pz       0.99547 | 0.99579   
pop of  0 Er 6px       0.00938 | 0.00914   
pop of  0 Er 6py       0.00786 | 0.00763   
pop of  0 Er 6pz       0.00816 | 0.00798   
pop of  0 Er 7px       0.00776 | 0.00751   
pop of  0 Er 7py       0.00470 | 0.00449   
pop of  0 Er 7pz       0.00700 | 0.00678   
pop of  0 Er 8px       0.00559 | 0.00559   
pop of  0 Er 8py       0.00405 | 0.00406   
pop of  0 Er 8pz       0.00683 | 0.00683   
pop of  0 Er 9px       0.00129 | 0.00128   
pop of  0 Er 9py       0.00144 | 0.00143   
pop of  0 Er 9pz       0.00176 | 0.00176   
pop of  0 Er 10px       0.00052 | 0.00051   
pop of  0 Er 10py       0.00059 | 0.00059   
pop of  0 Er 10pz       0.00069 | 0.00068   
pop of  0 Er 11px       0.00086 | 0.00086   
pop of  0 Er 11py       0.00082 | 0.00082   
pop of  0 Er 11pz       0.00089 | 0.00088   
pop of  0 Er 12px       0.00073 | 0.00073   
pop of  0 Er 12py       0.00067 | 0.00067   
pop of  0 Er 12pz       0.00071 | 0.00071   
pop of  0 Er 13px       0.00171 | 0.00171   
pop of  0 Er 13py       0.00171 | 0.00171   
pop of  0 Er 13pz       0.00171 | 0.00171   
pop of  0 Er 3dxy      0.99990 | 0.99990   
pop of  0 Er 3dyz      0.99990 | 0.99990   
pop of  0 Er 3dz^2     0.99990 | 0.99990   
pop of  0 Er 3dxz      0.99990 | 0.99990   
pop of  0 Er 3dx2-y2    0.99990 | 0.99990   
pop of  0 Er 4dxy      0.99970 | 0.99971   
pop of  0 Er 4dyz      0.99971 | 0.99971   
pop of  0 Er 4dz^2     0.99971 | 0.99971   
pop of  0 Er 4dxz      0.99971 | 0.99971   
pop of  0 Er 4dx2-y2    0.99970 | 0.99971   
pop of  0 Er 5dxy      0.01682 | 0.01626   
pop of  0 Er 5dyz      0.01837 | 0.01786   
pop of  0 Er 5dz^2     0.01512 | 0.01480   
pop of  0 Er 5dxz      0.01390 | 0.01354   
pop of  0 Er 5dx2-y2    0.01441 | 0.01396   
pop of  0 Er 6dxy      0.00310 | 0.00304   
pop of  0 Er 6dyz      0.00327 | 0.00317   
pop of  0 Er 6dz^2     0.00252 | 0.00251   
pop of  0 Er 6dxz      0.00262 | 0.00258   
pop of  0 Er 6dx2-y2    0.00229 | 0.00226   
pop of  0 Er 7dxy      0.00248 | 0.00246   
pop of  0 Er 7dyz      0.00268 | 0.00266   
pop of  0 Er 7dz^2     0.00175 | 0.00174   
pop of  0 Er 7dxz      0.00193 | 0.00192   
pop of  0 Er 7dx2-y2    0.00164 | 0.00163   
pop of  0 Er 8dxy      0.00305 | 0.00304   
pop of  0 Er 8dyz      0.00290 | 0.00290   
pop of  0 Er 8dz^2     0.00281 | 0.00281   
pop of  0 Er 8dxz      0.00276 | 0.00275   
pop of  0 Er 8dx2-y2    0.00194 | 0.00194   
pop of  0 Er 9dxy      0.00302 | 0.00302   
pop of  0 Er 9dyz      0.00364 | 0.00364   
pop of  0 Er 9dz^2     0.00353 | 0.00353   
pop of  0 Er 9dxz      0.00369 | 0.00369   
pop of  0 Er 9dx2-y2    0.00224 | 0.00224   
pop of  0 Er 10dxy      0.00021 | 0.00021   
pop of  0 Er 10dyz      0.00027 | 0.00027   
pop of  0 Er 10dz^2     0.00024 | 0.00024   
pop of  0 Er 10dxz      0.00024 | 0.00024   
pop of  0 Er 10dx2-y2    0.00021 | 0.00020   
pop of  0 Er 11dxy      0.00113 | 0.00112   
pop of  0 Er 11dyz      0.00189 | 0.00188   
pop of  0 Er 11dz^2     0.00146 | 0.00146   
pop of  0 Er 11dxz      0.00153 | 0.00153   
pop of  0 Er 11dx2-y2    0.00099 | 0.00099   
pop of  0 Er 4f-3      0.91213 | 0.73352   
pop of  0 Er 4f-2      0.82782 | 0.68297   
pop of  0 Er 4f-1      0.82410 | 0.70918   
pop of  0 Er 4f+0      0.85013 | 0.73487   
pop of  0 Er 4f+1      0.80707 | 0.68118   
pop of  0 Er 4f+2      0.89419 | 0.76887   
pop of  0 Er 4f+3      0.89319 | 0.67264   
pop of  0 Er 5f-3      0.00120 | 0.00091   
pop of  0 Er 5f-2      0.00148 | 0.00118   
pop of  0 Er 5f-1      0.00119 | 0.00089   
pop of  0 Er 5f+0      0.00113 | 0.00084   
pop of  0 Er 5f+1      0.00147 | 0.00117   
pop of  0 Er 5f+2      0.00116 | 0.00088   
pop of  0 Er 5f+3      0.00112 | 0.00081   
pop of  0 Er 6f-3      0.00142 | 0.00136   
pop of  0 Er 6f-2      0.00161 | 0.00156   
pop of  0 Er 6f-1      0.00186 | 0.00180   
pop of  0 Er 6f+0      0.00198 | 0.00191   
pop of  0 Er 6f+1      0.00169 | 0.00163   
pop of  0 Er 6f+2      0.00169 | 0.00163   
pop of  0 Er 6f+3      0.00172 | 0.00164   
pop of  1 O 1s        0.99999 | 0.99999   
pop of  1 O 2s        0.86231 | 0.86235   
pop of  1 O 3s        0.00508 | 0.00506   
pop of  1 O 2px       0.78691 | 0.78693   
pop of  1 O 2py       0.89032 | 0.89042   
pop of  1 O 2pz       0.86871 | 0.86885   
pop of  1 O 3px       0.00273 | 0.00272   
pop of  1 O 3py       0.00422 | 0.00420   
pop of  1 O 3pz       0.00429 | 0.00426   
pop of  2 O 1s        0.99999 | 0.99999   
pop of  2 O 2s        0.86099 | 0.86099   
pop of  2 O 3s        0.00610 | 0.00610   
pop of  2 O 2px       0.95208 | 0.95210   
pop of  2 O 2py       0.82769 | 0.82769   
pop of  2 O 2pz       0.75528 | 0.75529   
pop of  2 O 3px       0.00541 | 0.00541   
pop of  2 O 3py       0.00310 | 0.00310   
pop of  2 O 3pz       0.00186 | 0.00185   
pop of  3 O 1s        0.99999 | 0.99999   
pop of  3 O 2s        0.86837 | 0.86843   
pop of  3 O 3s        0.00484 | 0.00482   
pop of  3 O 2px       0.78776 | 0.78781   
pop of  3 O 2py       0.85487 | 0.85498   
pop of  3 O 2pz       0.88475 | 0.88493   
pop of  3 O 3px       0.00254 | 0.00253   
pop of  3 O 3py       0.00382 | 0.00379   
pop of  3 O 3pz       0.00407 | 0.00404   
pop of  4 O 1s        0.99999 | 0.99999   
pop of  4 O 2s        0.86517 | 0.86519   
pop of  4 O 3s        0.00504 | 0.00502   
pop of  4 O 2px       0.77933 | 0.77933   
pop of  4 O 2py       0.90944 | 0.90954   
pop of  4 O 2pz       0.86747 | 0.86760   
pop of  4 O 3px       0.00271 | 0.00270   
pop of  4 O 3py       0.00468 | 0.00464   
pop of  4 O 3pz       0.00442 | 0.00438   
pop of  5 O 1s        0.99999 | 0.99999   
pop of  5 O 2s        0.85928 | 0.85928   
pop of  5 O 3s        0.00624 | 0.00624   
pop of  5 O 2px       0.94808 | 0.94811   
pop of  5 O 2py       0.81778 | 0.81780   
pop of  5 O 2pz       0.77322 | 0.77322   
pop of  5 O 3px       0.00534 | 0.00534   
pop of  5 O 3py       0.00278 | 0.00278   
pop of  5 O 3pz       0.00235 | 0.00235   
pop of  6 O 1s        0.99999 | 0.99999   
pop of  6 O 2s        0.85927 | 0.85931   
pop of  6 O 3s        0.00513 | 0.00510   
pop of  6 O 2px       0.80965 | 0.80969   
pop of  6 O 2py       0.82953 | 0.82964   
pop of  6 O 2pz       0.88132 | 0.88151   
pop of  6 O 3px       0.00271 | 0.00269   
pop of  6 O 3py       0.00320 | 0.00317   
pop of  6 O 3pz       0.00405 | 0.00400   
pop of  7 O 1s        0.99999 | 0.99999   
pop of  7 O 2s        0.86112 | 0.86118   
pop of  7 O 3s        0.00523 | 0.00520   
pop of  7 O 2px       0.93737 | 0.93766   
pop of  7 O 2py       0.83293 | 0.83305   
pop of  7 O 2pz       0.77291 | 0.77296   
pop of  7 O 3px       0.00542 | 0.00535   
pop of  7 O 3py       0.00350 | 0.00347   
pop of  7 O 3pz       0.00193 | 0.00192   
pop of  8 O 1s        0.99999 | 0.99999   
pop of  8 O 2s        0.86478 | 0.86483   
pop of  8 O 3s        0.00509 | 0.00507   
pop of  8 O 2px       0.72480 | 0.72490   
pop of  8 O 2py       0.91067 | 0.91086   
pop of  8 O 2pz       0.91780 | 0.91795   
pop of  8 O 3px       0.00127 | 0.00126   
pop of  8 O 3py       0.00493 | 0.00489   
pop of  8 O 3pz       0.00559 | 0.00556   
pop of  9 O 1s        0.99999 | 0.99999   
pop of  9 O 2s        0.86964 | 0.86968   
pop of  9 O 3s        0.00499 | 0.00495   
pop of  9 O 2px       0.71920 | 0.71929   
pop of  9 O 2py       0.91357 | 0.91378   
pop of  9 O 2pz       0.92314 | 0.92324   
pop of  9 O 3px       0.00121 | 0.00119   
pop of  9 O 3py       0.00505 | 0.00500   
pop of  9 O 3pz       0.00594 | 0.00589   
pop of  10 O 1s        0.99999 | 0.99999   
pop of  10 O 2s        0.85879 | 0.85879   
pop of  10 O 3s        0.00605 | 0.00605   
pop of  10 O 2px       0.85075 | 0.85077   
pop of  10 O 2py       0.80732 | 0.80733   
pop of  10 O 2pz       0.84971 | 0.84973   
pop of  10 O 3px       0.00277 | 0.00277   
pop of  10 O 3py       0.00257 | 0.00257   
pop of  10 O 3pz       0.00354 | 0.00354   
pop of  11 O 1s        0.99999 | 0.99999   
pop of  11 O 2s        0.86116 | 0.86120   
pop of  11 O 3s        0.00522 | 0.00519   
pop of  11 O 2px       0.93587 | 0.93611   
pop of  11 O 2py       0.83420 | 0.83433   
pop of  11 O 2pz       0.76548 | 0.76555   
pop of  11 O 3px       0.00520 | 0.00514   
pop of  11 O 3py       0.00346 | 0.00343   
pop of  11 O 3pz       0.00185 | 0.00184   
pop of  12 C 1s        0.99999 | 0.99999   
pop of  12 C 2s        0.41723 | 0.41720   
pop of  12 C 3s        0.00983 | 0.00983   
pop of  12 C 2px       0.41423 | 0.41421   
pop of  12 C 2py       0.37714 | 0.37708   
pop of  12 C 2pz       0.41058 | 0.41053   
pop of  12 C 3px       0.01875 | 0.01875   
pop of  12 C 3py       0.00445 | 0.00443   
pop of  12 C 3pz       0.01307 | 0.01305   
pop of  13 C 1s        0.99999 | 0.99999   
pop of  13 C 2s        0.41301 | 0.41295   
pop of  13 C 3s        0.01008 | 0.01008   
pop of  13 C 2px       0.41173 | 0.41171   
pop of  13 C 2py       0.38619 | 0.38613   
pop of  13 C 2pz       0.40566 | 0.40560   
pop of  13 C 3px       0.01820 | 0.01819   
pop of  13 C 3py       0.00707 | 0.00705   
pop of  13 C 3pz       0.01120 | 0.01117   
pop of  14 C 1s        0.99999 | 0.99999   
pop of  14 C 2s        0.41353 | 0.41348   
pop of  14 C 3s        0.01007 | 0.01007   
pop of  14 C 2px       0.41413 | 0.41408   
pop of  14 C 2py       0.38834 | 0.38827   
pop of  14 C 2pz       0.40143 | 0.40138   
pop of  14 C 3px       0.01702 | 0.01700   
pop of  14 C 3py       0.00664 | 0.00663   
pop of  14 C 3pz       0.01275 | 0.01273   
pop of  15 C 1s        0.99999 | 0.99999   
pop of  15 C 2s        0.41552 | 0.41546   
pop of  15 C 3s        0.01007 | 0.01006   
pop of  15 C 2px       0.41244 | 0.41240   
pop of  15 C 2py       0.38727 | 0.38720   
pop of  15 C 2pz       0.40137 | 0.40132   
pop of  15 C 3px       0.01659 | 0.01656   
pop of  15 C 3py       0.00664 | 0.00662   
pop of  15 C 3pz       0.01280 | 0.01278   
pop of  16 O 1s        0.99999 | 0.99999   
pop of  16 O 2s        0.85984 | 0.85984   
pop of  16 O 3s        0.00602 | 0.00602   
pop of  16 O 2px       0.84267 | 0.84269   
pop of  16 O 2py       0.81144 | 0.81145   
pop of  16 O 2pz       0.84948 | 0.84951   
pop of  16 O 3px       0.00264 | 0.00264   
pop of  16 O 3py       0.00266 | 0.00266   
pop of  16 O 3pz       0.00353 | 0.00353   
In total            97.01506 | 95.98494  
 ** Mulliken atomic charges   ( Nelec_alpha | Nelec_beta ) **
charge of  0Er =      2.24442  (    33.39364     32.36194 )
charge of  1O =     -0.84937  (     4.42457      4.42479 )
charge of  2O =     -0.82503  (     4.41249      4.41253 )
charge of  3O =     -0.82234  (     4.41102      4.41132 )
charge of  4O =     -0.87666  (     4.43826      4.43840 )
charge of  5O =     -0.83016  (     4.41506      4.41510 )
charge of  6O =     -0.78996  (     4.39485      4.39511 )
charge of  7O =     -0.84117  (     4.42039      4.42078 )
charge of  8O =     -0.87021  (     4.43491      4.43530 )
charge of  9O =     -0.88574  (     4.44272      4.44302 )
charge of  10O =     -0.76303  (     4.38149      4.38154 )
charge of  11O =     -0.82523  (     4.41244      4.41279 )
charge of  12C =      0.66967  (     2.66526      2.66507 )
charge of  13C =      0.67401  (     2.66312      2.66287 )
charge of  14C =      0.67247  (     2.66389      2.66364 )
charge of  15C =      0.67492  (     2.66267      2.66240 )
charge of  16O =     -0.75660  (     4.37827      4.37833 )
(3, 264, 264) 264
S vector [ 0.2454+0.j -1.3324-0.j  0.5151-0.j]
(3, 264, 264) 264
L vector [ 1.0123+0.j -5.5555+0.j  2.1288-0.j]
(3, 264, 264) 264
J vector [ 1.2577+0.j -6.888 +0.j  2.6439-0.j]
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
ao_index [ 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383]
ao_labels ['0 Er 4f-3  ' '0 Er 4f-2  ' '0 Er 4f-1  ' '0 Er 4f+0  ' '0 Er 4f+1  ' '0 Er 4f+2  ' '0 Er 4f+3  ' '0 Er 5f-3  ' '0 Er 5f-2  ' '0 Er 5f-1  ' '0 Er 5f+0  ' '0 Er 5f+1  ' '0 Er 5f+2  ' '0 Er 5f+3  ' '0 Er 6f-3  ' '0 Er 6f-2  ' '0 Er 6f-1  ' '0 Er 6f+0  ' '0 Er 6f+1  ' '0 Er 6f+2  ' '0 Er 6f+3  ']
rank = 5, idx_lst = [ 5 21]
rank = 3, idx_lst = [ 3 19]
  J     M     c^2  
rank = 15, idx_lst = [15]
rank = 7, idx_lst = [ 7 23]
rank = 1, idx_lst = [ 1 17]
rank = 0, idx_lst = [ 0 16]
rank = 9, idx_lst = [ 9 25]
rank = 11, idx_lst = [11 27]
rank = 13, idx_lst = [13]
rank = 12, idx_lst = [12 28]
rank = 4, idx_lst = [ 4 20]
rank = 6, idx_lst = [ 6 22]
rank = 8, idx_lst = [ 8 24]
rank = 14, idx_lst = [14]
rank = 2, idx_lst = [ 2 18]
rank = 10, idx_lst = [10 26]
[hpc-23-16.cm.cluster:3244703] 15 more processes have sent help message help-mpi-btl-openib.txt / error in device init
[hpc-23-16.cm.cluster:3244703] Set MCA parameter "orte_base_help_aggregate" to 0 to see all help / error messages
 7.5    7.5    7.5    0.00306    0.00000
 7.5    7.5    6.5    0.00049   -0.00778
 7.5    7.5    5.5   -0.01391   -0.00245
 7.5    7.5    4.5   -0.00646    0.01940
 7.5    7.5    3.5    0.02178    0.01168
 7.5    7.5    2.5    0.01595   -0.01992
 7.5    7.5    1.5   -0.01483   -0.01738
 7.5    7.5    0.5   -0.01553    0.00877
 7.5    7.5   -0.5    0.00382    0.01155
 7.5    7.5   -1.5    0.00719   -0.00085
 7.5    7.5   -2.5    0.00037   -0.00375
 7.5    7.5   -3.5   -0.00163   -0.00058
 7.5    7.5   -4.5   -0.00042    0.00058
 7.5    7.5   -5.5    0.00016    0.00022
 7.5    7.5   -6.5    0.00009   -0.00003
 7.5    7.5   -7.5   -0.00000   -0.00002
 7.5    6.5    6.5    0.01993    0.00001
 7.5    6.5    5.5    0.00401   -0.03595
 7.5    6.5    4.5   -0.05064   -0.01337
 7.5    6.5    3.5   -0.02629    0.05755
 7.5    6.5    2.5    0.05348    0.03751
 7.5    6.5    1.5    0.04197   -0.04068
 7.5    6.5    0.5   -0.02492   -0.03822
 7.5    6.5   -0.5   -0.02888    0.01162
 7.5    6.5   -1.5    0.00334    0.01824
 7.5    6.5   -2.5    0.00965    0.00034
 7.5    6.5   -3.5    0.00122   -0.00427
 7.5    6.5   -4.5   -0.00156   -0.00097
 7.5    6.5   -5.5   -0.00053    0.00045
 7.5    6.5   -6.5    0.00009    0.00021
 7.5    6.5   -7.5    0.00006   -0.00001
 7.5    5.5    5.5    0.06574    0.00003
 7.5    5.5    4.5    0.01398   -0.09419
 7.5    5.5    3.5   -0.10925   -0.03588
 7.5    5.5    2.5   -0.05694    0.10413
 7.5    5.5    1.5    0.08188    0.06756
 7.5    5.5    0.5    0.06398   -0.05265
 7.5    5.5   -0.5   -0.02678   -0.04979
 7.5    5.5   -1.5   -0.03226    0.00969
 7.5    5.5   -2.5    0.00133    0.01750
 7.5    5.5   -3.5    0.00795    0.00133
 7.5    5.5   -4.5    0.00143   -0.00301
 7.5    5.5   -5.5   -0.00092   -0.00086
 7.5    5.5   -6.5   -0.00037    0.00021
 7.5    5.5   -7.5    0.00003    0.00011
 7.5    4.5    4.5    0.13796    0.00004
 7.5    4.5    3.5    0.02823   -0.16426
 7.5    4.5    2.5   -0.16136   -0.05947
 7.5    4.5    1.5   -0.07938    0.13168
 7.5    4.5    0.5    0.08900    0.08047
 7.5    4.5   -0.5    0.06565   -0.04890
 7.5    4.5   -1.5   -0.02072   -0.04417
 7.5    4.5   -2.5   -0.02480    0.00562
 7.5    4.5   -3.5   -0.00022    0.01168
 7.5    4.5   -4.5    0.00461    0.00141
 7.5    4.5   -5.5    0.00104   -0.00151
 7.5    4.5   -6.5   -0.00038   -0.00049
 7.5    4.5   -7.5   -0.00015    0.00006
 7.5    3.5    3.5    0.20135    0.00002
 7.5    3.5    2.5    0.03781   -0.20434
 7.5    3.5    1.5   -0.17307   -0.06756
 7.5    3.5    0.5   -0.07757    0.12242
 7.5    3.5   -0.5    0.07160    0.06814
 7.5    3.5   -1.5    0.04837   -0.03367
 7.5    3.5   -2.5   -0.01176   -0.02839
 7.5    3.5   -3.5   -0.01394    0.00214
 7.5    3.5   -4.5   -0.00073    0.00577
 7.5    3.5   -5.5    0.00200    0.00094
 7.5    3.5   -6.5    0.00051   -0.00056
 7.5    3.5   -7.5   -0.00010   -0.00017
 7.5    2.5    2.5    0.21452   -0.00000
 7.5    2.5    1.5    0.03609   -0.18842
 7.5    2.5    0.5   -0.13887   -0.05572
 7.5    2.5   -0.5   -0.05569    0.08550
 7.5    2.5   -1.5    0.04323    0.04275
 7.5    2.5   -2.5    0.02661   -0.01724
 7.5    2.5   -3.5   -0.00477   -0.01377
 7.5    2.5   -4.5   -0.00601    0.00033
 7.5    2.5   -5.5   -0.00057    0.00221
 7.5    2.5   -6.5    0.00066    0.00041
 7.5    2.5   -7.5    0.00015   -0.00014
 7.5    1.5    1.5    0.17160   -0.00001
 7.5    1.5    0.5    0.02558   -0.13145
 7.5    1.5   -0.5   -0.08452   -0.03451
 7.5    1.5   -1.5   -0.03024    0.04519
 7.5    1.5   -2.5    0.01959    0.02045
 7.5    1.5   -3.5    0.01129   -0.00646
 7.5    1.5   -4.5   -0.00128   -0.00523
 7.5    1.5   -5.5   -0.00204   -0.00014
 7.5    1.5   -6.5   -0.00025    0.00064
 7.5    1.5   -7.5    0.00014    0.00011
 7.5    0.5    0.5    0.10451   -0.00005
 7.5    0.5   -0.5    0.01380   -0.06994
 7.5    0.5   -1.5   -0.03916   -0.01640
 7.5    0.5   -2.5   -0.01272    0.01806
 7.5    0.5   -3.5    0.00662    0.00765
 7.5    0.5   -4.5    0.00380   -0.00174
 7.5    0.5   -5.5   -0.00019   -0.00158
 7.5    0.5   -6.5   -0.00053   -0.00009
 7.5    0.5   -7.5   -0.00006    0.00012
 7.5   -0.5   -0.5    0.04865   -0.00005
 7.5   -0.5   -1.5    0.00580   -0.02842
 7.5   -0.5   -2.5   -0.01381   -0.00612
 7.5   -0.5   -3.5   -0.00423    0.00546
 7.5   -0.5   -4.5    0.00166    0.00230
 7.5   -0.5   -5.5    0.00103   -0.00032
 7.5   -0.5   -6.5    0.00000   -0.00038
 7.5   -0.5   -7.5   -0.00010   -0.00002
 7.5   -1.5   -1.5    0.01731    0.00001
 7.5   -1.5   -2.5    0.00195   -0.00881
 7.5   -1.5   -3.5   -0.00371   -0.00183
 7.5   -1.5   -4.5   -0.00114    0.00125
 7.5   -1.5   -5.5    0.00031    0.00055
 7.5   -1.5   -6.5    0.00021   -0.00003
 7.5   -1.5   -7.5    0.00001   -0.00006
 7.5   -2.5   -2.5    0.00470    0.00003
 7.5   -2.5   -3.5    0.00054   -0.00210
 7.5   -2.5   -4.5   -0.00077   -0.00045
 7.5   -2.5   -5.5   -0.00025    0.00023
 7.5   -2.5   -6.5    0.00005    0.00009
 7.5   -2.5   -7.5    0.00002   -0.00000
 7.5   -3.5   -3.5    0.00099    0.00002
 7.5   -3.5   -4.5    0.00013   -0.00039
 7.5   -3.5   -5.5   -0.00013   -0.00009
 7.5   -3.5   -6.5   -0.00004    0.00004
 7.5   -3.5   -7.5    0.00001    0.00001
 7.5   -4.5   -4.5    0.00016    0.00001
 7.5   -4.5   -5.5    0.00003   -0.00006
 7.5   -4.5   -6.5   -0.00002   -0.00002
 7.5   -5.5   -5.5    0.00002    0.00001
triangle [[ 0.0031+0.j      0.0005-0.0078j -0.0139-0.0024j -0.0065+0.0194j  0.0218+0.0117j  0.016 -0.0199j -0.0148-0.0174j -0.0155+0.0088j  0.0038+0.0116j  0.0072-0.0008j  0.0004-0.0038j -0.0016-0.0006j -0.0004+0.0006j  0.0002+0.0002j  0.0001-0.j     -0.    -0.j    ]
 [ 0.    +0.j      0.0199+0.j      0.004 -0.036j  -0.0506-0.0134j -0.0263+0.0575j  0.0535+0.0375j  0.042 -0.0407j -0.0249-0.0382j -0.0289+0.0116j  0.0033+0.0182j  0.0097+0.0003j  0.0012-0.0043j -0.0016-0.001j  -0.0005+0.0005j  0.0001+0.0002j  0.0001-0.j    ]
 [ 0.    +0.j      0.    +0.j      0.0657+0.j      0.014 -0.0942j -0.1093-0.0359j -0.0569+0.1041j  0.0819+0.0676j  0.064 -0.0527j -0.0268-0.0498j -0.0323+0.0097j  0.0013+0.0175j  0.008 +0.0013j  0.0014-0.003j  -0.0009-0.0009j -0.0004+0.0002j  0.    +0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.138 +0.j      0.0282-0.1643j -0.1614-0.0595j -0.0794+0.1317j  0.089 +0.0805j  0.0657-0.0489j -0.0207-0.0442j -0.0248+0.0056j -0.0002+0.0117j  0.0046+0.0014j  0.001 -0.0015j -0.0004-0.0005j -0.0001+0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.2014+0.j      0.0378-0.2043j -0.1731-0.0676j -0.0776+0.1224j  0.0716+0.0681j  0.0484-0.0337j -0.0118-0.0284j -0.0139+0.0021j -0.0007+0.0058j  0.002 +0.0009j  0.0005-0.0006j -0.0001-0.0002j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.2145-0.j      0.0361-0.1884j -0.1389-0.0557j -0.0557+0.0855j  0.0432+0.0428j  0.0266-0.0172j -0.0048-0.0138j -0.006 +0.0003j -0.0006+0.0022j  0.0007+0.0004j  0.0001-0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.1716-0.j      0.0256-0.1314j -0.0845-0.0345j -0.0302+0.0452j  0.0196+0.0204j  0.0113-0.0065j -0.0013-0.0052j -0.002 -0.0001j -0.0003+0.0006j  0.0001+0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.1045-0.j      0.0138-0.0699j -0.0392-0.0164j -0.0127+0.0181j  0.0066+0.0077j  0.0038-0.0017j -0.0002-0.0016j -0.0005-0.0001j -0.0001+0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0486-0.j      0.0058-0.0284j -0.0138-0.0061j -0.0042+0.0055j  0.0017+0.0023j  0.001 -0.0003j  0.    -0.0004j -0.0001-0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0173+0.j      0.0019-0.0088j -0.0037-0.0018j -0.0011+0.0013j  0.0003+0.0005j  0.0002-0.j      0.    -0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0047+0.j      0.0005-0.0021j -0.0008-0.0005j -0.0002+0.0002j  0.    +0.0001j  0.    -0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.001 +0.j      0.0001-0.0004j -0.0001-0.0001j -0.    +0.j      0.    +0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0002+0.j      0.    -0.0001j -0.    -0.j     -0.    +0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    -0.j     -0.    -0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    -0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j     -0.    +0.j    ]]
full [[ 0.0031+0.j      0.0005-0.0078j -0.0139-0.0024j -0.0065+0.0194j  0.0218+0.0117j  0.016 -0.0199j -0.0148-0.0174j -0.0155+0.0088j  0.0038+0.0116j  0.0072-0.0008j  0.0004-0.0038j -0.0016-0.0006j -0.0004+0.0006j  0.0002+0.0002j  0.0001-0.j     -0.    -0.j    ]
 [ 0.0005+0.0078j  0.0199+0.j      0.004 -0.036j  -0.0506-0.0134j -0.0263+0.0575j  0.0535+0.0375j  0.042 -0.0407j -0.0249-0.0382j -0.0289+0.0116j  0.0033+0.0182j  0.0097+0.0003j  0.0012-0.0043j -0.0016-0.001j  -0.0005+0.0005j  0.0001+0.0002j  0.0001-0.j    ]
 [-0.0139+0.0024j  0.004 +0.036j   0.0657+0.j      0.014 -0.0942j -0.1093-0.0359j -0.0569+0.1041j  0.0819+0.0676j  0.064 -0.0527j -0.0268-0.0498j -0.0323+0.0097j  0.0013+0.0175j  0.008 +0.0013j  0.0014-0.003j  -0.0009-0.0009j -0.0004+0.0002j  0.    +0.0001j]
 [-0.0065-0.0194j -0.0506+0.0134j  0.014 +0.0942j  0.138 +0.j      0.0282-0.1643j -0.1614-0.0595j -0.0794+0.1317j  0.089 +0.0805j  0.0657-0.0489j -0.0207-0.0442j -0.0248+0.0056j -0.0002+0.0117j  0.0046+0.0014j  0.001 -0.0015j -0.0004-0.0005j -0.0001+0.0001j]
 [ 0.0218-0.0117j -0.0263-0.0575j -0.1093+0.0359j  0.0282+0.1643j  0.2014+0.j      0.0378-0.2043j -0.1731-0.0676j -0.0776+0.1224j  0.0716+0.0681j  0.0484-0.0337j -0.0118-0.0284j -0.0139+0.0021j -0.0007+0.0058j  0.002 +0.0009j  0.0005-0.0006j -0.0001-0.0002j]
 [ 0.016 +0.0199j  0.0535-0.0375j -0.0569-0.1041j -0.1614+0.0595j  0.0378+0.2043j  0.2145+0.j      0.0361-0.1884j -0.1389-0.0557j -0.0557+0.0855j  0.0432+0.0428j  0.0266-0.0172j -0.0048-0.0138j -0.006 +0.0003j -0.0006+0.0022j  0.0007+0.0004j  0.0001-0.0001j]
 [-0.0148+0.0174j  0.042 +0.0407j  0.0819-0.0676j -0.0794-0.1317j -0.1731+0.0676j  0.0361+0.1884j  0.1716+0.j      0.0256-0.1314j -0.0845-0.0345j -0.0302+0.0452j  0.0196+0.0204j  0.0113-0.0065j -0.0013-0.0052j -0.002 -0.0001j -0.0003+0.0006j  0.0001+0.0001j]
 [-0.0155-0.0088j -0.0249+0.0382j  0.064 +0.0527j  0.089 -0.0805j -0.0776-0.1224j -0.1389+0.0557j  0.0256+0.1314j  0.1045+0.j      0.0138-0.0699j -0.0392-0.0164j -0.0127+0.0181j  0.0066+0.0077j  0.0038-0.0017j -0.0002-0.0016j -0.0005-0.0001j -0.0001+0.0001j]
 [ 0.0038-0.0116j -0.0289-0.0116j -0.0268+0.0498j  0.0657+0.0489j  0.0716-0.0681j -0.0557-0.0855j -0.0845+0.0345j  0.0138+0.0699j  0.0486+0.j      0.0058-0.0284j -0.0138-0.0061j -0.0042+0.0055j  0.0017+0.0023j  0.001 -0.0003j  0.    -0.0004j -0.0001-0.j    ]
 [ 0.0072+0.0008j  0.0033-0.0182j -0.0323-0.0097j -0.0207+0.0442j  0.0484+0.0337j  0.0432-0.0428j -0.0302-0.0452j -0.0392+0.0164j  0.0058+0.0284j  0.0173+0.j      0.0019-0.0088j -0.0037-0.0018j -0.0011+0.0013j  0.0003+0.0005j  0.0002-0.j      0.    -0.0001j]
 [ 0.0004+0.0038j  0.0097-0.0003j  0.0013-0.0175j -0.0248-0.0056j -0.0118+0.0284j  0.0266+0.0172j  0.0196-0.0204j -0.0127-0.0181j -0.0138+0.0061j  0.0019+0.0088j  0.0047+0.j      0.0005-0.0021j -0.0008-0.0005j -0.0002+0.0002j  0.    +0.0001j  0.    -0.j    ]
 [-0.0016+0.0006j  0.0012+0.0043j  0.008 -0.0013j -0.0002-0.0117j -0.0139-0.0021j -0.0048+0.0138j  0.0113+0.0065j  0.0066-0.0077j -0.0042-0.0055j -0.0037+0.0018j  0.0005+0.0021j  0.001 +0.j      0.0001-0.0004j -0.0001-0.0001j -0.    +0.j      0.    +0.j    ]
 [-0.0004-0.0006j -0.0016+0.001j   0.0014+0.003j   0.0046-0.0014j -0.0007-0.0058j -0.006 -0.0003j -0.0013+0.0052j  0.0038+0.0017j  0.0017-0.0023j -0.0011-0.0013j -0.0008+0.0005j  0.0001+0.0004j  0.0002+0.j      0.    -0.0001j -0.    -0.j     -0.    +0.j    ]
 [ 0.0002-0.0002j -0.0005-0.0005j -0.0009+0.0009j  0.001 +0.0015j  0.002 -0.0009j -0.0006-0.0022j -0.002 +0.0001j -0.0002+0.0016j  0.001 +0.0003j  0.0003-0.0005j -0.0002-0.0002j -0.0001+0.0001j  0.    +0.0001j  0.    +0.j      0.    -0.j     -0.    -0.j    ]
 [ 0.0001+0.j      0.0001-0.0002j -0.0004-0.0002j -0.0004+0.0005j  0.0005+0.0006j  0.0007-0.0004j -0.0003-0.0006j -0.0005+0.0001j  0.    +0.0004j  0.0002+0.j      0.    -0.0001j -0.    -0.j     -0.    +0.j      0.    +0.j      0.    +0.j      0.    -0.j    ]
 [-0.    +0.j      0.0001+0.j      0.    -0.0001j -0.0001-0.0001j -0.0001+0.0002j  0.0001+0.0001j  0.0001-0.0001j -0.0001-0.0001j -0.0001+0.j      0.    +0.0001j  0.    +0.j      0.    -0.j     -0.    -0.j     -0.    +0.j      0.    +0.j     -0.    +0.j    ]]
Sum of c^2 0.9904907155444983
Wed Apr 16 00:14:47 PDT 2025
