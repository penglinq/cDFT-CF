Currently Loaded Modulefiles:
 1) gmp/6.2.1-gcc-13.2.0-lcnhyse <aL>             
 2) mpfr/4.2.0-gcc-13.2.0-yy2fkq5 <aL>            
 3) mpc/1.3.1-gcc-13.2.0-5kgoftq <aL>             
 4) zlib-ng/2.1.3-gcc-13.2.0-jetnfwa <aL>         
 5) zstd/1.5.5-gcc-13.2.0-t2lua3l <aL>            
 6) gcc/13.2.0-gcc-13.2.0-w55nxkl                 
 7) cmake/3.20.2-gcc-13.2.0-rp74vpv               
 8) libfabric/1.18.1-gcc-13.2.0-bijxar4 <aL>      
 9) numactl/2.0.14-gcc-13.2.0-etkf74e <aL>        
10) openssh/8.7p1-gcc-13.2.0-g55xmkx <aL>         
11) slurm/22.05.6-gcc-13.2.0-tchsn6y <aL>         
12) openmpi/4.1.5-gcc-13.2.0-24q3ap2              
13) libpciaccess/0.17-gcc-13.2.0-r2cijnn <aL>     
14) libiconv/1.17-gcc-13.2.0-ntov4te <aL>         
15) xz/5.4.1-gcc-13.2.0-4xkm5xo <aL>              
16) libxml2/2.10.3-gcc-13.2.0-fr6jcjz <aL>        
17) ncurses/6.4-gcc-13.2.0-4o2yj6n <aL>           
18) hwloc/2.9.1-gcc-13.2.0-gzvfolk <aL>           
19) intel-tbb/2021.9.0-gcc-13.2.0-6nwk3ml <aL>    
20) intel-oneapi-mkl/2023.2.0-gcc-13.2.0-ohvyk7g  

Key:
<module-tag>  <aL>=auto-loaded  
/central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF
Tue Apr 15 23:45:01 PDT 2025
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
hpc-92-14.cm.cluster
--------------------------------------------------------------------------
WARNING: There was an error initializing an OpenFabrics device.

  Local host:   hpc-92-14
  Local device: mlx5_0
--------------------------------------------------------------------------
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
Apr 15 23:45:04 ####### 
                ####### libDMET   version 0.5
                ####### A periodic DMET library for lattice model and realistic solid.
                ####### 
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


PySCF version 2.5.0
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


PySCF version 2.5.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     [CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[CONFIG] conf_file None
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
     Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
   data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
CPU time:         0.94
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
N_elec (98, 95), N_ao 264
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0

[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
N_elec (98, 95), N_ao 264
CPU time:         0.94
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

N_elec (98, 95), N_ao 264

#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
               6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


nuclear repulsion = 2660.00686642269
number of shells = 122
     else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
               [INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.93
N_elec (98, 95), N_ao 264
N_elec (98, 95), N_ao 264
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.91
6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
     else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                N_elec (98, 95), N_ao 264
N_elec (98, 95), N_ao 264
nuclear repulsion = 2660.00686642269
number of shells = 122
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
number of NR pGTOs = 525
number of NR cGTOs = 264
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
N_elec (98, 95), N_ao 264
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] num. electrons = 193
[INPUT] charge = -5
#INFO: **** input file is /central/groups/changroup/members/lppeng/holmium/run/paper_final/run_ErCO34/conf2/cHF/run_4/get_JM.py ****
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


CPU time:         0.94
:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
N_elec (98, 95), N_ao 264
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.95
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

number of NR pGTOs = 525
nuclear repulsion = 2660.00686642269
number of shells = 122
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
N_elec (98, 95), N_ao 264
number of NR pGTOs = 525
number of NR cGTOs = 264
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
CPU time:         0.95
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
N_elec (98, 95), N_ao 264
N_elec (98, 95), N_ao 264
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
nuclear repulsion = 2660.00686642269
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
number of shells = 122
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
number of NR pGTOs = 525
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
CPU time:         0.95
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
N_elec (98, 95), N_ao 264
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
N_elec (98, 95), N_ao 264
nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.94
N_elec (98, 95), N_ao 264
'''
Expand a Slater Determinant in eigenfunctions of J amd Jz
'''
import pyscf
from functools import reduce
from pyscf import scf, lib, lo, symm, gto
import os, sys
import numpy as np
import scipy.linalg as la
import scipy
from mpi4py import MPI
comm = MPI.COMM_WORLD
mpirank = comm.Get_rank()
mpisize = comm.Get_size()
log = lib.logger.Logger(sys.stdout, 4)
np.set_printoptions(precision=4, threshold=sys.maxsize, linewidth=380, suppress=True)

if __name__ == "__main__":
    from pyscf import gto, scf, dft, lib
    from pyscf.lib import chkfile
    from stevens import project
    from stevens.momentum import get_mj

    # system input
    geometry = 'ErCO34' # The name of geometry file minus ".xyz"
                       # Make sure first atom is the central magnetic atom 
    spin = 3 # number of unpaired electrons in a unit cell
    charge = -5 # charge of the molecule or a unit cell
    basis = {'default': '631g', 'Er': 'sarc-dkh'} # specify basis for all elements here
    max_memory = 6000 # in the unit of MB. Recommend: memory available on a node - 10000 MB

    # other parameter
    chkfname = 'constrained_chkfile.chk'  # load PySCF cHF/DFT solution 
    lo_chkfname = '../../UHF/uhf_gs_%s_lo.h5'%geometry  
    atom_index = 0 # the index of central lanthanide atom
    ao_shell = 'f'
    N_grid = (19,10,19) 
    max_J = 7.5
    max_J_only = True
    project_type = 'full' # "spin" (S), "orb" (L), or "full" (J)
    diag_only = False

    # set up system
    if os.path.isfile('../../' + geometry + ".xyz"):
        mol = gto.M(
            atom = '../../' + geometry + ".xyz",
            basis = basis,
            verbose = 4,
            spin = spin,
            charge = charge,
            max_memory = max_memory,
            )
        mol.set_common_origin(mol._atom[atom_index][1])
    else:
        raise ValueError("No .xyz file available!")
    log.info("N_elec %s, N_ao %s"%(mol.nelec, mol.nao))

    # load cHF solution
    gmf = scf.GHF(mol).x2c()
    if chkfname is not None and os.path.isfile(chkfname):
        data = chkfile.load(chkfname, 'scf')
        gmf.__dict__.update(data)
    else: 
        gmf.chkfile = geometry + '.chk'
        gmf.kernel()
    if mpirank == 0:
        gmf.analyze(with_meta_lowdin=True)
        dm = gmf.make_rdm1()
        print("S vector", get_mj(mol, dm, include_L=False))
        print("L vector", get_mj(mol, dm, include_S=False))
        print("J vector", get_mj(mol, dm))
    
    # calculate JM projection
    comm.Barrier()
    proj = project.Project(mol, gmf, atom_index=atom_index, ao_shell=ao_shell, spin_separate=False, \
            N_grid=N_grid, lo_chkfname=lo_chkfname)

    c2_sum = 0
    if mpirank == 0:
        print("  %s     M     c^2  "%({"spin": "S", "orb": "L", "full": "J"}[project_type]))
    if project_type in ["spin", "full"] and abs(mol.spin%2) > 1e-4: 
        # Scan half-integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J))+0.5, 0, -1)
    else:
        # Scan integer J. The rest is always 0.
        J_range = np.arange(int(np.floor(max_J)), -0.5, -1)
    if max_J_only:
        J_range = J_range[:1]
    c2_Jmk = [] 
    for J in J_range:
        for m in np.arange(J,-J-1,-1):
            for k in np.arange(J,-J-1,-1):
                if (diag_only and np.abs(k-m) > 1e-10) or k-m > 1e-10: 
                    res = 0
                else:
                    # S: proj='spin'
                    # L: proj='orb'
                    # J: proj='full'
                    res = proj.get_proj_ovlp(J=J, m=m, k=k, proj=project_type, N_alpha=N_grid[0], N_beta=N_grid[1], \
                            N_gamma=N_grid[2], verbose=0)
                if J == max(J_range):
                    c2_Jmk.append(res) 
                if mpirank == 0 and la.norm(res) > 1e-5:
                    if abs(res.imag) > 1e-6:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f   %8.5f"%(J,m,k, res.real, res.imag))
                    else:
                        print(" %3.1f   %4.1f   %4.1f   %8.5f"%(J,m,k, res.real))
                    if np.abs(m-k) < 1e-6:
                        c2_sum += res.real
    if mpirank == 0:
        c2_Jmk = np.array(c2_Jmk, dtype=complex).reshape((int(2*max(J_range)+1), int(2*max(J_range)+1)))
        print('triangle', c2_Jmk)
        c2_Jmk[np.tril_indices(len(c2_Jmk), -1)] = c2_Jmk.conj().T[np.tril_indices(len(c2_Jmk), -1)]
        c2_Jmk[np.diag_indices(len(c2_Jmk))] = c2_Jmk[np.diag_indices(len(c2_Jmk))].real # c*c is real 
        print('full', c2_Jmk)
        np.save('c2_Jmk.npy', c2_Jmk)
        print("Sum of c^2", c2_sum)



    
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hpc-92-14.cm.cluster', release='5.14.0-362.24.1.el9_3.x86_64', version='#1 SMP PREEMPT_DYNAMIC Thu Feb 15 07:18:13 EST 2024', machine='x86_64')  Threads 1
Python 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:35) [GCC 12.3.0]
numpy 1.26.0  scipy 1.11.3
Date: Tue Apr 15 23:45:04 2025
PySCF version 2.5.0
PySCF path  /home/lppeng/anaconda3/envs/nerscV25/lib/python3.11/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 17
[INPUT] num. electrons = 193
[INPUT] charge = -5
[INPUT] spin (= nelec alpha-beta = 2S) = 3
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Er     0.983621000000  15.502244000000  16.207915000000 AA    1.858774300371  29.294995476182  30.628520400230 Bohr   0.0
[INPUT]  2 O      1.999162000000  14.046589000000  17.748158000000 AA    3.777868658638  26.544206194328  33.539157835508 Bohr   0.0
[INPUT]  3 O      0.849859000000  13.239725000000  19.509454000000 AA    1.606000754497  25.019454214557  36.867524899800 Bohr   0.0
[INPUT]  4 O     -0.191063000000  14.330252000000  17.844156000000 AA   -0.361056742538  27.080251576001  33.720567764014 Bohr   0.0
[INPUT]  5 O      0.075398000000  13.922617000000  14.734947000000 AA    0.142481570340  26.309933067214  27.845014289982 Bohr   0.0
[INPUT]  6 O      1.310036000000  13.048514000000  13.067690000000 AA    2.475609253321  24.658117792553  24.694355180718 Bohr   0.0
[INPUT]  7 O      2.203594000000  14.429009000000  14.574295000000 AA    4.164189149735  27.266875258884  27.541426008618 Bohr   0.0
[INPUT]  8 O     -1.142155000000  16.458779000000  15.996655000000 AA   -2.158360141803  31.102584654743  30.229296859154 Bohr   0.0
[INPUT]  9 O      0.436800000000  17.108053000000  14.609560000000 AA    0.825432371210  32.329534694544  27.608067200401 Bohr   0.0
[INPUT] 10 O      1.479297000000  17.162683000000  17.755992000000 AA    2.795466186891  32.432770432729  33.553961949968 Bohr   0.0
[INPUT] 11 O      3.574079000000  17.921221000000  18.087093000000 AA    6.754030457559  33.866199507804  34.179652159538 Bohr   0.0
[INPUT] 12 O      3.086741000000  16.549131000000  16.376735000000 AA    5.833095107466  31.273325189550  30.947543964579 Bohr   0.0
[INPUT] 13 C      0.893280000000  13.851177000000  18.394684000000 AA    1.688054552551  26.174931032875  34.760914907919 Bohr   0.0
[INPUT] 14 C      1.209619000000  13.783938000000  14.098216000000 AA    2.285848625070  26.047867737985  26.641767084961 Bohr   0.0
[INPUT] 15 C     -0.820004000000  17.160582000000  14.960252000000 AA   -1.549582981048  32.428800118141  28.270779034477 Bohr   0.0
[INPUT] 16 C      2.757666000000  17.225719000000  17.422934000000 AA    5.211233483025  32.551891208717  32.924573546373 Bohr   0.0
[INPUT] 17 O     -1.665533000000  17.832969000000  14.307847000000 AA   -3.147401221425  33.699427397859  27.037912262180 Bohr   0.0

nuclear repulsion = 2660.00686642269
number of shells = 122
number of NR pGTOs = 525
number of NR cGTOs = 264
basis = {'default': '631g', 'Er': 'sarc-dkh'}
ecp = {}
CPU time:         0.92
N_elec (98, 95), N_ao 264
**** MO energy ****
MO #1   energy= -2122.67989396876  occ= 1
MO #2   energy= -2122.67981510467  occ= 1
MO #3   energy= -361.386847173717  occ= 1
MO #4   energy= -361.386209568939  occ= 1
MO #5   energy= -343.310162535589  occ= 1
MO #6   energy= -343.310131150887  occ= 1
MO #7   energy= -309.245897708364  occ= 1
MO #8   energy= -309.245037697091  occ= 1
MO #9   energy= -309.241989788496  occ= 1
MO #10  energy= -309.241694292973  occ= 1
MO #11  energy= -83.0816388037732  occ= 1
MO #12  energy= -83.0021154129135  occ= 1
MO #13  energy= -75.198401712      occ= 1
MO #14  energy= -75.1788062116671  occ= 1
MO #15  energy= -67.8560754497226  occ= 1
MO #16  energy= -67.814560401492   occ= 1
MO #17  energy= -67.7667675721025  occ= 1
MO #18  energy= -67.7169451092145  occ= 1
MO #19  energy= -54.8568977789401  occ= 1
MO #20  energy= -54.8469403504369  occ= 1
MO #21  energy= -54.835318511092   occ= 1
MO #22  energy= -54.8309199775227  occ= 1
MO #23  energy= -53.0402320530971  occ= 1
MO #24  energy= -53.0198125092757  occ= 1
MO #25  energy= -52.9974194759819  occ= 1
MO #26  energy= -52.9585171675538  occ= 1
MO #27  energy= -52.8852667112382  occ= 1
MO #28  energy= -52.8594434820694  occ= 1
MO #29  energy= -20.2088337702928  occ= 1
MO #30  energy= -20.2086917919864  occ= 1
MO #31  energy= -20.2052365836682  occ= 1
MO #32  energy= -20.2052263592905  occ= 1
MO #33  energy= -20.2006574897926  occ= 1
MO #34  energy= -20.2005305821739  occ= 1
MO #35  energy= -20.1965121139202  occ= 1
MO #36  energy= -20.1965041851301  occ= 1
MO #37  energy= -20.1960791124759  occ= 1
MO #38  energy= -20.1959062177592  occ= 1
MO #39  energy= -20.189649465046   occ= 1
MO #40  energy= -20.1894878850496  occ= 1
MO #41  energy= -20.1539569558752  occ= 1
MO #42  energy= -20.1537639426829  occ= 1
MO #43  energy= -20.1529113339974  occ= 1
MO #44  energy= -20.1527149712016  occ= 1
MO #45  energy= -20.1485833242005  occ= 1
MO #46  energy= -20.1483914762561  occ= 1
MO #47  energy= -20.1454330032282  occ= 1
MO #48  energy= -20.1452309802729  occ= 1
MO #49  energy= -20.1389608123529  occ= 1
MO #50  energy= -20.1389500211015  occ= 1
MO #51  energy= -20.132169593819   occ= 1
MO #52  energy= -20.132154801886   occ= 1
MO #53  energy= -17.4003446929581  occ= 1
MO #54  energy= -17.1983928614239  occ= 1
MO #55  energy= -14.1619106284794  occ= 1
MO #56  energy= -14.1010490206924  occ= 1
MO #57  energy= -12.5228053308974  occ= 1
MO #58  energy= -12.4415377403051  occ= 1
MO #59  energy= -12.3243862684055  occ= 1
MO #60  energy= -12.1975336851168  occ= 1
MO #61  energy= -11.073917910967   occ= 1
MO #62  energy= -11.0738971345328  occ= 1
MO #63  energy= -11.0666214054708  occ= 1
MO #64  energy= -11.0666071422428  occ= 1
MO #65  energy= -11.015880249776   occ= 1
MO #66  energy= -11.0158549606695  occ= 1
MO #67  energy= -11.0120081968282  occ= 1
MO #68  energy= -11.0119824257349  occ= 1
MO #69  energy= -7.28567992858608  occ= 1
MO #70  energy= -7.23710638810667  occ= 1
MO #71  energy= -7.22291341480857  occ= 1
MO #72  energy= -7.20270809843232  occ= 1
MO #73  energy= -6.94572368992021  occ= 1
MO #74  energy= -6.89993297794332  occ= 1
MO #75  energy= -6.83953513206376  occ= 1
MO #76  energy= -6.70729760875887  occ= 1
MO #77  energy= -6.47065786286495  occ= 1
MO #78  energy= -6.40424779319898  occ= 1
MO #79  energy= -2.10115590830649  occ= 1
MO #80  energy= -2.03011348285069  occ= 1
MO #81  energy= -1.13139015277996  occ= 1
MO #82  energy= -1.12404268728829  occ= 1
MO #83  energy= -1.11090213459134  occ= 1
MO #84  energy= -1.11064537451218  occ= 1
MO #85  energy= -1.09282130376879  occ= 1
MO #86  energy= -1.0835438199842   occ= 1
MO #87  energy= -1.05668196610629  occ= 1
MO #88  energy= -1.05588494484118  occ= 1
MO #89  energy= -1.04437521710342  occ= 1
MO #90  energy= -1.04026133475189  occ= 1
MO #91  energy= -0.970904571228859 occ= 1
MO #92  energy= -0.969730384524325 occ= 1
MO #93  energy= -0.963626267806806 occ= 1
MO #94  energy= -0.962158917504899 occ= 1
MO #95  energy= -0.948345068766148 occ= 1
MO #96  energy= -0.94731090330903  occ= 1
MO #97  energy= -0.944360358648642 occ= 1
MO #98  energy= -0.943905277517703 occ= 1
MO #99  energy= -0.916315657510616 occ= 1
MO #100 energy= -0.912641491087442 occ= 1
MO #101 energy= -0.908799646290378 occ= 1
MO #102 energy= -0.905279585386367 occ= 1
MO #103 energy= -0.896387641922633 occ= 1
MO #104 energy= -0.895723811266637 occ= 1
MO #105 energy= -0.891946686992227 occ= 1
MO #106 energy= -0.891111130630915 occ= 1
MO #107 energy= -0.850891112069373 occ= 1
MO #108 energy= -0.833852480560871 occ= 1
MO #109 energy= -0.811713602415827 occ= 1
MO #110 energy= -0.794207697338364 occ= 1
MO #111 energy= -0.464427785777317 occ= 1
MO #112 energy= -0.440258548201832 occ= 1
MO #113 energy= -0.418360772506612 occ= 1
MO #114 energy= -0.414274583599927 occ= 1
MO #115 energy= -0.405237385278074 occ= 1
MO #116 energy= -0.404650497014024 occ= 1
MO #117 energy= -0.391625449884103 occ= 1
MO #118 energy= -0.390896049762336 occ= 1
MO #119 energy= -0.389497251983979 occ= 1
MO #120 energy= -0.38243497819745  occ= 1
MO #121 energy= -0.381301800016124 occ= 1
MO #122 energy= -0.367433313020301 occ= 1
MO #123 energy= -0.337939061993941 occ= 1
MO #124 energy= -0.332844276436337 occ= 1
MO #125 energy= -0.332617611084789 occ= 1
MO #126 energy= -0.327512491273123 occ= 1
MO #127 energy= -0.327265247669476 occ= 1
MO #128 energy= -0.30806969745227  occ= 1
MO #129 energy= -0.307914664080561 occ= 1
MO #130 energy= -0.306902924666324 occ= 1
MO #131 energy= -0.305825954747651 occ= 1
MO #132 energy= -0.304027962598427 occ= 1
MO #133 energy= -0.302632804913862 occ= 1
MO #134 energy= -0.3002484042152   occ= 1
MO #135 energy= -0.298652451964629 occ= 1
MO #136 energy= -0.28809406937695  occ= 1
MO #137 energy= -0.287867631192247 occ= 1
MO #138 energy= -0.279862264887466 occ= 1
MO #139 energy= -0.278784952458174 occ= 1
MO #140 energy= -0.261241519602519 occ= 1
MO #141 energy= -0.257481221256157 occ= 1
MO #142 energy= -0.251497057879478 occ= 1
MO #143 energy= -0.251021511761526 occ= 1
MO #144 energy= -0.249352350772983 occ= 1
MO #145 energy= -0.244428269799743 occ= 1
MO #146 energy= -0.242517361878588 occ= 1
MO #147 energy= -0.240888437877459 occ= 1
MO #148 energy= -0.239930560034661 occ= 1
MO #149 energy= -0.238303763456001 occ= 1
MO #150 energy= -0.228398338887977 occ= 1
MO #151 energy= -0.227628453973864 occ= 1
MO #152 energy= -0.220798854354818 occ= 1
MO #153 energy= -0.220487413243435 occ= 1
MO #154 energy= -0.148997769319942 occ= 1
MO #155 energy= -0.148241650665753 occ= 1
MO #156 energy= -0.133476236866227 occ= 1
MO #157 energy= -0.133047664681458 occ= 1
MO #158 energy= -0.119514346238285 occ= 1
MO #159 energy= -0.11929783821066  occ= 1
MO #160 energy= -0.112292344781351 occ= 1
MO #161 energy= -0.112104616761621 occ= 1
MO #162 energy= -0.101219758301375 occ= 1
MO #163 energy= -0.101160543972523 occ= 1
MO #164 energy= -0.096744526756698 occ= 1
MO #165 energy= -0.096666359503963 occ= 1
MO #166 energy= -0.0900692200621658 occ= 1
MO #167 energy= -0.089774611960445 occ= 1
MO #168 energy= -0.083799732012216 occ= 1
MO #169 energy= -0.0836567752860503 occ= 1
MO #170 energy= -0.082817083234361 occ= 1
MO #171 energy= -0.0824799289455857 occ= 1
MO #172 energy= -0.0791928320110338 occ= 1
MO #173 energy= -0.0788657379826025 occ= 1
MO #174 energy= -0.0743881564073641 occ= 1
MO #175 energy= -0.0740353664244238 occ= 1
MO #176 energy= -0.0716855230282379 occ= 1
MO #177 energy= -0.0715892499930194 occ= 1
MO #178 energy= -0.0588077473725888 occ= 1
MO #179 energy= -0.0583397289514052 occ= 1
MO #180 energy= -0.0545413344630247 occ= 1
MO #181 energy= -0.0544303141344021 occ= 1
MO #182 energy= -0.043391921928335 occ= 1
MO #183 energy= -0.0430822242100857 occ= 1
MO #184 energy= -0.0422979888267254 occ= 1
MO #185 energy= -0.041859871700949 occ= 1
MO #186 energy= -0.0300663835662292 occ= 1
MO #187 energy= -0.0299802295604427 occ= 1
MO #188 energy= -0.0216532740687148 occ= 1
MO #189 energy= -0.0214808972292305 occ= 1
MO #190 energy= -0.0184429145961444 occ= 1
MO #191 energy= -0.018232738196987 occ= 1
MO #192 energy= -0.0151281686796828 occ= 1
MO #193 energy= -0.0146558768441136 occ= 1
MO #194 energy= 0.259517230282942  occ= 0
MO #195 energy= 0.259519700962072  occ= 0
MO #196 energy= 0.272816884183841  occ= 0
MO #197 energy= 0.272818322972458  occ= 0
MO #198 energy= 0.290411378144409  occ= 0
MO #199 energy= 0.290421130211437  occ= 0
MO #200 energy= 0.294511714761035  occ= 0
MO #201 energy= 0.294514258851669  occ= 0
MO #202 energy= 0.306640751713807  occ= 0
MO #203 energy= 0.30664959929396   occ= 0
MO #204 energy= 0.309733798904255  occ= 0
MO #205 energy= 0.309738365466223  occ= 0
MO #206 energy= 0.329429124328324  occ= 0
MO #207 energy= 0.329433212560449  occ= 0
MO #208 energy= 0.3717506683158    occ= 0
MO #209 energy= 0.371759308260369  occ= 0
MO #210 energy= 0.381493588769488  occ= 0
MO #211 energy= 0.381507799283014  occ= 0
MO #212 energy= 0.55286024291209   occ= 0
MO #213 energy= 0.553217838120281  occ= 0
MO #214 energy= 0.556857481374631  occ= 0
MO #215 energy= 0.557019638783193  occ= 0
MO #216 energy= 0.574549524028841  occ= 0
MO #217 energy= 0.574711104026987  occ= 0
MO #218 energy= 0.581550668469777  occ= 0
MO #219 energy= 0.582138965250272  occ= 0
MO #220 energy= 0.585533794882265  occ= 0
MO #221 energy= 0.58601712054076   occ= 0
MO #222 energy= 0.592398425431877  occ= 0
MO #223 energy= 0.592875841664921  occ= 0
MO #224 energy= 0.606650219642496  occ= 0
MO #225 energy= 0.606733503306552  occ= 0
MO #226 energy= 0.617728325563082  occ= 0
MO #227 energy= 0.621976427811275  occ= 0
MO #228 energy= 0.635026445588044  occ= 0
MO #229 energy= 0.635995423820924  occ= 0
MO #230 energy= 0.640322462712151  occ= 0
MO #231 energy= 0.6417665976175    occ= 0
MO #232 energy= 0.651636943358653  occ= 0
MO #233 energy= 0.651778342164188  occ= 0
MO #234 energy= 0.655587998259178  occ= 0
MO #235 energy= 0.65609601459915   occ= 0
MO #236 energy= 0.660986358365895  occ= 0
MO #237 energy= 0.66383068013293   occ= 0
MO #238 energy= 0.665502618506644  occ= 0
MO #239 energy= 0.668364841616061  occ= 0
MO #240 energy= 0.689897446900298  occ= 0
MO #241 energy= 0.695843291752527  occ= 0
MO #242 energy= 0.702056451873118  occ= 0
MO #243 energy= 0.709943521023438  occ= 0
MO #244 energy= 0.717775765351586  occ= 0
MO #245 energy= 0.733052955557843  occ= 0
MO #246 energy= 0.762384558194901  occ= 0
MO #247 energy= 0.778681678752585  occ= 0
MO #248 energy= 0.859979895943816  occ= 0
MO #249 energy= 0.860559975948357  occ= 0
MO #250 energy= 0.86587095696355   occ= 0
MO #251 energy= 0.867823243620767  occ= 0
MO #252 energy= 0.876047714670963  occ= 0
MO #253 energy= 0.876828541222947  occ= 0
MO #254 energy= 0.89194507844552   occ= 0
MO #255 energy= 0.905810290078618  occ= 0
MO #256 energy= 0.9105042910154    occ= 0
MO #257 energy= 0.91811266330026   occ= 0
MO #258 energy= 0.926673691181045  occ= 0
MO #259 energy= 0.929159554776     occ= 0
MO #260 energy= 0.936037861434257  occ= 0
MO #261 energy= 0.93858274911345   occ= 0
MO #262 energy= 0.9434104715252    occ= 0
MO #263 energy= 0.94866915476904   occ= 0
MO #264 energy= 0.952905529625576  occ= 0
MO #265 energy= 0.958198528189355  occ= 0
MO #266 energy= 0.965764697485727  occ= 0
MO #267 energy= 0.972777988128138  occ= 0
MO #268 energy= 0.978407480531211  occ= 0
MO #269 energy= 0.987747547911258  occ= 0
MO #270 energy= 0.991688519898268  occ= 0
MO #271 energy= 0.994058874619882  occ= 0
MO #272 energy= 0.997831897280346  occ= 0
MO #273 energy= 1.00379103473959   occ= 0
MO #274 energy= 1.00636826988573   occ= 0
MO #275 energy= 1.03176375342442   occ= 0
MO #276 energy= 1.03376678487652   occ= 0
MO #277 energy= 1.04265514354101   occ= 0
MO #278 energy= 1.04522524866193   occ= 0
MO #279 energy= 1.04786178000105   occ= 0
MO #280 energy= 1.04906309172658   occ= 0
MO #281 energy= 1.07903824431996   occ= 0
MO #282 energy= 1.08130539781923   occ= 0
MO #283 energy= 1.08630870323156   occ= 0
MO #284 energy= 1.0900007922433    occ= 0
MO #285 energy= 1.09075458209114   occ= 0
MO #286 energy= 1.09348497397987   occ= 0
MO #287 energy= 1.09706118927137   occ= 0
MO #288 energy= 1.11465749910052   occ= 0
MO #289 energy= 1.1156634923596    occ= 0
MO #290 energy= 1.12840659797817   occ= 0
MO #291 energy= 1.15753799017607   occ= 0
MO #292 energy= 1.16326827532442   occ= 0
MO #293 energy= 1.1715887796637    occ= 0
MO #294 energy= 1.17548479368704   occ= 0
MO #295 energy= 1.19562356144066   occ= 0
MO #296 energy= 1.19775539812232   occ= 0
MO #297 energy= 1.21017131612148   occ= 0
MO #298 energy= 1.21285352200079   occ= 0
MO #299 energy= 1.21993912447889   occ= 0
MO #300 energy= 1.22279816308596   occ= 0
MO #301 energy= 1.23035579254224   occ= 0
MO #302 energy= 1.23459468968819   occ= 0
MO #303 energy= 1.25255148691667   occ= 0
MO #304 energy= 1.25934453456069   occ= 0
MO #305 energy= 1.26346687735466   occ= 0
MO #306 energy= 1.26753002186917   occ= 0
MO #307 energy= 1.27517386799851   occ= 0
MO #308 energy= 1.27745779845538   occ= 0
MO #309 energy= 1.28763445701273   occ= 0
MO #310 energy= 1.29358244576916   occ= 0
MO #311 energy= 1.29726940252861   occ= 0
MO #312 energy= 1.3001119093485    occ= 0
MO #313 energy= 1.30772079979621   occ= 0
MO #314 energy= 1.31094907000702   occ= 0
MO #315 energy= 1.32975843713964   occ= 0
MO #316 energy= 1.33176486935425   occ= 0
MO #317 energy= 1.34576992820114   occ= 0
MO #318 energy= 1.34615003450437   occ= 0
MO #319 energy= 1.37598787334604   occ= 0
MO #320 energy= 1.38454208494182   occ= 0
MO #321 energy= 1.39663392941765   occ= 0
MO #322 energy= 1.40547010461964   occ= 0
MO #323 energy= 1.45409199533862   occ= 0
MO #324 energy= 1.4610891950157    occ= 0
MO #325 energy= 1.47408960648555   occ= 0
MO #326 energy= 1.48119569442163   occ= 0
MO #327 energy= 1.49136333719208   occ= 0
MO #328 energy= 1.50058265207692   occ= 0
MO #329 energy= 1.52449710350804   occ= 0
MO #330 energy= 1.52755023182865   occ= 0
MO #331 energy= 1.5609200544516    occ= 0
MO #332 energy= 1.56182458865836   occ= 0
MO #333 energy= 1.57766514395867   occ= 0
MO #334 energy= 1.57883530683643   occ= 0
MO #335 energy= 1.5826771626595    occ= 0
MO #336 energy= 1.58397067545011   occ= 0
MO #337 energy= 1.5988198511929    occ= 0
MO #338 energy= 1.60009915032941   occ= 0
MO #339 energy= 1.62444925719256   occ= 0
MO #340 energy= 1.62551884322569   occ= 0
MO #341 energy= 1.62948882710954   occ= 0
MO #342 energy= 1.63530932082794   occ= 0
MO #343 energy= 1.6451672680491    occ= 0
MO #344 energy= 1.64698398420383   occ= 0
MO #345 energy= 1.66306762209853   occ= 0
MO #346 energy= 1.66510149632416   occ= 0
MO #347 energy= 1.66899750818225   occ= 0
MO #348 energy= 1.66954302475186   occ= 0
MO #349 energy= 1.67502487444941   occ= 0
MO #350 energy= 1.67587111133549   occ= 0
MO #351 energy= 1.68220828919593   occ= 0
MO #352 energy= 1.68281285066849   occ= 0
MO #353 energy= 1.69194438040701   occ= 0
MO #354 energy= 1.6925831153774    occ= 0
MO #355 energy= 1.69513920218315   occ= 0
MO #356 energy= 1.69719527970269   occ= 0
MO #357 energy= 1.70102882886468   occ= 0
MO #358 energy= 1.70253216520061   occ= 0
MO #359 energy= 1.70749119306666   occ= 0
MO #360 energy= 1.70924569301497   occ= 0
MO #361 energy= 1.71196763395548   occ= 0
MO #362 energy= 1.71401152865809   occ= 0
MO #363 energy= 1.7255227732676    occ= 0
MO #364 energy= 1.72687361383008   occ= 0
MO #365 energy= 1.73934859959902   occ= 0
MO #366 energy= 1.74108212142747   occ= 0
MO #367 energy= 1.75770613272001   occ= 0
MO #368 energy= 1.75998377327031   occ= 0
MO #369 energy= 1.76485668662233   occ= 0
MO #370 energy= 1.76662147456267   occ= 0
MO #371 energy= 1.77440176962226   occ= 0
MO #372 energy= 1.77653749385074   occ= 0
MO #373 energy= 1.78130335431671   occ= 0
MO #374 energy= 1.78143396855961   occ= 0
MO #375 energy= 1.79062773669524   occ= 0
MO #376 energy= 1.79077638931885   occ= 0
MO #377 energy= 1.80468108352754   occ= 0
MO #378 energy= 1.80479288613725   occ= 0
MO #379 energy= 1.8314716555027    occ= 0
MO #380 energy= 1.83523542250564   occ= 0
MO #381 energy= 1.84828151054639   occ= 0
MO #382 energy= 1.85141533762997   occ= 0
MO #383 energy= 1.85764950244823   occ= 0
MO #384 energy= 1.86317417865763   occ= 0
MO #385 energy= 1.86821299490864   occ= 0
MO #386 energy= 1.87036901733254   occ= 0
MO #387 energy= 1.87613320082004   occ= 0
MO #388 energy= 1.87715014680264   occ= 0
MO #389 energy= 1.88540213259752   occ= 0
MO #390 energy= 1.8890056965966    occ= 0
MO #391 energy= 1.93015882506864   occ= 0
MO #392 energy= 1.93083399774264   occ= 0
MO #393 energy= 1.9332276213463    occ= 0
MO #394 energy= 1.9394727772164    occ= 0
MO #395 energy= 1.98858947360453   occ= 0
MO #396 energy= 1.99002915564916   occ= 0
MO #397 energy= 2.01446242943197   occ= 0
MO #398 energy= 2.0164291469572    occ= 0
MO #399 energy= 2.04086483916873   occ= 0
MO #400 energy= 2.04394743270356   occ= 0
MO #401 energy= 2.05882963152796   occ= 0
MO #402 energy= 2.06887635643527   occ= 0
MO #403 energy= 2.08655619771509   occ= 0
MO #404 energy= 2.09149606511651   occ= 0
MO #405 energy= 2.10114504862878   occ= 0
MO #406 energy= 2.11021951980529   occ= 0
MO #407 energy= 2.12888430723971   occ= 0
MO #408 energy= 2.13824651166968   occ= 0
MO #409 energy= 2.14135257873678   occ= 0
MO #410 energy= 2.14456562231765   occ= 0
MO #411 energy= 2.15743410002344   occ= 0
MO #412 energy= 2.16757157293473   occ= 0
MO #413 energy= 2.18829891696193   occ= 0
MO #414 energy= 2.20636797821106   occ= 0
MO #415 energy= 2.21311451993696   occ= 0
MO #416 energy= 2.21880201974661   occ= 0
MO #417 energy= 2.230593998188     occ= 0
MO #418 energy= 2.26219285517284   occ= 0
MO #419 energy= 2.29594883633565   occ= 0
MO #420 energy= 2.30594102258762   occ= 0
MO #421 energy= 2.31138624260322   occ= 0
MO #422 energy= 2.32982220744892   occ= 0
MO #423 energy= 2.33430195762842   occ= 0
MO #424 energy= 2.35132397936784   occ= 0
MO #425 energy= 2.36098824193864   occ= 0
MO #426 energy= 2.39260921104398   occ= 0
MO #427 energy= 2.43158812745773   occ= 0
MO #428 energy= 2.43903764881584   occ= 0
MO #429 energy= 2.44544697513579   occ= 0
MO #430 energy= 2.46409153595975   occ= 0
MO #431 energy= 2.53102058050432   occ= 0
MO #432 energy= 2.55210774217961   occ= 0
MO #433 energy= 2.62834104857815   occ= 0
MO #434 energy= 2.63679530907486   occ= 0
MO #435 energy= 2.66394012247079   occ= 0
MO #436 energy= 2.66781770590806   occ= 0
MO #437 energy= 2.69297746008184   occ= 0
MO #438 energy= 2.69750485623496   occ= 0
MO #439 energy= 2.70790383922768   occ= 0
MO #440 energy= 2.71321234164611   occ= 0
MO #441 energy= 2.72942743657103   occ= 0
MO #442 energy= 2.73190631773163   occ= 0
MO #443 energy= 2.75334841756353   occ= 0
MO #444 energy= 2.75713926040951   occ= 0
MO #445 energy= 2.77414161315396   occ= 0
MO #446 energy= 2.77710472423028   occ= 0
MO #447 energy= 2.81802857441484   occ= 0
MO #448 energy= 2.8196402487241    occ= 0
MO #449 energy= 2.87267702736392   occ= 0
MO #450 energy= 2.87365301893486   occ= 0
MO #451 energy= 2.94030811206198   occ= 0
MO #452 energy= 2.94546665879079   occ= 0
MO #453 energy= 2.97326429338869   occ= 0
MO #454 energy= 2.97364879884128   occ= 0
MO #455 energy= 3.01954769297196   occ= 0
MO #456 energy= 3.02002906431504   occ= 0
MO #457 energy= 3.32913190353326   occ= 0
MO #458 energy= 3.36267488901579   occ= 0
MO #459 energy= 3.39325464454124   occ= 0
MO #460 energy= 3.40618204251516   occ= 0
MO #461 energy= 3.45405500314305   occ= 0
MO #462 energy= 3.47063536513063   occ= 0
MO #463 energy= 3.49465325659491   occ= 0
MO #464 energy= 3.52083995918689   occ= 0
MO #465 energy= 3.80905202201811   occ= 0
MO #466 energy= 3.84321340412826   occ= 0
MO #467 energy= 5.17881834346348   occ= 0
MO #468 energy= 5.21256450005119   occ= 0
MO #469 energy= 6.48698266519755   occ= 0
MO #470 energy= 6.50990319877353   occ= 0
MO #471 energy= 7.0457495556365    occ= 0
MO #472 energy= 7.0856096639556    occ= 0
MO #473 energy= 7.15274761353366   occ= 0
MO #474 energy= 7.17185825615421   occ= 0
MO #475 energy= 12.7311573703088   occ= 0
MO #476 energy= 12.7545131744395   occ= 0
MO #477 energy= 12.7772395010312   occ= 0
MO #478 energy= 12.8104764232757   occ= 0
MO #479 energy= 13.085272988815    occ= 0
MO #480 energy= 13.0977133051072   occ= 0
MO #481 energy= 13.1644613234523   occ= 0
MO #482 energy= 13.1872505345387   occ= 0
MO #483 energy= 13.2828232399144   occ= 0
MO #484 energy= 13.347764580251    occ= 0
MO #485 energy= 18.0960154289802   occ= 0
MO #486 energy= 18.1549024948443   occ= 0
MO #487 energy= 29.6663202639862   occ= 0
MO #488 energy= 29.6920223199368   occ= 0
MO #489 energy= 33.1945856977043   occ= 0
MO #490 energy= 33.2488041499671   occ= 0
MO #491 energy= 33.3049127868173   occ= 0
MO #492 energy= 33.3246559443908   occ= 0
MO #493 energy= 65.2876754311744   occ= 0
MO #494 energy= 65.3039963361557   occ= 0
MO #495 energy= 65.3439392000764   occ= 0
MO #496 energy= 65.3526006140979   occ= 0
MO #497 energy= 67.7952400366203   occ= 0
MO #498 energy= 67.8053896203738   occ= 0
MO #499 energy= 67.8455511114611   occ= 0
MO #500 energy= 67.8559093300028   occ= 0
MO #501 energy= 67.8978283138675   occ= 0
MO #502 energy= 67.9242077793536   occ= 0
MO #503 energy= 75.5544696096086   occ= 0
MO #504 energy= 75.5998794564863   occ= 0
MO #505 energy= 158.595796691634   occ= 0
MO #506 energy= 158.605859575065   occ= 0
MO #507 energy= 174.889978377064   occ= 0
MO #508 energy= 174.910331222512   occ= 0
MO #509 energy= 174.95711588314    occ= 0
MO #510 energy= 174.964412246213   occ= 0
MO #511 energy= 308.448536907707   occ= 0
MO #512 energy= 308.462567264158   occ= 0
MO #513 energy= 725.229534654334   occ= 0
MO #514 energy= 725.231188202274   occ= 0
MO #515 energy= 846.744582708103   occ= 0
MO #516 energy= 846.747195042181   occ= 0
MO #517 energy= 846.783880455986   occ= 0
MO #518 energy= 846.784954429352   occ= 0
MO #519 energy= 1057.13901449404   occ= 0
MO #520 energy= 1057.14183519844   occ= 0
MO #521 energy= 2996.82669080763   occ= 0
MO #522 energy= 2996.82731834642   occ= 0
MO #523 energy= 7255.3389411728    occ= 0
MO #524 energy= 7255.33912469238   occ= 0
MO #525 energy= 15388.0039505396   occ= 0
MO #526 energy= 15388.004013187    occ= 0
MO #527 energy= 35974.1096082755   occ= 0
MO #528 energy= 35974.1096270581   occ= 0
 ** Mulliken pop alpha/beta on meta-lowdin orthogonal AOs **
 ** Mulliken pop       alpha | beta **
pop of  0 Er 1s        0.99999 | 0.99999   
pop of  0 Er 2s        1.00000 | 1.00000   
pop of  0 Er 3s        1.00000 | 1.00000   
pop of  0 Er 4s        0.99999 | 0.99999   
pop of  0 Er 5s        0.99895 | 0.99844   
pop of  0 Er 6s        0.16348 | 0.16508   
pop of  0 Er 7s        0.00862 | 0.00915   
pop of  0 Er 8s        0.00149 | 0.00159   
pop of  0 Er 9s        0.00066 | 0.00066   
pop of  0 Er 10s        0.00018 | 0.00019   
pop of  0 Er 11s        0.00037 | 0.00037   
pop of  0 Er 12s        0.00009 | 0.00009   
pop of  0 Er 13s        0.00001 | 0.00001   
pop of  0 Er 14s        0.00000 | 0.00000   
pop of  0 Er 15s        0.00000 | 0.00000   
pop of  0 Er 16s        0.00000 | 0.00000   
pop of  0 Er 17s        0.00000 | 0.00000   
pop of  0 Er 18s        0.00000 | 0.00000   
pop of  0 Er 2px       0.99884 | 0.99884   
pop of  0 Er 2py       0.99884 | 0.99884   
pop of  0 Er 2pz       0.99884 | 0.99884   
pop of  0 Er 3px       0.99858 | 0.99858   
pop of  0 Er 3py       0.99858 | 0.99858   
pop of  0 Er 3pz       0.99858 | 0.99858   
pop of  0 Er 4px       0.99814 | 0.99816   
pop of  0 Er 4py       0.99814 | 0.99815   
pop of  0 Er 4pz       0.99814 | 0.99815   
pop of  0 Er 5px       0.99570 | 0.99496   
pop of  0 Er 5py       0.99611 | 0.99545   
pop of  0 Er 5pz       0.99604 | 0.99548   
pop of  0 Er 6px       0.00904 | 0.00950   
pop of  0 Er 6py       0.00760 | 0.00803   
pop of  0 Er 6pz       0.00783 | 0.00816   
pop of  0 Er 7px       0.00741 | 0.00788   
pop of  0 Er 7py       0.00447 | 0.00487   
pop of  0 Er 7pz       0.00660 | 0.00699   
pop of  0 Er 8px       0.00559 | 0.00559   
pop of  0 Er 8py       0.00407 | 0.00406   
pop of  0 Er 8pz       0.00683 | 0.00682   
pop of  0 Er 9px       0.00128 | 0.00130   
pop of  0 Er 9py       0.00143 | 0.00144   
pop of  0 Er 9pz       0.00176 | 0.00177   
pop of  0 Er 10px       0.00051 | 0.00052   
pop of  0 Er 10py       0.00059 | 0.00060   
pop of  0 Er 10pz       0.00068 | 0.00069   
pop of  0 Er 11px       0.00086 | 0.00086   
pop of  0 Er 11py       0.00082 | 0.00082   
pop of  0 Er 11pz       0.00088 | 0.00089   
pop of  0 Er 12px       0.00073 | 0.00073   
pop of  0 Er 12py       0.00067 | 0.00067   
pop of  0 Er 12pz       0.00071 | 0.00071   
pop of  0 Er 13px       0.00171 | 0.00171   
pop of  0 Er 13py       0.00171 | 0.00171   
pop of  0 Er 13pz       0.00171 | 0.00171   
pop of  0 Er 3dxy      0.99990 | 0.99990   
pop of  0 Er 3dyz      0.99990 | 0.99990   
pop of  0 Er 3dz^2     0.99990 | 0.99990   
pop of  0 Er 3dxz      0.99990 | 0.99990   
pop of  0 Er 3dx2-y2    0.99990 | 0.99990   
pop of  0 Er 4dxy      0.99971 | 0.99970   
pop of  0 Er 4dyz      0.99971 | 0.99971   
pop of  0 Er 4dz^2     0.99971 | 0.99971   
pop of  0 Er 4dxz      0.99971 | 0.99971   
pop of  0 Er 4dx2-y2    0.99972 | 0.99970   
pop of  0 Er 5dxy      0.01616 | 0.01718   
pop of  0 Er 5dyz      0.01767 | 0.01852   
pop of  0 Er 5dz^2     0.01457 | 0.01515   
pop of  0 Er 5dxz      0.01331 | 0.01400   
pop of  0 Er 5dx2-y2    0.01386 | 0.01469   
pop of  0 Er 6dxy      0.00302 | 0.00313   
pop of  0 Er 6dyz      0.00314 | 0.00330   
pop of  0 Er 6dz^2     0.00250 | 0.00252   
pop of  0 Er 6dxz      0.00255 | 0.00263   
pop of  0 Er 6dx2-y2    0.00224 | 0.00230   
pop of  0 Er 7dxy      0.00246 | 0.00249   
pop of  0 Er 7dyz      0.00266 | 0.00268   
pop of  0 Er 7dz^2     0.00174 | 0.00175   
pop of  0 Er 7dxz      0.00191 | 0.00193   
pop of  0 Er 7dx2-y2    0.00163 | 0.00165   
pop of  0 Er 8dxy      0.00304 | 0.00306   
pop of  0 Er 8dyz      0.00290 | 0.00290   
pop of  0 Er 8dz^2     0.00280 | 0.00281   
pop of  0 Er 8dxz      0.00275 | 0.00276   
pop of  0 Er 8dx2-y2    0.00193 | 0.00195   
pop of  0 Er 9dxy      0.00302 | 0.00302   
pop of  0 Er 9dyz      0.00365 | 0.00364   
pop of  0 Er 9dz^2     0.00353 | 0.00353   
pop of  0 Er 9dxz      0.00369 | 0.00369   
pop of  0 Er 9dx2-y2    0.00223 | 0.00224   
pop of  0 Er 10dxy      0.00021 | 0.00022   
pop of  0 Er 10dyz      0.00026 | 0.00027   
pop of  0 Er 10dz^2     0.00024 | 0.00024   
pop of  0 Er 10dxz      0.00024 | 0.00024   
pop of  0 Er 10dx2-y2    0.00020 | 0.00021   
pop of  0 Er 11dxy      0.00112 | 0.00113   
pop of  0 Er 11dyz      0.00188 | 0.00189   
pop of  0 Er 11dz^2     0.00146 | 0.00146   
pop of  0 Er 11dxz      0.00153 | 0.00153   
pop of  0 Er 11dx2-y2    0.00099 | 0.00099   
pop of  0 Er 4f-3      0.60443 | 0.94935   
pop of  0 Er 4f-2      0.58037 | 0.90482   
pop of  0 Er 4f-1      0.72019 | 0.93973   
pop of  0 Er 4f+0      0.67091 | 0.88100   
pop of  0 Er 4f+1      0.61935 | 0.86490   
pop of  0 Er 4f+2      0.80482 | 0.95341   
pop of  0 Er 4f+3      0.55222 | 0.94630   
pop of  0 Er 5f-3      0.00089 | 0.00143   
pop of  0 Er 5f-2      0.00103 | 0.00160   
pop of  0 Er 5f-1      0.00073 | 0.00125   
pop of  0 Er 5f+0      0.00066 | 0.00119   
pop of  0 Er 5f+1      0.00097 | 0.00153   
pop of  0 Er 5f+2      0.00077 | 0.00126   
pop of  0 Er 5f+3      0.00079 | 0.00135   
pop of  0 Er 6f-3      0.00136 | 0.00148   
pop of  0 Er 6f-2      0.00154 | 0.00163   
pop of  0 Er 6f-1      0.00178 | 0.00188   
pop of  0 Er 6f+0      0.00186 | 0.00199   
pop of  0 Er 6f+1      0.00158 | 0.00171   
pop of  0 Er 6f+2      0.00160 | 0.00171   
pop of  0 Er 6f+3      0.00164 | 0.00178   
pop of  1 O 1s        0.99999 | 0.99999   
pop of  1 O 2s        0.86239 | 0.86233   
pop of  1 O 3s        0.00506 | 0.00510   
pop of  1 O 2px       0.78705 | 0.78702   
pop of  1 O 2py       0.89063 | 0.89051   
pop of  1 O 2pz       0.86882 | 0.86856   
pop of  1 O 3px       0.00273 | 0.00275   
pop of  1 O 3py       0.00418 | 0.00423   
pop of  1 O 3pz       0.00426 | 0.00433   
pop of  2 O 1s        0.99999 | 0.99999   
pop of  2 O 2s        0.86100 | 0.86100   
pop of  2 O 3s        0.00610 | 0.00610   
pop of  2 O 2px       0.95209 | 0.95205   
pop of  2 O 2py       0.82760 | 0.82758   
pop of  2 O 2pz       0.75520 | 0.75519   
pop of  2 O 3px       0.00541 | 0.00541   
pop of  2 O 3py       0.00309 | 0.00309   
pop of  2 O 3pz       0.00185 | 0.00185   
pop of  3 O 1s        0.99999 | 0.99999   
pop of  3 O 2s        0.86847 | 0.86839   
pop of  3 O 3s        0.00481 | 0.00486   
pop of  3 O 2px       0.78779 | 0.78771   
pop of  3 O 2py       0.85502 | 0.85480   
pop of  3 O 2pz       0.88493 | 0.88459   
pop of  3 O 3px       0.00252 | 0.00255   
pop of  3 O 3py       0.00376 | 0.00382   
pop of  3 O 3pz       0.00402 | 0.00410   
pop of  4 O 1s        0.99999 | 0.99999   
pop of  4 O 2s        0.86513 | 0.86510   
pop of  4 O 3s        0.00501 | 0.00505   
pop of  4 O 2px       0.77930 | 0.77928   
pop of  4 O 2py       0.90953 | 0.90938   
pop of  4 O 2pz       0.86768 | 0.86747   
pop of  4 O 3px       0.00269 | 0.00271   
pop of  4 O 3py       0.00463 | 0.00469   
pop of  4 O 3pz       0.00437 | 0.00443   
pop of  5 O 1s        0.99999 | 0.99999   
pop of  5 O 2s        0.85926 | 0.85926   
pop of  5 O 3s        0.00623 | 0.00623   
pop of  5 O 2px       0.94813 | 0.94809   
pop of  5 O 2py       0.81791 | 0.81790   
pop of  5 O 2pz       0.77334 | 0.77333   
pop of  5 O 3px       0.00534 | 0.00534   
pop of  5 O 3py       0.00278 | 0.00279   
pop of  5 O 3pz       0.00235 | 0.00235   
pop of  6 O 1s        0.99999 | 0.99999   
pop of  6 O 2s        0.85926 | 0.85920   
pop of  6 O 3s        0.00509 | 0.00514   
pop of  6 O 2px       0.80969 | 0.80961   
pop of  6 O 2py       0.82964 | 0.82945   
pop of  6 O 2pz       0.88156 | 0.88127   
pop of  6 O 3px       0.00267 | 0.00270   
pop of  6 O 3py       0.00317 | 0.00321   
pop of  6 O 3pz       0.00399 | 0.00407   
pop of  7 O 1s        0.99999 | 0.99999   
pop of  7 O 2s        0.86122 | 0.86113   
pop of  7 O 3s        0.00519 | 0.00524   
pop of  7 O 2px       0.93770 | 0.93717   
pop of  7 O 2py       0.83303 | 0.83282   
pop of  7 O 2pz       0.77290 | 0.77280   
pop of  7 O 3px       0.00532 | 0.00545   
pop of  7 O 3py       0.00346 | 0.00350   
pop of  7 O 3pz       0.00191 | 0.00192   
pop of  8 O 1s        0.99999 | 0.99999   
pop of  8 O 2s        0.86486 | 0.86477   
pop of  8 O 3s        0.00506 | 0.00511   
pop of  8 O 2px       0.72505 | 0.72487   
pop of  8 O 2py       0.91112 | 0.91079   
pop of  8 O 2pz       0.91799 | 0.91774   
pop of  8 O 3px       0.00126 | 0.00128   
pop of  8 O 3py       0.00486 | 0.00495   
pop of  8 O 3pz       0.00555 | 0.00564   
pop of  9 O 1s        0.99999 | 0.99999   
pop of  9 O 2s        0.86979 | 0.86966   
pop of  9 O 3s        0.00494 | 0.00498   
pop of  9 O 2px       0.71916 | 0.71893   
pop of  9 O 2py       0.91372 | 0.91340   
pop of  9 O 2pz       0.92324 | 0.92298   
pop of  9 O 3px       0.00119 | 0.00120   
pop of  9 O 3py       0.00497 | 0.00505   
pop of  9 O 3pz       0.00588 | 0.00595   
pop of  10 O 1s        0.99999 | 0.99999   
pop of  10 O 2s        0.85878 | 0.85877   
pop of  10 O 3s        0.00605 | 0.00605   
pop of  10 O 2px       0.85089 | 0.85084   
pop of  10 O 2py       0.80737 | 0.80737   
pop of  10 O 2pz       0.84975 | 0.84973   
pop of  10 O 3px       0.00277 | 0.00277   
pop of  10 O 3py       0.00257 | 0.00258   
pop of  10 O 3pz       0.00354 | 0.00354   
pop of  11 O 1s        0.99999 | 0.99999   
pop of  11 O 2s        0.86121 | 0.86113   
pop of  11 O 3s        0.00519 | 0.00524   
pop of  11 O 2px       0.93630 | 0.93582   
pop of  11 O 2py       0.83450 | 0.83426   
pop of  11 O 2pz       0.76566 | 0.76557   
pop of  11 O 3px       0.00512 | 0.00523   
pop of  11 O 3py       0.00343 | 0.00348   
pop of  11 O 3pz       0.00185 | 0.00186   
pop of  12 C 1s        0.99999 | 0.99999   
pop of  12 C 2s        0.41716 | 0.41724   
pop of  12 C 3s        0.00983 | 0.00984   
pop of  12 C 2px       0.41415 | 0.41417   
pop of  12 C 2py       0.37705 | 0.37715   
pop of  12 C 2pz       0.41058 | 0.41068   
pop of  12 C 3px       0.01875 | 0.01876   
pop of  12 C 3py       0.00443 | 0.00446   
pop of  12 C 3pz       0.01304 | 0.01310   
pop of  13 C 1s        0.99999 | 0.99999   
pop of  13 C 2s        0.41296 | 0.41302   
pop of  13 C 3s        0.01007 | 0.01008   
pop of  13 C 2px       0.41175 | 0.41178   
pop of  13 C 2py       0.38606 | 0.38615   
pop of  13 C 2pz       0.40551 | 0.40559   
pop of  13 C 3px       0.01819 | 0.01820   
pop of  13 C 3py       0.00703 | 0.00706   
pop of  13 C 3pz       0.01115 | 0.01119   
pop of  14 C 1s        0.99999 | 0.99999   
pop of  14 C 2s        0.41344 | 0.41354   
pop of  14 C 3s        0.01007 | 0.01008   
pop of  14 C 2px       0.41403 | 0.41410   
pop of  14 C 2py       0.38827 | 0.38840   
pop of  14 C 2pz       0.40138 | 0.40146   
pop of  14 C 3px       0.01700 | 0.01704   
pop of  14 C 3py       0.00663 | 0.00666   
pop of  14 C 3pz       0.01272 | 0.01275   
pop of  15 C 1s        0.99999 | 0.99999   
pop of  15 C 2s        0.41548 | 0.41557   
pop of  15 C 3s        0.01005 | 0.01006   
pop of  15 C 2px       0.41249 | 0.41257   
pop of  15 C 2py       0.38714 | 0.38727   
pop of  15 C 2pz       0.40128 | 0.40137   
pop of  15 C 3px       0.01654 | 0.01658   
pop of  15 C 3py       0.00662 | 0.00664   
pop of  15 C 3pz       0.01278 | 0.01281   
pop of  16 O 1s        0.99999 | 0.99999   
pop of  16 O 2s        0.85986 | 0.85985   
pop of  16 O 3s        0.00602 | 0.00602   
pop of  16 O 2px       0.84264 | 0.84259   
pop of  16 O 2py       0.81140 | 0.81136   
pop of  16 O 2pz       0.84945 | 0.84940   
pop of  16 O 3px       0.00264 | 0.00264   
pop of  16 O 3py       0.00266 | 0.00266   
pop of  16 O 3pz       0.00352 | 0.00353   
In total            95.55202 | 97.44798  
 ** Mulliken atomic charges   ( Nelec_alpha | Nelec_beta ) **
charge of  0Er =      2.24438  (    31.92848     33.82714 )
charge of  1O =     -0.84994  (     4.42511      4.42483 )
charge of  2O =     -0.82461  (     4.41234      4.41227 )
charge of  3O =     -0.82211  (     4.41130      4.41081 )
charge of  4O =     -0.87642  (     4.43833      4.43809 )
charge of  5O =     -0.83064  (     4.41535      4.41529 )
charge of  6O =     -0.78969  (     4.39505      4.39464 )
charge of  7O =     -0.84075  (     4.42071      4.42003 )
charge of  8O =     -0.87088  (     4.43574      4.43514 )
charge of  9O =     -0.88500  (     4.44287      4.44213 )
charge of  10O =     -0.76335  (     4.38172      4.38163 )
charge of  11O =     -0.82581  (     4.41324      4.41257 )
charge of  12C =      0.66962  (     2.66499      2.66539 )
charge of  13C =      0.67424  (     2.66271      2.66305 )
charge of  14C =      0.67244  (     2.66353      2.66403 )
charge of  15C =      0.67476  (     2.66237      2.66287 )
charge of  16O =     -0.75622  (     4.37817      4.37805 )
(3, 264, 264) 264
S vector [ 0.0785-0.j -1.0938-0.j -0.948 +0.j]
(3, 264, 264) 264
L vector [ 0.3525-0.j -4.5496-0.j -3.9437+0.j]
(3, 264, 264) 264
J vector [ 0.431 +0.j -5.6434-0.j -4.8917+0.j]
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
LO diff from identity 5.179942645105323e-06
ao_index [ 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383]
ao_labels ['0 Er 4f-3  ' '0 Er 4f-2  ' '0 Er 4f-1  ' '0 Er 4f+0  ' '0 Er 4f+1  ' '0 Er 4f+2  ' '0 Er 4f+3  ' '0 Er 5f-3  ' '0 Er 5f-2  ' '0 Er 5f-1  ' '0 Er 5f+0  ' '0 Er 5f+1  ' '0 Er 5f+2  ' '0 Er 5f+3  ' '0 Er 6f-3  ' '0 Er 6f-2  ' '0 Er 6f-1  ' '0 Er 6f+0  ' '0 Er 6f+1  ' '0 Er 6f+2  ' '0 Er 6f+3  ']
  J     M     c^2  
rank = 0, idx_lst = [ 0 16]
rank = 5, idx_lst = [ 5 21]
rank = 13, idx_lst = [13]
rank = 12, idx_lst = [12 28]
rank = 8, idx_lst = [ 8 24]
rank = 4, idx_lst = [ 4 20]
rank = 15, idx_lst = [15]
rank = 1, idx_lst = [ 1 17]
rank = 14, idx_lst = [14]
rank = 7, idx_lst = [ 7 23]
rank = 10, idx_lst = [10 26]
rank = 2, idx_lst = [ 2 18]
rank = 9, idx_lst = [ 9 25]
rank = 6, idx_lst = [ 6 22]
rank = 11, idx_lst = [11 27]
rank = 3, idx_lst = [ 3 19]
[hpc-92-14.cm.cluster:1113746] 15 more processes have sent help message help-mpi-btl-openib.txt / error in device init
[hpc-92-14.cm.cluster:1113746] Set MCA parameter "orte_base_help_aggregate" to 0 to see all help / error messages
 7.5    7.5   -0.5   -0.00001
 7.5    7.5   -1.5    0.00000   -0.00001
 7.5    7.5   -2.5    0.00001    0.00001
 7.5    6.5   -0.5    0.00000   -0.00001
 7.5    6.5   -1.5    0.00001   -0.00000
 7.5    6.5   -2.5   -0.00002    0.00001
 7.5    6.5   -4.5    0.00002    0.00000
 7.5    6.5   -6.5   -0.00001   -0.00001
 7.5    5.5   -2.5   -0.00001   -0.00002
 7.5    5.5   -3.5   -0.00000    0.00001
 7.5    5.5   -4.5   -0.00000    0.00002
 7.5    5.5   -6.5    0.00000   -0.00001
 7.5    4.5    1.5   -0.00001   -0.00001
 7.5    4.5    0.5    0.00000    0.00002
 7.5    4.5   -0.5    0.00002   -0.00002
 7.5    4.5   -1.5   -0.00002   -0.00003
 7.5    4.5   -2.5   -0.00005    0.00002
 7.5    4.5   -3.5    0.00002    0.00007
 7.5    4.5   -4.5    0.00010   -0.00004
 7.5    4.5   -5.5   -0.00002   -0.00010
 7.5    4.5   -6.5   -0.00009    0.00001
 7.5    4.5   -7.5    0.00001    0.00006
 7.5    3.5    1.5   -0.00001   -0.00002
 7.5    3.5    0.5   -0.00005    0.00005
 7.5    3.5   -0.5    0.00011    0.00010
 7.5    3.5   -1.5    0.00018   -0.00019
 7.5    3.5   -2.5   -0.00027   -0.00031
 7.5    3.5   -3.5   -0.00045    0.00034
 7.5    3.5   -4.5    0.00037    0.00060
 7.5    3.5   -5.5    0.00065   -0.00034
 7.5    3.5   -6.5   -0.00025   -0.00059
 7.5    3.5   -7.5   -0.00038    0.00013
 7.5    2.5    2.5    0.00003    0.00000
 7.5    2.5    1.5    0.00003   -0.00009
 7.5    2.5    0.5   -0.00024   -0.00010
 7.5    2.5   -0.5   -0.00026    0.00050
 7.5    2.5   -1.5    0.00088    0.00055
 7.5    2.5   -2.5    0.00098   -0.00132
 7.5    2.5   -3.5   -0.00172   -0.00150
 7.5    2.5   -4.5   -0.00200    0.00196
 7.5    2.5   -5.5    0.00190    0.00225
 7.5    2.5   -6.5    0.00206   -0.00149
 7.5    2.5   -7.5   -0.00084   -0.00136
 7.5    1.5    1.5    0.00032    0.00001
 7.5    1.5    0.5    0.00013   -0.00080
 7.5    1.5   -0.5   -0.00165   -0.00047
 7.5    1.5   -1.5   -0.00114    0.00291
 7.5    1.5   -2.5    0.00446    0.00219
 7.5    1.5   -3.5    0.00352   -0.00598
 7.5    1.5   -4.5   -0.00696   -0.00485
 7.5    1.5   -5.5   -0.00564    0.00693
 7.5    1.5   -6.5    0.00562    0.00530
 7.5    1.5   -7.5    0.00357   -0.00326
 7.5    0.5    0.5    0.00203    0.00000
 7.5    0.5   -0.5    0.00052   -0.00423
 7.5    0.5   -1.5   -0.00758   -0.00170
 7.5    0.5   -2.5   -0.00371    0.01179
 7.5    0.5   -3.5    0.01602    0.00643
 7.5    0.5   -4.5    0.00932   -0.01895
 7.5    0.5   -5.5   -0.01917   -0.01130
 7.5    0.5   -6.5   -0.01096    0.01584
 7.5    0.5   -7.5    0.00937    0.00757
 7.5   -0.5   -0.5    0.00900   -0.00000
 7.5   -0.5   -1.5    0.00162   -0.01632
 7.5   -0.5   -2.5   -0.02565   -0.00476
 7.5   -0.5   -3.5   -0.00938    0.03521
 7.5   -0.5   -4.5    0.04209    0.01468
 7.5   -0.5   -5.5    0.01876   -0.04304
 7.5   -0.5   -6.5   -0.03599   -0.01894
 7.5   -0.5   -7.5   -0.01349    0.02156
 7.5   -1.5   -1.5    0.02988   -0.00000
 7.5   -1.5   -2.5    0.00401   -0.04739
 7.5   -1.5   -3.5   -0.06559   -0.01068
 7.5   -1.5   -4.5   -0.01904    0.07903
 7.5   -1.5   -5.5    0.08148    0.02625
 7.5   -1.5   -6.5    0.02787   -0.06870
 7.5   -1.5   -7.5   -0.04154   -0.02060
 7.5   -2.5   -2.5    0.07573   -0.00001
 7.5   -2.5   -3.5    0.00814   -0.10555
 7.5   -2.5   -4.5   -0.12804   -0.01959
 7.5   -2.5   -5.5   -0.03066    0.13289
 7.5   -2.5   -6.5    0.11278    0.03497
 7.5   -2.5   -7.5    0.02710   -0.06867
 7.5   -3.5   -3.5    0.14804   -0.00002
 7.5   -3.5   -4.5    0.01354   -0.18071
 7.5   -3.5   -5.5   -0.18869   -0.02843
 7.5   -3.5   -6.5   -0.03656    0.16107
 7.5   -3.5   -7.5    0.09867    0.03039
 7.5   -4.5   -4.5    0.22186   -0.00001
 7.5   -4.5   -5.5    0.01748   -0.23308
 7.5   -4.5   -6.5   -0.20010   -0.02987
 7.5   -4.5   -7.5   -0.02806    0.12329
 7.5   -5.5   -5.5    0.24628    0.00006
 7.5   -5.5   -6.5    0.01571   -0.21267
 7.5   -5.5   -7.5   -0.13180   -0.01983
 7.5   -6.5   -6.5    0.18471    0.00010
 7.5   -6.5   -7.5    0.00880   -0.11516
 7.5   -7.5   -7.5    0.07226    0.00004
triangle [[-0.    +0.j      0.    -0.j     -0.    +0.j      0.    +0.j     -0.    -0.j      0.    +0.j     -0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    -0.j     -0.    +0.j      0.    +0.j    ]
 [ 0.    +0.j      0.    +0.j     -0.    -0.j     -0.    +0.j      0.    -0.j     -0.    +0.j      0.    -0.j     -0.    +0.j      0.    -0.j      0.    -0.j     -0.    +0.j      0.    -0.j      0.    +0.j      0.    -0.j     -0.    -0.j     -0.    +0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    -0.j     -0.    -0.j      0.    +0.j     -0.    -0.j     -0.    +0.j      0.    -0.j      0.    +0.j      0.    +0.j     -0.    -0.j     -0.    +0.j     -0.    +0.j      0.    -0.j      0.    -0.j     -0.    -0.j    ]
 [ 0.    +0.j      0.    +0.j      0.    +0.j     -0.    -0.j     -0.    +0.j      0.    +0.j     -0.    -0.j      0.    +0.j      0.    -0.j     -0.    -0.j     -0.    +0.j      0.    +0.0001j  0.0001-0.j     -0.    -0.0001j -0.0001+0.j      0.    +0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j     -0.    -0.j      0.    +0.j     -0.    -0.j     -0.0001+0.j      0.0001+0.0001j  0.0002-0.0002j -0.0003-0.0003j -0.0005+0.0003j  0.0004+0.0006j  0.0007-0.0003j -0.0002-0.0006j -0.0004+0.0001j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    -0.0001j -0.0002-0.0001j -0.0003+0.0005j  0.0009+0.0006j  0.001 -0.0013j -0.0017-0.0015j -0.002 +0.002j   0.0019+0.0022j  0.0021-0.0015j -0.0008-0.0014j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0003+0.j      0.0001-0.0008j -0.0016-0.0005j -0.0011+0.0029j  0.0045+0.0022j  0.0035-0.006j  -0.007 -0.0048j -0.0056+0.0069j  0.0056+0.0053j  0.0036-0.0033j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.002 +0.j      0.0005-0.0042j -0.0076-0.0017j -0.0037+0.0118j  0.016 +0.0064j  0.0093-0.0189j -0.0192-0.0113j -0.011 +0.0158j  0.0094+0.0076j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.009 -0.j      0.0016-0.0163j -0.0256-0.0048j -0.0094+0.0352j  0.0421+0.0147j  0.0188-0.043j  -0.036 -0.0189j -0.0135+0.0216j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0299-0.j      0.004 -0.0474j -0.0656-0.0107j -0.019 +0.079j   0.0815+0.0263j  0.0279-0.0687j -0.0415-0.0206j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0757-0.j      0.0081-0.1055j -0.128 -0.0196j -0.0307+0.1329j  0.1128+0.035j   0.0271-0.0687j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.148 -0.j      0.0135-0.1807j -0.1887-0.0284j -0.0366+0.1611j  0.0987+0.0304j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.2219-0.j      0.0175-0.2331j -0.2001-0.0299j -0.0281+0.1233j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.2463+0.0001j  0.0157-0.2127j -0.1318-0.0198j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.1847+0.0001j  0.0088-0.1152j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.    +0.j      0.0723+0.j    ]]
full [[-0.    +0.j      0.    -0.j     -0.    +0.j      0.    +0.j     -0.    -0.j      0.    +0.j     -0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    +0.j     -0.    +0.j      0.    -0.j      0.    -0.j     -0.    +0.j      0.    +0.j    ]
 [ 0.    +0.j      0.    +0.j     -0.    -0.j     -0.    +0.j      0.    -0.j     -0.    +0.j      0.    -0.j     -0.    +0.j      0.    -0.j      0.    -0.j     -0.    +0.j      0.    -0.j      0.    +0.j      0.    -0.j     -0.    -0.j     -0.    +0.j    ]
 [-0.    -0.j     -0.    +0.j      0.    +0.j     -0.    -0.j      0.    +0.j     -0.    -0.j     -0.    +0.j      0.    -0.j      0.    +0.j      0.    +0.j     -0.    -0.j     -0.    +0.j     -0.    +0.j      0.    -0.j      0.    -0.j     -0.    -0.j    ]
 [ 0.    -0.j     -0.    -0.j     -0.    +0.j     -0.    +0.j     -0.    +0.j      0.    +0.j     -0.    -0.j      0.    +0.j      0.    -0.j     -0.    -0.j     -0.    +0.j      0.    +0.0001j  0.0001-0.j     -0.    -0.0001j -0.0001+0.j      0.    +0.0001j]
 [-0.    +0.j      0.    +0.j      0.    -0.j     -0.    -0.j     -0.    +0.j      0.    +0.j     -0.    -0.j     -0.0001+0.j      0.0001+0.0001j  0.0002-0.0002j -0.0003-0.0003j -0.0005+0.0003j  0.0004+0.0006j  0.0007-0.0003j -0.0002-0.0006j -0.0004+0.0001j]
 [ 0.    -0.j     -0.    -0.j     -0.    +0.j      0.    -0.j      0.    -0.j      0.    +0.j      0.    -0.0001j -0.0002-0.0001j -0.0003+0.0005j  0.0009+0.0006j  0.001 -0.0013j -0.0017-0.0015j -0.002 +0.002j   0.0019+0.0022j  0.0021-0.0015j -0.0008-0.0014j]
 [-0.    +0.j      0.    +0.j     -0.    -0.j     -0.    +0.j     -0.    +0.j      0.    +0.0001j  0.0003+0.j      0.0001-0.0008j -0.0016-0.0005j -0.0011+0.0029j  0.0045+0.0022j  0.0035-0.006j  -0.007 -0.0048j -0.0056+0.0069j  0.0056+0.0053j  0.0036-0.0033j]
 [ 0.    -0.j     -0.    -0.j      0.    +0.j      0.    -0.j     -0.0001-0.j     -0.0002+0.0001j  0.0001+0.0008j  0.002 +0.j      0.0005-0.0042j -0.0076-0.0017j -0.0037+0.0118j  0.016 +0.0064j  0.0093-0.0189j -0.0192-0.0113j -0.011 +0.0158j  0.0094+0.0076j]
 [-0.    -0.j      0.    +0.j      0.    -0.j      0.    +0.j      0.0001-0.0001j -0.0003-0.0005j -0.0016+0.0005j  0.0005+0.0042j  0.009 +0.j      0.0016-0.0163j -0.0256-0.0048j -0.0094+0.0352j  0.0421+0.0147j  0.0188-0.043j  -0.036 -0.0189j -0.0135+0.0216j]
 [ 0.    +0.j      0.    +0.j      0.    -0.j     -0.    +0.j      0.0002+0.0002j  0.0009-0.0006j -0.0011-0.0029j -0.0076+0.0017j  0.0016+0.0163j  0.0299+0.j      0.004 -0.0474j -0.0656-0.0107j -0.019 +0.079j   0.0815+0.0263j  0.0279-0.0687j -0.0415-0.0206j]
 [ 0.    -0.j     -0.    -0.j     -0.    +0.j     -0.    -0.j     -0.0003+0.0003j  0.001 +0.0013j  0.0045-0.0022j -0.0037-0.0118j -0.0256+0.0048j  0.004 +0.0474j  0.0757+0.j      0.0081-0.1055j -0.128 -0.0196j -0.0307+0.1329j  0.1128+0.035j   0.0271-0.0687j]
 [-0.    -0.j      0.    +0.j     -0.    -0.j      0.    -0.0001j -0.0005-0.0003j -0.0017+0.0015j  0.0035+0.006j   0.016 -0.0064j -0.0094-0.0352j -0.0656+0.0107j  0.0081+0.1055j  0.148 +0.j      0.0135-0.1807j -0.1887-0.0284j -0.0366+0.1611j  0.0987+0.0304j]
 [ 0.    +0.j      0.    -0.j     -0.    -0.j      0.0001+0.j      0.0004-0.0006j -0.002 -0.002j  -0.007 +0.0048j  0.0093+0.0189j  0.0421-0.0147j -0.019 -0.079j  -0.128 +0.0196j  0.0135+0.1807j  0.2219+0.j      0.0175-0.2331j -0.2001-0.0299j -0.0281+0.1233j]
 [ 0.    +0.j      0.    +0.j      0.    +0.j     -0.    +0.0001j  0.0007+0.0003j  0.0019-0.0022j -0.0056-0.0069j -0.0192+0.0113j  0.0188+0.043j   0.0815-0.0263j -0.0307-0.1329j -0.1887+0.0284j  0.0175+0.2331j  0.2463+0.j      0.0157-0.2127j -0.1318-0.0198j]
 [-0.    -0.j     -0.    +0.j      0.    +0.j     -0.0001-0.j     -0.0002+0.0006j  0.0021+0.0015j  0.0056-0.0053j -0.011 -0.0158j -0.036 +0.0189j  0.0279+0.0687j  0.1128-0.035j  -0.0366-0.1611j -0.2001+0.0299j  0.0157+0.2127j  0.1847+0.j      0.0088-0.1152j]
 [ 0.    -0.j     -0.    -0.j     -0.    +0.j      0.    -0.0001j -0.0004-0.0001j -0.0008+0.0014j  0.0036+0.0033j  0.0094-0.0076j -0.0135-0.0216j -0.0415+0.0206j  0.0271+0.0687j  0.0987-0.0304j -0.0281-0.1233j -0.1318+0.0198j  0.0088+0.1152j  0.0723+0.j    ]]
Sum of c^2 0.9901425346711172
Tue Apr 15 23:57:29 PDT 2025
